Search.setIndex({"docnames": ["getting_started/index", "index", "nml/index", "nml/matrix/index", "nml/matrix/mat2", "nml/matrix/mat2/constructor", "nml/matrix/mat2/constructor_float", "nml/matrix/mat2/constructor_float_float_float_float", "nml/matrix/mat2/constructor_float_float_vec2", "nml/matrix/mat2/constructor_floatptr", "nml/matrix/mat2/constructor_mat3", "nml/matrix/mat2/constructor_mat4", "nml/matrix/mat2/constructor_vec2_float_float", "nml/matrix/mat2/constructor_vec2_vec2", "nml/matrix/mat2/data", "nml/matrix/mat2/det", "nml/matrix/mat2/identity", "nml/matrix/mat2/operator_brackets_ref", "nml/matrix/mat2/operator_brackets_value", "nml/matrix/mat2/operator_divide_equal_float", "nml/matrix/mat2/operator_minus_equal_mat2", "nml/matrix/mat2/operator_plus_equal_mat2", "nml/matrix/mat2/operator_times_equal_float", "nml/matrix/mat2/operator_times_equal_mat2", "nml/matrix/mat3", "nml/matrix/mat3/constructor", "nml/matrix/mat3/constructor_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3", "nml/matrix/mat3/constructor_floatptr", "nml/matrix/mat3/constructor_mat4", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float", "nml/matrix/mat3/constructor_vec3_vec3_vec3", "nml/matrix/mat3/data", "nml/matrix/mat3/det", "nml/matrix/mat3/identity", "nml/matrix/mat3/operator_brackets_ref", "nml/matrix/mat3/operator_brackets_value", "nml/matrix/mat3/operator_divide_equal_float", "nml/matrix/mat3/operator_minus_equal_mat3", "nml/matrix/mat3/operator_plus_equal_mat3", "nml/matrix/mat3/operator_times_equal_float", "nml/matrix/mat3/operator_times_equal_mat3", "nml/matrix/mat4", "nml/matrix/mat4/constructor", "nml/matrix/mat4/constructor_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4", "nml/matrix/mat4/constructor_floatptr", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4", "nml/matrix/mat4/data", "nml/matrix/mat4/det", "nml/matrix/mat4/identity", "nml/matrix/mat4/operator_brackets_ref", "nml/matrix/mat4/operator_brackets_value", "nml/matrix/mat4/operator_divide_equal_float", "nml/matrix/mat4/operator_minus_equal_mat4", "nml/matrix/mat4/operator_plus_equal_mat4", "nml/matrix/mat4/operator_times_equal_float", "nml/matrix/mat4/operator_times_equal_mat4", "nml/namespace/nml_conjugate_quat", "nml/namespace/nml_cross_vec3_vec3", "nml/namespace/nml_decomposetransform_mat4_vec3_quat_vec3", "nml/namespace/nml_dot_quat_quat", "nml/namespace/nml_dot_vec2_vec2", "nml/namespace/nml_dot_vec3_vec3", "nml/namespace/nml_dot_vec4_vec4", "nml/namespace/nml_euleranglestoquat_vec3", "nml/namespace/nml_inverse_mat2", "nml/namespace/nml_inverse_mat3", "nml/namespace/nml_inverse_mat4", "nml/namespace/nml_lerp_float_float_float", "nml/namespace/nml_lookatlh_vec3_vec3_vec3", "nml/namespace/nml_lookatrh_vec3_vec3_vec3", "nml/namespace/nml_normalize_quat", "nml/namespace/nml_normalize_vec2", "nml/namespace/nml_normalize_vec3", "nml/namespace/nml_normalize_vec4", "nml/namespace/nml_operator_divide_mat2_float", "nml/namespace/nml_operator_divide_mat3_float", "nml/namespace/nml_operator_divide_mat4_float", "nml/namespace/nml_operator_divide_quat_float", "nml/namespace/nml_operator_divide_vec2_float", "nml/namespace/nml_operator_divide_vec3_float", "nml/namespace/nml_operator_divide_vec4_float", "nml/namespace/nml_operator_is_equal_mat2_mat2", "nml/namespace/nml_operator_is_equal_mat3_mat3", "nml/namespace/nml_operator_is_equal_mat4_mat4", "nml/namespace/nml_operator_is_equal_quat_quat", "nml/namespace/nml_operator_is_equal_vec2_vec2", "nml/namespace/nml_operator_is_equal_vec3_vec3", "nml/namespace/nml_operator_is_equal_vec4_vec4", "nml/namespace/nml_operator_is_not_equal_mat2_mat2", "nml/namespace/nml_operator_is_not_equal_mat3_mat3", "nml/namespace/nml_operator_is_not_equal_mat4_mat4", "nml/namespace/nml_operator_is_not_equal_quat_quat", "nml/namespace/nml_operator_is_not_equal_vec2_vec2", "nml/namespace/nml_operator_is_not_equal_vec3_vec3", "nml/namespace/nml_operator_is_not_equal_vec4_vec4", "nml/namespace/nml_operator_minus_mat2_mat2", "nml/namespace/nml_operator_minus_mat3_mat3", "nml/namespace/nml_operator_minus_mat4_mat4", "nml/namespace/nml_operator_minus_quat_quat", "nml/namespace/nml_operator_minus_vec2_vec2", "nml/namespace/nml_operator_minus_vec3_vec3", "nml/namespace/nml_operator_minus_vec4_vec4", "nml/namespace/nml_operator_plus_mat2_mat2", "nml/namespace/nml_operator_plus_mat3_mat3", "nml/namespace/nml_operator_plus_mat4_mat4", "nml/namespace/nml_operator_plus_quat_quat", "nml/namespace/nml_operator_plus_vec2_vec2", "nml/namespace/nml_operator_plus_vec3_vec3", "nml/namespace/nml_operator_plus_vec4_vec4", "nml/namespace/nml_operator_times_float_mat2", "nml/namespace/nml_operator_times_float_mat3", "nml/namespace/nml_operator_times_float_mat4", "nml/namespace/nml_operator_times_float_quat", "nml/namespace/nml_operator_times_float_vec2", "nml/namespace/nml_operator_times_float_vec3", "nml/namespace/nml_operator_times_float_vec4", "nml/namespace/nml_operator_times_mat2_float", "nml/namespace/nml_operator_times_mat2_mat2", "nml/namespace/nml_operator_times_mat2_vec2", "nml/namespace/nml_operator_times_mat3_float", "nml/namespace/nml_operator_times_mat3_mat3", "nml/namespace/nml_operator_times_mat3_vec3", "nml/namespace/nml_operator_times_mat4_float", "nml/namespace/nml_operator_times_mat4_mat4", "nml/namespace/nml_operator_times_mat4_vec4", "nml/namespace/nml_operator_times_quat_float", "nml/namespace/nml_operator_times_quat_quat", "nml/namespace/nml_operator_times_vec2_float", "nml/namespace/nml_operator_times_vec3_float", "nml/namespace/nml_operator_times_vec4_float", "nml/namespace/nml_ortholh_float_float_float_float_float_float", "nml/namespace/nml_orthorh_float_float_float_float_float_float", "nml/namespace/nml_perspectivelh_float_float_float_float", "nml/namespace/nml_perspectiverh_float_float_float_float", "nml/namespace/nml_quattoeulerangles_quat", "nml/namespace/nml_quattorotationmatrix_quat", "nml/namespace/nml_reflect_vec2_vec2", "nml/namespace/nml_reflect_vec3_vec3", "nml/namespace/nml_reflect_vec4_vec4", "nml/namespace/nml_refract_vec2_vec2_float", "nml/namespace/nml_refract_vec3_vec3_float", "nml/namespace/nml_refract_vec4_vec4_float", "nml/namespace/nml_rotate_float", "nml/namespace/nml_rotate_float_vec3", "nml/namespace/nml_rotationmatrixtoeulerangles_mat4", "nml/namespace/nml_scale_vec2", "nml/namespace/nml_scale_vec3", "nml/namespace/nml_slerp_quat_quat_float", "nml/namespace/nml_to_string_mat2", "nml/namespace/nml_to_string_mat3", "nml/namespace/nml_to_string_mat4", "nml/namespace/nml_to_string_quat", "nml/namespace/nml_to_string_vec2", "nml/namespace/nml_to_string_vec3", "nml/namespace/nml_to_string_vec4", "nml/namespace/nml_todeg_float", "nml/namespace/nml_torad_float", "nml/namespace/nml_translate_vec2", "nml/namespace/nml_translate_vec3", "nml/namespace/nml_transpose_mat2", "nml/namespace/nml_transpose_mat3", "nml/namespace/nml_transpose_mat4", "nml/other/index", "nml/quaternion/index", "nml/quaternion/quat", "nml/quaternion/quat/constructor", "nml/quaternion/quat/constructor_float_float_float_float", "nml/quaternion/quat/constructor_floatptr", "nml/quaternion/quat/data", "nml/quaternion/quat/identity", "nml/quaternion/quat/length", "nml/quaternion/quat/operator_brackets_ref", "nml/quaternion/quat/operator_brackets_value", "nml/quaternion/quat/operator_divide_equal_float", "nml/quaternion/quat/operator_minus", "nml/quaternion/quat/operator_minus_equal_quat", "nml/quaternion/quat/operator_plus_equal_quat", "nml/quaternion/quat/operator_times_equal_float", "nml/quaternion/quat/operator_times_equal_quat", "nml/vector/index", "nml/vector/vec2", "nml/vector/vec2/constructor", "nml/vector/vec2/constructor_float", "nml/vector/vec2/constructor_float_float", "nml/vector/vec2/constructor_floatptr", "nml/vector/vec2/constructor_vec3", "nml/vector/vec2/constructor_vec4", "nml/vector/vec2/data", "nml/vector/vec2/length", "nml/vector/vec2/operator_brackets_ref", "nml/vector/vec2/operator_brackets_value", "nml/vector/vec2/operator_divide_equal_float", "nml/vector/vec2/operator_minus", "nml/vector/vec2/operator_minus_equal_vec2", "nml/vector/vec2/operator_plus_equal_vec2", "nml/vector/vec2/operator_times_equal_float", "nml/vector/vec3", "nml/vector/vec3/constructor", "nml/vector/vec3/constructor_float", "nml/vector/vec3/constructor_float_float_float", "nml/vector/vec3/constructor_float_vec2", "nml/vector/vec3/constructor_floatptr", "nml/vector/vec3/constructor_vec2_float", "nml/vector/vec3/constructor_vec4", "nml/vector/vec3/data", "nml/vector/vec3/length", "nml/vector/vec3/operator_brackets_ref", "nml/vector/vec3/operator_brackets_value", "nml/vector/vec3/operator_divide_equal_float", "nml/vector/vec3/operator_minus", "nml/vector/vec3/operator_minus_equal_vec3", "nml/vector/vec3/operator_plus_equal_vec3", "nml/vector/vec3/operator_times_equal_float", "nml/vector/vec4", "nml/vector/vec4/constructor", "nml/vector/vec4/constructor_float", "nml/vector/vec4/constructor_float_float_float_float", "nml/vector/vec4/constructor_float_float_vec2", "nml/vector/vec4/constructor_float_vec2_float", "nml/vector/vec4/constructor_float_vec3", "nml/vector/vec4/constructor_floatptr", "nml/vector/vec4/constructor_vec2_float_float", "nml/vector/vec4/constructor_vec2_vec2", "nml/vector/vec4/constructor_vec3_float", "nml/vector/vec4/data", "nml/vector/vec4/length", "nml/vector/vec4/operator_brackets_ref", "nml/vector/vec4/operator_brackets_value", "nml/vector/vec4/operator_divide_equal_float", "nml/vector/vec4/operator_minus", "nml/vector/vec4/operator_minus_equal_vec4", "nml/vector/vec4/operator_plus_equal_vec4", "nml/vector/vec4/operator_times_equal_float"], "filenames": ["getting_started/index.rst", "index.rst", "nml/index.rst", "nml/matrix/index.rst", "nml/matrix/mat2.rst", "nml/matrix/mat2/constructor.rst", "nml/matrix/mat2/constructor_float.rst", "nml/matrix/mat2/constructor_float_float_float_float.rst", "nml/matrix/mat2/constructor_float_float_vec2.rst", "nml/matrix/mat2/constructor_floatptr.rst", "nml/matrix/mat2/constructor_mat3.rst", "nml/matrix/mat2/constructor_mat4.rst", "nml/matrix/mat2/constructor_vec2_float_float.rst", "nml/matrix/mat2/constructor_vec2_vec2.rst", "nml/matrix/mat2/data.rst", "nml/matrix/mat2/det.rst", "nml/matrix/mat2/identity.rst", "nml/matrix/mat2/operator_brackets_ref.rst", "nml/matrix/mat2/operator_brackets_value.rst", "nml/matrix/mat2/operator_divide_equal_float.rst", "nml/matrix/mat2/operator_minus_equal_mat2.rst", "nml/matrix/mat2/operator_plus_equal_mat2.rst", "nml/matrix/mat2/operator_times_equal_float.rst", "nml/matrix/mat2/operator_times_equal_mat2.rst", "nml/matrix/mat3.rst", "nml/matrix/mat3/constructor.rst", "nml/matrix/mat3/constructor_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3.rst", "nml/matrix/mat3/constructor_floatptr.rst", "nml/matrix/mat3/constructor_mat4.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_vec3_vec3.rst", "nml/matrix/mat3/data.rst", "nml/matrix/mat3/det.rst", "nml/matrix/mat3/identity.rst", "nml/matrix/mat3/operator_brackets_ref.rst", "nml/matrix/mat3/operator_brackets_value.rst", "nml/matrix/mat3/operator_divide_equal_float.rst", "nml/matrix/mat3/operator_minus_equal_mat3.rst", "nml/matrix/mat3/operator_plus_equal_mat3.rst", "nml/matrix/mat3/operator_times_equal_float.rst", "nml/matrix/mat3/operator_times_equal_mat3.rst", "nml/matrix/mat4.rst", "nml/matrix/mat4/constructor.rst", "nml/matrix/mat4/constructor_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4.rst", "nml/matrix/mat4/constructor_floatptr.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4.rst", "nml/matrix/mat4/data.rst", "nml/matrix/mat4/det.rst", "nml/matrix/mat4/identity.rst", "nml/matrix/mat4/operator_brackets_ref.rst", "nml/matrix/mat4/operator_brackets_value.rst", "nml/matrix/mat4/operator_divide_equal_float.rst", "nml/matrix/mat4/operator_minus_equal_mat4.rst", "nml/matrix/mat4/operator_plus_equal_mat4.rst", "nml/matrix/mat4/operator_times_equal_float.rst", "nml/matrix/mat4/operator_times_equal_mat4.rst", "nml/namespace/nml_conjugate_quat.rst", "nml/namespace/nml_cross_vec3_vec3.rst", "nml/namespace/nml_decomposetransform_mat4_vec3_quat_vec3.rst", "nml/namespace/nml_dot_quat_quat.rst", "nml/namespace/nml_dot_vec2_vec2.rst", "nml/namespace/nml_dot_vec3_vec3.rst", "nml/namespace/nml_dot_vec4_vec4.rst", "nml/namespace/nml_euleranglestoquat_vec3.rst", "nml/namespace/nml_inverse_mat2.rst", "nml/namespace/nml_inverse_mat3.rst", "nml/namespace/nml_inverse_mat4.rst", "nml/namespace/nml_lerp_float_float_float.rst", "nml/namespace/nml_lookatlh_vec3_vec3_vec3.rst", "nml/namespace/nml_lookatrh_vec3_vec3_vec3.rst", "nml/namespace/nml_normalize_quat.rst", "nml/namespace/nml_normalize_vec2.rst", "nml/namespace/nml_normalize_vec3.rst", "nml/namespace/nml_normalize_vec4.rst", "nml/namespace/nml_operator_divide_mat2_float.rst", "nml/namespace/nml_operator_divide_mat3_float.rst", "nml/namespace/nml_operator_divide_mat4_float.rst", "nml/namespace/nml_operator_divide_quat_float.rst", "nml/namespace/nml_operator_divide_vec2_float.rst", "nml/namespace/nml_operator_divide_vec3_float.rst", "nml/namespace/nml_operator_divide_vec4_float.rst", "nml/namespace/nml_operator_is_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_equal_quat_quat.rst", "nml/namespace/nml_operator_is_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_equal_vec4_vec4.rst", "nml/namespace/nml_operator_is_not_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_not_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_not_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_not_equal_quat_quat.rst", "nml/namespace/nml_operator_is_not_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_not_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_not_equal_vec4_vec4.rst", "nml/namespace/nml_operator_minus_mat2_mat2.rst", "nml/namespace/nml_operator_minus_mat3_mat3.rst", "nml/namespace/nml_operator_minus_mat4_mat4.rst", "nml/namespace/nml_operator_minus_quat_quat.rst", "nml/namespace/nml_operator_minus_vec2_vec2.rst", "nml/namespace/nml_operator_minus_vec3_vec3.rst", "nml/namespace/nml_operator_minus_vec4_vec4.rst", "nml/namespace/nml_operator_plus_mat2_mat2.rst", "nml/namespace/nml_operator_plus_mat3_mat3.rst", "nml/namespace/nml_operator_plus_mat4_mat4.rst", "nml/namespace/nml_operator_plus_quat_quat.rst", "nml/namespace/nml_operator_plus_vec2_vec2.rst", "nml/namespace/nml_operator_plus_vec3_vec3.rst", "nml/namespace/nml_operator_plus_vec4_vec4.rst", "nml/namespace/nml_operator_times_float_mat2.rst", "nml/namespace/nml_operator_times_float_mat3.rst", "nml/namespace/nml_operator_times_float_mat4.rst", "nml/namespace/nml_operator_times_float_quat.rst", "nml/namespace/nml_operator_times_float_vec2.rst", "nml/namespace/nml_operator_times_float_vec3.rst", "nml/namespace/nml_operator_times_float_vec4.rst", "nml/namespace/nml_operator_times_mat2_float.rst", "nml/namespace/nml_operator_times_mat2_mat2.rst", "nml/namespace/nml_operator_times_mat2_vec2.rst", "nml/namespace/nml_operator_times_mat3_float.rst", "nml/namespace/nml_operator_times_mat3_mat3.rst", "nml/namespace/nml_operator_times_mat3_vec3.rst", "nml/namespace/nml_operator_times_mat4_float.rst", "nml/namespace/nml_operator_times_mat4_mat4.rst", "nml/namespace/nml_operator_times_mat4_vec4.rst", "nml/namespace/nml_operator_times_quat_float.rst", "nml/namespace/nml_operator_times_quat_quat.rst", "nml/namespace/nml_operator_times_vec2_float.rst", "nml/namespace/nml_operator_times_vec3_float.rst", "nml/namespace/nml_operator_times_vec4_float.rst", "nml/namespace/nml_ortholh_float_float_float_float_float_float.rst", "nml/namespace/nml_orthorh_float_float_float_float_float_float.rst", "nml/namespace/nml_perspectivelh_float_float_float_float.rst", "nml/namespace/nml_perspectiverh_float_float_float_float.rst", "nml/namespace/nml_quattoeulerangles_quat.rst", "nml/namespace/nml_quattorotationmatrix_quat.rst", "nml/namespace/nml_reflect_vec2_vec2.rst", "nml/namespace/nml_reflect_vec3_vec3.rst", "nml/namespace/nml_reflect_vec4_vec4.rst", "nml/namespace/nml_refract_vec2_vec2_float.rst", "nml/namespace/nml_refract_vec3_vec3_float.rst", "nml/namespace/nml_refract_vec4_vec4_float.rst", "nml/namespace/nml_rotate_float.rst", "nml/namespace/nml_rotate_float_vec3.rst", "nml/namespace/nml_rotationmatrixtoeulerangles_mat4.rst", "nml/namespace/nml_scale_vec2.rst", "nml/namespace/nml_scale_vec3.rst", "nml/namespace/nml_slerp_quat_quat_float.rst", "nml/namespace/nml_to_string_mat2.rst", "nml/namespace/nml_to_string_mat3.rst", "nml/namespace/nml_to_string_mat4.rst", "nml/namespace/nml_to_string_quat.rst", "nml/namespace/nml_to_string_vec2.rst", "nml/namespace/nml_to_string_vec3.rst", "nml/namespace/nml_to_string_vec4.rst", "nml/namespace/nml_todeg_float.rst", "nml/namespace/nml_torad_float.rst", "nml/namespace/nml_translate_vec2.rst", "nml/namespace/nml_translate_vec3.rst", "nml/namespace/nml_transpose_mat2.rst", "nml/namespace/nml_transpose_mat3.rst", "nml/namespace/nml_transpose_mat4.rst", "nml/other/index.rst", "nml/quaternion/index.rst", "nml/quaternion/quat.rst", "nml/quaternion/quat/constructor.rst", "nml/quaternion/quat/constructor_float_float_float_float.rst", "nml/quaternion/quat/constructor_floatptr.rst", "nml/quaternion/quat/data.rst", "nml/quaternion/quat/identity.rst", "nml/quaternion/quat/length.rst", "nml/quaternion/quat/operator_brackets_ref.rst", "nml/quaternion/quat/operator_brackets_value.rst", "nml/quaternion/quat/operator_divide_equal_float.rst", "nml/quaternion/quat/operator_minus.rst", "nml/quaternion/quat/operator_minus_equal_quat.rst", "nml/quaternion/quat/operator_plus_equal_quat.rst", "nml/quaternion/quat/operator_times_equal_float.rst", "nml/quaternion/quat/operator_times_equal_quat.rst", "nml/vector/index.rst", "nml/vector/vec2.rst", "nml/vector/vec2/constructor.rst", "nml/vector/vec2/constructor_float.rst", "nml/vector/vec2/constructor_float_float.rst", "nml/vector/vec2/constructor_floatptr.rst", "nml/vector/vec2/constructor_vec3.rst", "nml/vector/vec2/constructor_vec4.rst", "nml/vector/vec2/data.rst", "nml/vector/vec2/length.rst", "nml/vector/vec2/operator_brackets_ref.rst", "nml/vector/vec2/operator_brackets_value.rst", "nml/vector/vec2/operator_divide_equal_float.rst", "nml/vector/vec2/operator_minus.rst", "nml/vector/vec2/operator_minus_equal_vec2.rst", "nml/vector/vec2/operator_plus_equal_vec2.rst", "nml/vector/vec2/operator_times_equal_float.rst", "nml/vector/vec3.rst", "nml/vector/vec3/constructor.rst", "nml/vector/vec3/constructor_float.rst", "nml/vector/vec3/constructor_float_float_float.rst", "nml/vector/vec3/constructor_float_vec2.rst", "nml/vector/vec3/constructor_floatptr.rst", "nml/vector/vec3/constructor_vec2_float.rst", "nml/vector/vec3/constructor_vec4.rst", "nml/vector/vec3/data.rst", "nml/vector/vec3/length.rst", "nml/vector/vec3/operator_brackets_ref.rst", "nml/vector/vec3/operator_brackets_value.rst", "nml/vector/vec3/operator_divide_equal_float.rst", "nml/vector/vec3/operator_minus.rst", "nml/vector/vec3/operator_minus_equal_vec3.rst", "nml/vector/vec3/operator_plus_equal_vec3.rst", "nml/vector/vec3/operator_times_equal_float.rst", "nml/vector/vec4.rst", "nml/vector/vec4/constructor.rst", "nml/vector/vec4/constructor_float.rst", "nml/vector/vec4/constructor_float_float_float_float.rst", "nml/vector/vec4/constructor_float_float_vec2.rst", "nml/vector/vec4/constructor_float_vec2_float.rst", "nml/vector/vec4/constructor_float_vec3.rst", "nml/vector/vec4/constructor_floatptr.rst", "nml/vector/vec4/constructor_vec2_float_float.rst", "nml/vector/vec4/constructor_vec2_vec2.rst", "nml/vector/vec4/constructor_vec3_float.rst", "nml/vector/vec4/data.rst", "nml/vector/vec4/length.rst", "nml/vector/vec4/operator_brackets_ref.rst", "nml/vector/vec4/operator_brackets_value.rst", "nml/vector/vec4/operator_divide_equal_float.rst", "nml/vector/vec4/operator_minus.rst", "nml/vector/vec4/operator_minus_equal_vec4.rst", "nml/vector/vec4/operator_plus_equal_vec4.rst", "nml/vector/vec4/operator_times_equal_float.rst"], "titles": ["Getting started", "nml - Nutshell Mathematics Library", "nml", "Matrix", "mat2", "mat2: mat2()", "mat2: mat2(float _value)", "mat2: mat2(float _xx, float _xy, float _yx, float _yy)", "mat2: mat2(float _xx, float _xy, nml::vec2 _y)", "mat2: mat2(const float* _ptr)", "mat2: mat2(nml::mat3 _mat)", "mat2: mat2(nml::mat4 _mat)", "mat2: mat2(nml::vec2 _x, float _yx, float _yy)", "mat2: mat2(nml::vec2 _x, nml::vec2 _y)", "mat2: float* data()", "mat2: float det() const", "mat2: nml::mat2 nml::mat2::identity()", "mat2: nml::mat2&amp; operator[](size_t index)", "mat2: const nml::mat2&amp; operator[](size_t index) const", "mat2: nml::mat2&amp; operator/=(const float other)", "mat2: nml::mat2&amp; operator-=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator+=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator*=(const float other)", "mat2: nml::mat2&amp; operator*=(const nml::mat2&amp; other)", "mat3", "mat3: mat3()", "mat3: mat3(float _value)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _z)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, nml::vec3 _z)", "mat3: mat3(const float* _ptr)", "mat3: mat3(nml::mat4 _mat)", "mat3: mat3(nml::vec3 _x, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _x, float _yx, float _yy, float _yz, nml::vec3 _z)", "mat3: mat3(nml::vec3 _x, nml::vec3 _y, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _x, nml::vec3 _y, nml::vec3 _z)", "mat3: float* data()", "mat3: float det() const", "mat3: nml::mat3 nml::mat3::identity()", "mat3: nml::mat3&amp; operator[](size_t index)", "mat3: const nml::mat3&amp; operator[](size_t index) const", "mat3: nml::mat3&amp; operator/=(const float other)", "mat3: nml::mat3&amp; operator-=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator+=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator*=(const float other)", "mat3: nml::mat3&amp; operator*=(const nml::mat3&amp; other)", "mat4", "mat4: mat4()", "mat4: mat4(float _value)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(const float* _ptr)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)", "mat4: float* data()", "mat4: float det() const", "mat4: nml::mat4 nml::mat4::identity()", "mat4: nml::mat4&amp; operator[](size_t index)", "mat4: const nml::mat4&amp; operator[](size_t index) const", "mat4: nml::mat4&amp; operator/=(const float other)", "mat4: nml::mat4&amp; operator-=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator+=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator*=(const float other)", "mat4: nml::mat4&amp; operator*=(const nml::mat4&amp; other)", "nml::quat nml::conjugate(const nml::quat&amp; qua)", "nml::vec3 nml::cross(const nml::vec3&amp; a, const nml::vec3&amp; b)", "void nml::decomposeTransform(const nml::mat4&amp; transform, nml::vec3&amp; translation, nml::quat&amp; rotation, nml::vec3&amp; scale)", "float nml::dot(const nml::quat&amp; a, const nml::quat&amp; b)", "float nml::dot(const nml::vec2&amp; a, const nml::vec2&amp; b)", "float nml::dot(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec4&amp; a, const nml::vec4&amp; b)", "nml::quat nml::eulerAnglesToQuat(const nml::vec3&amp; vec)", "nml::mat2 inverse(const nml::mat2&amp; mat)", "nml::mat3 inverse(const nml::mat3&amp; mat)", "nml::mat4 inverse(const nml::mat4&amp; mat)", "float nml::lerp(const float&amp; a, const float&amp; b, const float interpolationValue)", "nml::mat4 lookAtLH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::mat4 lookAtRH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::quat nml::normalize(const nml::quat&amp; qua)", "nml::vec2 nml::normalize(const nml::vec2&amp; vec)", "nml::vec3 nml::normalize(const nml::vec3&amp; vec)", "nml::vec4 nml::normalize(const nml::vec4&amp; vec)", "nml::mat2 operator/(nml::mat2 lhs, const float rhs)", "nml::mat3 operator/(nml::mat3 lhs, const float rhs)", "nml::mat4 operator/(nml::mat4 lhs, const float rhs)", "nml::quat operator/(nml::quat lhs, const float rhs)", "nml::vec2 operator/(nml::vec2 lhs, const float rhs)", "nml::vec3 operator/(nml::vec3 lhs, const float rhs)", "nml::vec4 operator/(nml::vec4 lhs, const float rhs)", "bool operator==(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator==(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator==(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator==(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator==(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator==(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator==(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "bool operator!=(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator!=(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator!=(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator!=(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator!=(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator!=(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator!=(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator-(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator+(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(float lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator*(float lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator*(float lhs, const nml::mat4&amp; rhs)", "nml::quat operator*(float lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(float lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator*(float lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator*(float lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(nml::mat2 lhs, const float rhs)", "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2&amp; rhs)", "nml::mat3 operator*(nml::mat3 lhs, const float rhs)", "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3&amp; rhs)", "nml::mat4 operator*(nml::mat4 lhs, const float rhs)", "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4&amp; rhs)", "nml::quat operator*(nml::quat lhs, const float rhs)", "nml::quat operator*(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(nml::vec2 lhs, const float rhs)", "nml::vec3 operator*(nml::vec3 lhs, const float rhs)", "nml::vec4 operator*(nml::vec4 lhs, const float rhs)", "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::vec3 nml::quatToEulerAngles(const nml::quat&amp; qua)", "nml::mat4 nml::quatToRotationMatrix(const nml::quat&amp; qua)", "nml::vec2 nml::reflect(const nml::vec2&amp; i, const nml::vec2&amp; n)", "nml::vec3 nml::reflect(const nml::vec3&amp; i, const nml::vec3&amp; n)", "nml::vec4 nml::reflect(const nml::vec4&amp; i, const nml::vec4&amp; n)", "nml::vec2 nml::refract(const nml::vec2&amp; i, const nml::vec2&amp; n, float ior)", "nml::vec3 nml::refract(const nml::vec3&amp; i, const nml::vec3&amp; n, float ior)", "nml::vec4 nml::refract(const nml::vec4&amp; i, const nml::vec4&amp; n, float ior)", "nml::mat3 rotate(const float angle)", "nml::mat4 rotate(const float angle, const nml::vec3&amp; axis)", "nml::vec3 nml::rotationMatrixToEulerAngles(const nml::mat4&amp; mat)", "nml::mat3 scale(const nml::vec2&amp; scaling)", "nml::mat4 scale(const nml::vec3&amp; scaling)", "quat nml::slerp(const quat&amp; a, const quat&amp; b, const float interpolationValue)", "std::string nml::to_string(const nml::mat2&amp; vec)", "std::string nml::to_string(const nml::mat3&amp; vec)", "std::string nml::to_string(const nml::mat4&amp; vec)", "std::string nml::to_string(const nml::quat&amp; vec)", "std::string nml::to_string(const nml::vec2&amp; vec)", "std::string nml::to_string(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::vec4&amp; vec)", "float nml::toDeg(const float radians)", "float nml::toRad(const float degrees)", "nml::mat3 translate(const nml::vec2&amp; translation)", "nml::mat4 translate(const nml::vec3&amp; translation)", "nml::mat2 transpose(const nml::mat2&amp; mat)", "nml::mat3 transpose(const nml::mat3&amp; mat)", "nml::mat4 transpose(const nml::mat4&amp; mat)", "Other", "Quaternion", "quat", "quat: quat()", "quat: quat(float _a, float _b, float _c, float _d)", "quat: quat(const float* _ptr)", "quat: float* data()", "quat: nml::quat nml::quat::identity()", "quat: float length()", "quat: float&amp; operator[](size_t index)", "quat: const float operator[](size_t index) const", "quat: nml::quat&amp; operator/=(const float other)", "quat: nml::quat operator-()", "quat: nml::quat&amp; operator-=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator+=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator*=(const float other)", "quat: nml::quat&amp; operator*=(const nml::quat&amp; other)", "Vector", "vec2", "vec2: vec2()", "vec2: vec2(float _value)", "vec2: vec2(float _x, float _y)", "vec2: vec2(const float* _ptr)", "vec2: vec2(nml::vec3 _xyz)", "vec2: vec2(nml::vec4 _xyzw)", "vec2: float* data()", "vec2: float length()", "vec2: float&amp; operator[](size_t index)", "vec2: const float operator[](size_t index) const", "vec2: nml::vec2&amp; operator/=(const float other)", "vec2: nml::vec2 operator-()", "vec2: nml::vec2&amp; operator-=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator+=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator*=(const float other)", "vec3", "vec3: vec3()", "vec3: vec3(float _value)", "vec3: vec3(float _x, float _y, float _z)", "vec3: vec3(float _x, nml::vec2 _yz)", "vec3: vec3(const float* _ptr)", "vec3: vec3(nml::vec2 _xy, float _z)", "vec3: vec3(nml::vec4 _xyzw)", "vec3: float* data()", "vec3: float length()", "vec3: float&amp; operator[](size_t index)", "vec3: const float operator[](size_t index) const", "vec3: nml::vec3&amp; operator/=(const float other)", "vec3: nml::vec3 operator-()", "vec3: nml::vec3&amp; operator-=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator+=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator*=(const float other)", "vec4", "vec4: vec4()", "vec4: vec4(float _value)", "vec4: vec4(float _x, float _y, float _z, float _w)", "vec4: vec4(float _x, float _y, nml::vec2 _zw)", "vec4: vec4(float _x, nml::vec2 _yz, float _w)", "vec4: vec4(float _x, nml::vec3 _yzw)", "vec4: vec4(const float* _ptr)", "vec4: vec4(nml::vec2 _xy, float _z, float _w)", "vec4: vec4(nml::vec2 _xy, nml::vec2 _zw)", "vec4: vec4(nml::vec3 _xyz, float _w)", "vec4: float* data()", "vec4: float length()", "vec4: float&amp; operator[](size_t index)", "vec4: const float operator[](size_t index) const", "vec4: nml::vec4&amp; operator/=(const float other)", "vec4: nml::vec4 operator-()", "vec4: nml::vec4&amp; operator-=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator+=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator*=(const float other)"], "terms": {"i": [0, 1, 4, 15, 17, 18, 19, 20, 21, 22, 23, 24, 38, 40, 41, 42, 43, 44, 45, 46, 47, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 163, 164, 165, 166, 167, 172, 176, 177, 178, 179, 180, 181, 182, 185, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 209, 210, 211, 212, 213, 214, 215, 216, 217, 226, 227, 228, 229, 230, 231, 232, 233, 234, 246, 247, 248, 249, 250, 251, 252, 253], "avail": [0, 1], "github": [0, 1], "git": 0, "clone": 0, "http": 0, "com": 0, "team": 0, "nutshel": 0, "can": [0, 200], "built": 0, "static": [0, 2, 3, 184], "librari": 0, "name": [0, 4, 24, 47, 183, 185, 201, 217, 234], "replac": 0, "path_to_nml": 0, "path": 0, "sourc": 0, "code": 0, "directori": 0, "add_subdirectori": 0, "target_include_directori": 0, "project_nam": 0, "public": 0, "target_link_librari": 0, "In": 0, "sampl": 0, "It": 0, "possibl": 0, "includ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "entir": 0, "one": 0, "h": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "Or": 0, "onli": 0, "need": 0, "header": [0, 4, 24, 47, 183, 185, 201, 217, 234], "vec2": [0, 1, 2, 4, 17, 18, 24, 200, 217, 234], "vec3": [0, 1, 2, 24, 40, 41, 47, 185, 200, 201, 234], "mat4": [0, 1, 2, 3, 4, 24, 217], "c": [1, 18, 41, 71, 76, 78, 79, 80, 81, 82, 83, 86, 87, 91, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 139, 141, 142, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 161, 162, 164, 172, 185, 189, 191, 192, 193, 194, 196, 197, 198, 199, 211, 228, 248], "comput": 1, "graphic": 1, "get": 1, "start": 1, "add": [1, 4, 21, 24, 44, 47, 74, 185, 197, 201, 215, 217, 232, 234, 252], "cmake": 1, "project": [1, 47, 151, 152, 153, 154], "us": [1, 200], "vector": [1, 2, 24, 47, 79, 157, 158, 159, 160, 161, 162, 164, 178, 179, 201, 202, 203, 204, 205, 206, 207, 208, 209, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], "vec4": [1, 2, 47, 70, 71, 200, 201, 217], "matrix": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 79, 85, 86, 87, 89, 90, 151, 152, 153, 154, 156, 163, 164, 165, 166, 167, 178, 179, 217], "mat2": [1, 2, 3], "mat3": [1, 2, 3, 4], "quaternion": [1, 2, 47, 77, 79, 84, 155, 156, 185, 186, 187, 188, 189, 190, 191, 217], "quat": [1, 2, 47, 184, 217], "other": [1, 2, 4, 24, 47, 88, 176, 177, 185, 201, 217, 234], "namespac": [1, 2, 3, 184, 200], "function": [1, 2, 3, 85, 86, 87, 157, 158, 159, 160, 161, 162, 164, 184, 200], "index": [1, 4, 24, 47, 185, 201, 217, 234], "modul": 1, "search": 1, "page": 1, "class": [2, 3, 184, 200], "variabl": [2, 3, 184, 200], "constructor": [2, 3, 184, 200], "oper": [2, 3, 184, 200], "file": [4, 24, 47, 183, 185, 201, 217, 234], "column": [4, 24, 47, 180, 181, 182], "major": [4, 24, 47], "2": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 179, 180, 181, 182, 185, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "row": [4, 24, 47, 180, 181, 182], "begin": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 179, 180, 181, 182, 201, 202, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253], "bmatrix": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 179, 180, 181, 182, 201, 202, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253], "x": [4, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 178, 179, 180, 181, 182, 201, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "y": [4, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 178, 179, 180, 181, 182, 201, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 179, 180, 181, 182, 201, 202, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253], "type": [4, 24, 47, 185, 201, 217, 234], "descript": [4, 24, 47, 183, 185, 201, 217, 234], "nml": [4, 5, 6, 7, 9, 14, 15, 24, 25, 26, 27, 31, 37, 38, 47, 48, 49, 50, 58, 67, 68, 185, 186, 187, 188, 189, 191, 192, 193, 201, 202, 203, 204, 205, 208, 209, 210, 211, 217, 218, 219, 220, 222, 225, 226, 227, 228, 234, 235, 236, 237, 241, 245, 246, 247, 248], "The": [4, 15, 19, 20, 21, 22, 23, 24, 38, 42, 43, 44, 45, 46, 47, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180, 181, 182, 185, 191, 194, 195, 196, 197, 198, 199, 201, 209, 212, 213, 214, 215, 216, 217, 226, 229, 230, 231, 232, 233, 234, 246, 249, 250, 251, 252, 253], "first": [4, 24, 47, 185, 201, 217, 234], "second": [4, 24, 47, 185, 201, 217, 234], "construct": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 185, 186, 187, 188, 201, 202, 203, 204, 205, 206, 207, 217, 218, 219, 220, 221, 222, 223, 224, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "float": [4, 18, 24, 41, 47, 71, 183, 185, 201, 217, 234], "_valu": [4, 24, 47, 201, 217, 234], "_xx": [4, 24, 47], "_xy": [4, 24, 47, 217, 234], "_yx": [4, 24, 33, 47], "_yi": [4, 24, 47], "_y": [4, 24, 47, 201, 217, 234], "_x": [4, 24, 47, 201, 217, 234], "const": [4, 24, 47, 183, 185, 201, 217, 234], "_ptr": [4, 24, 47, 185, 201, 217, 234], "from": [4, 9, 20, 24, 31, 43, 47, 58, 73, 84, 155, 156, 165, 185, 188, 196, 201, 205, 214, 217, 222, 231, 234, 241, 251], "pointer": [4, 9, 14, 24, 31, 37, 47, 58, 67, 185, 188, 189, 201, 205, 208, 217, 222, 225, 234, 241, 245], "_mat": [4, 24], "current": [4, 19, 20, 21, 22, 23, 24, 42, 43, 44, 45, 46, 47, 72, 73, 74, 75, 76, 185, 194, 195, 196, 197, 198, 199, 201, 212, 213, 214, 215, 216, 217, 229, 230, 231, 232, 233, 234, 249, 250, 251, 252, 253], "substract": [4, 20, 24, 43, 47, 73, 185, 196, 201, 214, 217, 231, 234, 251], "multipli": [4, 22, 23, 24, 45, 46, 47, 75, 76, 185, 198, 199, 201, 216, 217, 233, 234, 253], "scalar": [4, 19, 22, 24, 42, 45, 47, 72, 75, 88, 95, 96, 97, 98, 99, 100, 101, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 146, 148, 149, 150, 183, 185, 194, 198, 199, 200, 201, 212, 216, 217, 229, 233, 234, 249, 253], "divid": [4, 19, 24, 42, 47, 72, 185, 194, 201, 212, 217, 229, 234, 249], "size_t": [4, 24, 47, 185, 201, 217, 234], "return": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "refer": [4, 17, 18, 24, 40, 41, 47, 70, 71, 185, 192, 201, 210, 217, 227, 234, 247], "1": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "els": [4, 17, 18, 24, 40, 41, 47, 70, 71, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 185, 192, 193, 201, 210, 211, 217, 227, 228, 234, 247, 248], "throw": [4, 17, 18, 24, 40, 41, 47, 70, 71, 185, 192, 193, 201, 210, 211, 217, 227, 228, 234, 247, 248], "an": [4, 17, 18, 24, 40, 41, 47, 70, 71, 88, 168, 176, 177, 183, 185, 192, 193, 201, 210, 211, 217, 227, 228, 234, 247, 248], "except": [4, 17, 18, 24, 40, 41, 47, 70, 71, 185, 192, 193, 201, 210, 211, 217, 227, 228, 234, 247, 248], "det": [4, 24, 47, 85, 86, 87], "determin": [4, 15, 24, 38, 47, 68, 85, 86, 87], "data": [4, 9, 24, 31, 47, 58, 185, 188, 201, 205, 217, 222, 234, 241], "": [4, 14, 24, 37, 47, 67, 185, 189, 201, 208, 217, 225, 234, 245], "element": [4, 14, 24, 37, 47, 67, 185, 189, 201, 208, 217, 225, 234, 245], "ident": [4, 24, 47, 79, 102, 103, 104, 105, 106, 107, 108, 185, 201, 217, 234], "lh": [4, 24, 47, 185, 201, 217, 234], "rh": [4, 24, 47, 185, 201, 217, 234], "sum": [4, 21, 24, 44, 47, 74, 123, 124, 125, 126, 127, 128, 129, 185, 197, 201, 215, 217, 232, 234, 252], "between": [4, 19, 20, 21, 22, 23, 24, 42, 43, 44, 45, 46, 47, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 88, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 168, 183, 185, 194, 196, 197, 198, 199, 201, 212, 214, 215, 216, 217, 229, 231, 232, 233, 234, 249, 251, 252, 253], "two": [4, 14, 20, 21, 23, 24, 37, 43, 44, 46, 47, 67, 73, 74, 76, 78, 80, 81, 82, 83, 88, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 138, 141, 144, 147, 168, 183, 185, 189, 196, 197, 201, 214, 215, 217, 225, 231, 232, 234, 245, 251, 252], "differ": [4, 20, 24, 43, 47, 73, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 185, 196, 201, 214, 217, 231, 234, 251], "product": [4, 22, 23, 24, 45, 46, 47, 75, 76, 78, 80, 81, 82, 83, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 185, 198, 199, 201, 216, 217, 233, 234, 253], "quotient": [4, 19, 24, 42, 47, 72, 95, 96, 97, 98, 99, 100, 101, 185, 194, 201, 212, 217, 229, 234, 249], "bool": [4, 24, 47, 185, 201, 217, 234], "true": [4, 24, 47, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 185, 201, 217, 234], "ar": [4, 24, 47, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 180, 181, 182, 185, 200, 201, 217, 234], "fals": [4, 24, 47, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 185, 201, 217, 234], "transpos": [4, 24, 47], "mat": [4, 24, 47, 217], "where": [4, 24, 47, 180, 181, 182], "invers": [4, 23, 24, 46, 47, 76, 138, 141, 144], "std": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "string": [4, 24, 47, 185, 201, 217, 234], "to_str": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 178, 179, 180, 181, 182, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 249, 250, 251, 252, 253], "under": [4, 24, 47, 169, 170, 171, 172, 173, 174, 175, 185, 201, 217, 234], "format": [4, 24, 47, 169, 170, 171, 172, 173, 174, 175, 185, 201, 217, 234], "iostream": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "main": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "m": [5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 87, 89, 90, 144, 151, 152, 153, 154, 156, 163, 164, 165, 166, 167, 169, 170, 171, 178, 179], "cout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "endl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "result": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "000000": [5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 85, 86, 87, 89, 90, 95, 96, 97, 99, 100, 101, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 186, 187, 188, 190, 192, 196, 197, 198, 202, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 249, 250, 251, 252, 253], "0f": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "3": [7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 163, 164, 168, 169, 170, 171, 174, 175, 177, 179, 180, 181, 182, 185, 188, 189, 192, 193, 197, 206, 207, 210, 214, 215, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "4": [7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 78, 79, 85, 86, 87, 89, 90, 94, 95, 96, 97, 101, 102, 103, 104, 108, 109, 110, 111, 114, 115, 116, 117, 118, 123, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 150, 158, 159, 161, 162, 168, 169, 170, 171, 175, 180, 181, 182, 185, 188, 192, 193, 207, 214, 215, 216, 224, 227, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "arrai": [9, 31, 58, 188, 205, 222, 241], "5": [10, 11, 17, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 86, 87, 89, 90, 94, 96, 97, 103, 104, 109, 110, 111, 115, 116, 117, 118, 120, 121, 122, 128, 129, 131, 132, 140, 141, 142, 143, 145, 170, 171, 181, 182, 189, 192, 193, 231, 232, 246, 247, 251, 252], "6": [10, 11, 17, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 86, 87, 96, 97, 103, 104, 110, 111, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 143, 148, 149, 150, 170, 171, 181, 182, 214, 215, 231, 232, 233, 251, 252, 253], "7": [10, 11, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 86, 87, 96, 97, 103, 104, 110, 111, 117, 118, 121, 122, 128, 129, 131, 132, 140, 141, 142, 143, 170, 171, 181, 182], "8": [10, 11, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 86, 87, 96, 97, 103, 104, 110, 111, 117, 118, 122, 123, 124, 125, 131, 132, 140, 141, 143, 170, 171, 181, 182, 231, 251, 252, 253], "9": [10, 11, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 86, 87, 96, 97, 103, 104, 110, 111, 117, 118, 130, 131, 132, 135, 136, 137, 140, 143, 149, 150, 153, 154, 170, 171, 181, 182, 232, 252], "b": [10, 11, 18, 20, 21, 23, 32, 41, 43, 44, 46, 71, 73, 74, 76, 77, 79, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 164, 172, 180, 181, 182, 183, 185, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 206, 207, 209, 211, 214, 215, 217, 224, 226, 228, 231, 232, 234, 246, 248, 251, 252], "10": [11, 20, 21, 32, 38, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 86, 87, 97, 104, 111, 118, 123, 124, 125, 132, 141, 143, 151, 152, 165, 171, 182, 251], "11": [11, 32, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 87, 97, 104, 111, 118, 132, 143, 171, 182], "12": [11, 32, 40, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 87, 97, 104, 110, 111, 118, 124, 125, 128, 129, 130, 131, 132, 136, 137, 140, 143, 150, 171, 182], "13": [11, 32, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 87, 97, 104, 111, 118, 132, 143, 171, 182], "14": [11, 32, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 87, 97, 104, 111, 118, 124, 125, 132, 143, 171, 182, 252], "15": [11, 32, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 87, 97, 104, 111, 118, 131, 132, 140, 143, 171, 182], "16": [11, 32, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 87, 97, 104, 111, 118, 123, 124, 125, 132, 143, 153, 154, 171, 182], "access": [14, 37, 67, 189, 208, 225, 245], "char": [14, 37, 67, 189, 208, 225, 245], "sizeof": [14, 37, 67, 189, 208, 225, 245], "take": [14, 37, 67, 189, 208, 225, 245], "address": [14, 37, 67, 189, 208, 225, 245], "size": [14, 37, 67, 189, 208, 225, 245], "three": [14, 37, 67, 189, 245], "calcul": [15, 19, 20, 21, 22, 23, 38, 42, 43, 44, 45, 46, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180, 181, 182, 191, 194, 195, 196, 197, 198, 199, 209, 212, 213, 214, 215, 216, 226, 229, 230, 231, 232, 233, 246, 249, 250, 251, 252, 253], "thi": [15, 19, 20, 21, 22, 23, 38, 42, 43, 44, 45, 46, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180, 181, 182, 191, 194, 195, 196, 197, 198, 199, 209, 212, 213, 214, 215, 216, 226, 229, 230, 231, 232, 233, 246, 249, 250, 251, 252, 253], "wai": [15, 19, 20, 21, 22, 23, 38, 42, 43, 44, 45, 46, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 176, 177, 178, 179, 180, 181, 182, 191, 194, 195, 196, 197, 198, 199, 209, 212, 213, 214, 215, 216, 226, 229, 230, 231, 232, 233, 246, 249, 250, 251, 252, 253], "error": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "termin": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "call": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "after": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "instanc": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "out_of_rang": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "what": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "out": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "rang": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "abort": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "d": [18, 41, 71, 76, 79, 80, 86, 87, 91, 98, 105, 112, 119, 126, 133, 144, 146, 147, 155, 156, 164, 172, 185, 189, 191, 192, 193, 194, 196, 197, 198, 199, 228, 248], "frac": [19, 42, 72, 79, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 151, 152, 153, 154, 176, 177, 194, 212, 229, 249], "500000": [19, 42, 72, 84, 85, 87, 95, 96, 97, 98, 99, 100, 101, 117, 118, 121, 122, 151, 152, 161, 162, 168, 194, 195, 212, 229, 249], "z": [24, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 87, 89, 90, 93, 94, 96, 97, 100, 101, 103, 104, 107, 108, 110, 111, 114, 115, 117, 118, 121, 122, 124, 125, 128, 129, 131, 132, 135, 136, 140, 141, 142, 143, 144, 145, 149, 150, 158, 159, 161, 162, 164, 165, 167, 170, 171, 174, 175, 179, 181, 182, 217, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "third": [24, 47, 185, 217, 234], "_xz": [24, 47], "_yz": [24, 47, 217, 234], "_zx": [24, 47], "_zy": [24, 47], "_zz": [24, 47], "_z": [24, 47, 217, 234], "3ident": 24, "translat": [24, 47], "2d": [24, 163, 166, 178], "accord": [24, 47, 163, 164, 166, 167, 178, 179], "rotat": [24, 47, 156, 165, 217], "angl": [24, 47, 84, 155, 165, 176, 177, 183, 185, 200, 217], "radian": [24, 47, 155, 163, 164, 165, 177, 183, 185, 217], "scale": [24, 47], "factor": [24, 47, 166, 167], "four": [37, 67], "five": [37, 67], "six": [37, 67], "seven": [37, 67], "eight": [37, 67], "small": [38, 76, 87, 102, 103, 104, 109, 110, 111, 144, 155], "25": [40, 70, 145, 189, 193], "18": [43, 44, 45, 73, 74, 75, 124, 125, 131, 132, 140, 143], "20": [43, 44, 70, 73, 74, 75, 125, 165], "tini": [46, 141], "w": [47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 83, 87, 94, 97, 101, 104, 108, 111, 115, 118, 122, 125, 129, 132, 136, 143, 144, 145, 150, 159, 162, 171, 175, 182, 234, 245, 246, 247, 248, 249, 250, 251, 252, 253], "fourth": [47, 185, 234], "_xw": 47, "_yw": 47, "_zw": [47, 234], "_wx": 47, "_wy": 47, "_wz": 47, "_ww": 47, "_w": [47, 234], "3d": [47, 156, 164, 165, 167, 179, 217], "axi": [47, 200], "lookatlh": 47, "up": 47, "left": [47, 79, 89, 91, 92, 93, 94, 153], "hand": [47, 89, 90, 151, 152, 153, 154], "look": [47, 89, 90], "view": [47, 89, 90], "lookatrh": 47, "right": [47, 79, 89, 90, 91, 92, 93, 94, 154], "ortholh": 47, "bottom": 47, "top": 47, "far": 47, "orthograph": [47, 151, 152], "orthorh": 47, "perspectivelh": 47, "fovi": 47, "aspectratio": 47, "perspect": [47, 153, 154], "perspectiverh": 47, "void": 47, "decomposetransform": 47, "transform": 47, "decompos": [47, 79], "quattorotationmatrix": 47, "qua": [47, 185, 217], "nine": 67, "ten": 67, "eleven": 67, "twelv": 67, "thirteen": 67, "fourteen": 67, "fifteen": 67, "scriptsiz": 68, "32": [68, 73, 74, 75, 124, 125], "64": [68, 124, 125], "480": 68, "250": 70, "e": [71, 76, 86, 87, 144, 156, 164, 193, 248], "22": [73, 74, 75, 125], "24": [73, 74, 75, 125, 131, 132, 140, 143], "26": [73, 74, 75, 124, 125], "28": [73, 74, 75, 125, 145], "30": [73, 74, 75, 125, 132, 143, 165], "34": [73, 74], "17": [73, 74, 142, 145], "f": [76, 86, 87, 144, 156, 164], "j": [76, 84, 87, 91, 98, 119, 126, 133, 144, 146, 147, 172, 185, 188, 194, 196, 197, 198, 199], "n": [76, 87, 144, 201, 217, 234], "g": [76, 86, 87, 144, 156, 164], "k": [76, 84, 87, 91, 98, 119, 126, 133, 144, 146, 147, 160, 161, 162, 172, 185, 188, 194, 196, 197, 198, 199], "o": [76, 87, 144], "l": [76, 87, 144], "p": [76, 87, 144], "conj": 77, "bi": [77, 91, 98, 105, 112, 119, 126, 133, 146, 147, 185, 194, 195, 196, 197, 198, 199], "cj": [77, 91, 98, 105, 112, 119, 126, 133, 146, 147, 185, 194, 195, 196, 197, 198, 199], "dk": [77, 91, 98, 105, 112, 119, 126, 133, 146, 147, 185, 194, 195, 196, 197, 198, 199], "25f": [77, 89, 90, 91, 98, 105, 112, 118, 119, 126, 133, 139, 142, 145, 146, 147, 172, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199], "5f": [77, 88, 89, 90, 91, 98, 105, 112, 117, 118, 119, 121, 122, 126, 133, 139, 142, 145, 146, 147, 160, 161, 162, 168, 172, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199], "75f": [77, 91, 98, 105, 112, 119, 126, 133, 146, 147, 172, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199], "250000i": [77, 172, 187, 188], "500000j": [77, 84, 119, 126, 133, 146, 168, 172, 187, 188], "750000k": [77, 172, 187, 188], "dot": [78, 185, 201, 217, 234], "time": [78, 89, 90], "decomposit": 79, "sqrt": [79, 160, 161, 162, 165, 191, 209, 226, 246], "000000i": [79, 119, 186, 190, 192], "000000j": [79, 186, 190, 192, 198], "000000k": [79, 186, 190, 192], "cdot": [80, 81, 82, 83, 89, 90, 157, 158, 159, 160, 161, 162], "euler": [84, 155, 165, 185, 200, 217], "convers": [84, 155, 156, 165], "co": [84, 163, 164], "sin": [84, 163, 164], "v": [84, 155, 165, 173, 174, 175, 202, 203, 204, 205, 208, 210, 211, 212, 213, 216, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253], "570796f": 84, "000000f": 84, "q": [84, 155, 156, 172, 186, 187, 188, 189, 190, 192, 193, 194, 195, 198], "500000i": [84, 126, 168, 198], "500000k": [84, 168, 198], "doe": [85, 86, 87, 157, 158, 159, 160, 161, 162, 164], "check": [85, 86, 87], "invert": [85, 86, 87], "null": [85, 86, 87], "inva": [85, 86, 87], "invb": [85, 86, 87], "undefin": [85, 86, 87], "behaviour": [85, 86, 87], "inf": [85, 86], "t": [86, 87, 180, 181, 182], "adj": [86, 87], "666667": 86, "333333": 86, "nan": 87, "linear": [88, 168, 183, 185], "interpol": [88, 168, 183, 185], "valu": [88, 168, 183, 185, 193, 201, 211, 217, 228, 234, 248], "realup": [89, 90], "forward": [89, 90], "norm": [89, 90, 91, 92, 94], "707107": [89, 90], "313677": [89, 90], "633724": [89, 90], "896221": [89, 90], "443607": [89, 90], "949747": [89, 90], "061309": [89, 90], "598269": [89, 90], "same": [91, 92, 93, 94, 185, 201, 217, 234], "direct": [91, 92, 93, 94, 157, 158, 159, 160, 161, 162, 185, 201, 217, 234], "length": [91, 92, 93, 94, 185, 201, 217, 234], "36931": [91, 191], "730297": [91, 94], "182574i": 91, "365148j": 91, "547723k": 91, "23607": [92, 209], "447214": 92, "894427": 92, "74166": [93, 226], "267261": 93, "534522": 93, "801784": 93, "47723": [94, 246], "182574": 94, "365148": 94, "547723": 94, "125000i": [98, 194, 195], "250000j": [98, 194, 195], "375000k": [98, 194, 195], "equal": [102, 103, 104, 105, 106, 107, 108], "inequ": [109, 110, 111, 112, 113, 114, 115], "neq": [109, 110, 111, 112, 113, 114, 115], "99f": 118, "2f": 118, "750000": [118, 139, 145], "010000": 118, "800000": 118, "250000k": [119, 126, 133, 146], "128": [124, 125], "256": [124, 125], "44": [124, 125], "78": [124, 125], "144": [124, 125], "274": [124, 125], "512": 125, "1024": 125, "2048": 125, "4096": 125, "8192": 125, "16384": 125, "32768": 125, "532": 125, "1046": 125, "2072": 125, "4122": 125, "8220": 125, "16414": 125, "32800": 125, "19": [129, 165], "21": [131, 132, 140, 143], "27": [131, 132, 140, 143], "33": [132, 143], "36": [132, 143, 145], "39": [132, 143], "42": [132, 143], "45": [132, 143], "48": [132, 143], "750000i": [133, 146], "875000": 139, "250000": 142, "187500": [142, 147, 199], "812500": 145, "562500": 145, "82f": [147, 196, 197, 199], "24f": [147, 196, 197, 199], "65f": [147, 196, 197, 199], "465000i": [147, 199], "692500j": [147, 199], "800000k": [147, 199], "100000": [151, 152], "050000": [151, 152], "tan": [153, 154], "785f": [153, 154], "03f": [153, 154], "100": [153, 154], "358760": [153, 154], "415574": [153, 154], "000300": [153, 154], "030009": [153, 154], "repres": [155, 165, 200, 217], "atan2": [155, 165], "asin": 155, "normal": [155, 156, 157, 158, 159, 160, 161, 162, 164, 185, 191, 201, 209, 217, 226, 234, 246], "570796": 155, "incid": [157, 158, 159, 160, 161, 162, 201, 217, 234], "should": [157, 158, 159, 160, 161, 162, 164, 200, 201, 217, 234], "ratio": [160, 161, 162, 201, 217, 234], "indic": [160, 161, 162, 201, 217, 234], "case": [160, 161, 162], "text": [160, 161, 162], "otherwis": [160, 161, 162], "322876": [160, 161, 162], "pi": [163, 164, 176, 177], "14159265358979323846f": [163, 164], "rotationangl": [163, 164], "90": [163, 164], "torad": [165, 183], "999998": 165, "spheric": [168, 185], "degre": [176, 183], "180": [176, 177], "14159": 177, "translationvector": [178, 179], "variou": 183, "todeg": 183, "lerp": 183, "interpolationvalu": [183, 185], "_a": 185, "_b": 185, "_c": 185, "_d": 185, "neg": [185, 195, 201, 213, 217, 230, 234, 250], "conjug": 185, "slerp": 185, "euleranglestoquat": 185, "vec": [185, 201, 217, 234], "0i": [186, 190], "0j": [186, 190], "0k": [186, 190], "_bi": 187, "_cj": 187, "_dk": 187, "75": [189, 193], "570000i": 196, "260000j": 196, "100000k": 196, "070000i": 197, "740000j": 197, "400000k": 197, "object": 200, "multipl": 200, "point": 200, "etc": 200, "accordingli": 200, "_xyz": [201, 234], "_xyzw": [201, 217], "reflect": [201, 217, 234], "refract": [201, 217, 234], "ior": [201, 217, 234], "cross": 217, "quattoeulerangl": 217, "rotationmatrixtoeulerangl": 217, "_yzw": 234, "ec4": 251}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"get": 0, "start": 0, "nml": [0, 1, 2, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 190, 194, 195, 196, 197, 198, 199, 206, 207, 212, 213, 214, 215, 216, 221, 223, 224, 229, 230, 231, 232, 233, 238, 239, 240, 242, 243, 244, 249, 250, 251, 252, 253], "add": 0, "cmake": 0, "project": 0, "us": 0, "nutshel": 1, "mathemat": 1, "librari": 1, "tabl": 1, "content": 1, "indic": 1, "matrix": 3, "mat2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 85, 95, 102, 109, 116, 123, 130, 137, 138, 139, 169, 180], "class": [4, 24, 47, 185, 201, 217, 234], "variabl": [4, 24, 47, 185, 201, 217, 234], "function": [4, 24, 47, 183, 185, 201, 217, 234], "constructor": [4, 24, 47, 185, 201, 217, 234], "oper": [4, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 70, 71, 72, 73, 74, 75, 76, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 185, 192, 193, 194, 195, 196, 197, 198, 199, 201, 210, 211, 212, 213, 214, 215, 216, 217, 227, 228, 229, 230, 231, 232, 233, 234, 247, 248, 249, 250, 251, 252, 253], "static": [4, 24, 47, 185], "namespac": [4, 24, 47, 183, 185, 201, 217, 234], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "float": [6, 7, 8, 9, 12, 14, 15, 19, 22, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 42, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 72, 75, 80, 81, 82, 83, 88, 95, 96, 97, 98, 99, 100, 101, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 163, 164, 168, 176, 177, 187, 188, 189, 191, 192, 193, 194, 198, 203, 204, 205, 208, 209, 210, 211, 212, 216, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 253], "_valu": [6, 26, 49, 203, 219, 236], "_xx": [7, 8, 27, 28, 29, 30, 50, 51, 52, 53, 54, 55, 56, 57], "_xy": [7, 8, 27, 28, 29, 30, 50, 51, 52, 53, 54, 55, 56, 57, 223, 242, 243], "_yx": [7, 12, 27, 28, 34, 50, 51, 52, 53, 59, 60, 61, 62], "_yi": [7, 12, 27, 28, 33, 34, 50, 51, 52, 53, 59, 60, 61, 62], "vec2": [8, 12, 13, 81, 92, 99, 106, 113, 120, 127, 134, 139, 148, 157, 160, 166, 173, 178, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 223, 238, 239, 242, 243], "_y": [8, 13, 29, 30, 35, 36, 54, 55, 56, 57, 63, 64, 65, 66, 204, 220, 237, 238], "const": [9, 15, 18, 19, 20, 21, 22, 23, 31, 38, 41, 42, 43, 44, 45, 46, 58, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 188, 193, 194, 196, 197, 198, 199, 205, 211, 212, 214, 215, 216, 222, 228, 229, 231, 232, 233, 241, 248, 249, 251, 252, 253], "_ptr": [9, 31, 58, 188, 205, 222, 241], "mat3": [10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 86, 96, 103, 110, 117, 124, 131, 140, 141, 142, 163, 166, 170, 178, 181], "_mat": [10, 11, 32], "mat4": [11, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 87, 89, 90, 97, 104, 111, 118, 125, 132, 143, 144, 145, 151, 152, 153, 154, 156, 164, 165, 167, 171, 179, 182], "_x": [12, 13, 33, 34, 35, 36, 59, 60, 61, 62, 63, 64, 65, 66, 204, 220, 221, 237, 238, 239, 240], "data": [14, 37, 67, 189, 208, 225, 245], "det": [15, 38, 68], "ident": [16, 39, 69, 190], "size_t": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "index": [17, 18, 40, 41, 70, 71, 192, 193, 210, 211, 227, 228, 247, 248], "other": [19, 20, 21, 22, 23, 42, 43, 44, 45, 46, 72, 73, 74, 75, 76, 183, 194, 196, 197, 198, 199, 212, 214, 215, 216, 229, 231, 232, 233, 249, 251, 252, 253], "_xz": [27, 28, 29, 30, 50, 51, 52, 53, 54, 55, 56, 57], "_yz": [27, 28, 33, 34, 50, 51, 52, 53, 59, 60, 61, 62, 221, 239], "_zx": [27, 29, 33, 35, 50, 51, 54, 55, 59, 60, 63, 64], "_zy": [27, 29, 33, 35, 50, 51, 54, 55, 59, 60, 63, 64], "_zz": [27, 29, 33, 35, 50, 51, 54, 55, 59, 60, 63, 64], "vec3": [28, 29, 30, 33, 34, 35, 36, 78, 79, 82, 84, 89, 90, 93, 100, 107, 114, 121, 128, 135, 142, 149, 155, 158, 161, 164, 165, 167, 174, 179, 206, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 240, 244], "_z": [28, 30, 34, 36, 52, 53, 56, 57, 61, 62, 65, 66, 220, 223, 237, 242], "_xw": [50, 51, 52, 53, 54, 55, 56, 57], "_yw": [50, 51, 52, 53, 59, 60, 61, 62], "_zw": [50, 51, 54, 55, 59, 60, 63, 64, 238, 243], "_wx": [50, 52, 54, 56, 59, 61, 63, 65], "_wy": [50, 52, 54, 56, 59, 61, 63, 65], "_wz": [50, 52, 54, 56, 59, 61, 63, 65], "_ww": [50, 52, 54, 56, 59, 61, 63, 65], "vec4": [51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 83, 94, 101, 108, 115, 122, 129, 136, 145, 150, 159, 162, 175, 207, 224, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "_w": [51, 53, 55, 57, 60, 62, 64, 66, 237, 239, 242, 244], "quat": [77, 79, 80, 84, 91, 98, 105, 112, 119, 126, 133, 146, 147, 155, 156, 168, 172, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], "conjug": 77, "qua": [77, 91, 155, 156], "cross": 78, "b": [78, 80, 81, 82, 83, 88, 168], "void": 79, "decomposetransform": 79, "transform": 79, "translat": [79, 178, 179], "rotat": [79, 163, 164], "scale": [79, 166, 167], "dot": [80, 81, 82, 83], "euleranglestoquat": 84, "vec": [84, 92, 93, 94, 169, 170, 171, 172, 173, 174, 175], "invers": [85, 86, 87], "mat": [85, 86, 87, 165, 180, 181, 182], "lerp": 88, "interpolationvalu": [88, 168], "lookatlh": 89, "from": [89, 90], "up": [89, 90], "lookatrh": 90, "normal": [91, 92, 93, 94], "lh": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "rh": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "bool": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "ortholh": 151, "left": [151, 152], "right": [151, 152], "bottom": [151, 152], "top": [151, 152], "far": [151, 152, 153, 154], "orthorh": 152, "perspectivelh": 153, "fovi": [153, 154], "aspectratio": [153, 154], "perspectiverh": 154, "quattoeulerangl": 155, "quattorotationmatrix": 156, "reflect": [157, 158, 159], "i": [157, 158, 159, 160, 161, 162], "n": [157, 158, 159, 160, 161, 162], "refract": [160, 161, 162], "ior": [160, 161, 162], "angl": [163, 164], "axi": 164, "rotationmatrixtoeulerangl": 165, "slerp": 168, "std": [169, 170, 171, 172, 173, 174, 175], "string": [169, 170, 171, 172, 173, 174, 175], "to_str": [169, 170, 171, 172, 173, 174, 175], "todeg": 176, "radian": 176, "torad": 177, "degre": 177, "transpos": [180, 181, 182], "quaternion": 184, "_a": 187, "_b": 187, "_c": 187, "_d": 187, "length": [191, 209, 226, 246], "vector": 200, "_xyz": [206, 244], "_xyzw": [207, 224], "_yzw": 240}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Getting started": [[0, "getting-started"]], "Get nml": [[0, "get-nml"]], "Add nml to a CMake project": [[0, "add-nml-to-a-cmake-project"]], "Use nml": [[0, "use-nml"]], "nml - Nutshell Mathematics Library": [[1, "nml-nutshell-mathematics-library"]], "Table of Contents": [[1, null]], "Indices and tables": [[1, "indices-and-tables"]], "nml": [[2, "nml"]], "Matrix": [[3, "matrix"]], "mat2": [[4, "mat2"]], "Class variables": [[4, "class-variables"], [24, "class-variables"], [47, "class-variables"], [185, "class-variables"], [201, "class-variables"], [217, "class-variables"], [234, "class-variables"]], "Class functions": [[4, "class-functions"], [24, "class-functions"], [47, "class-functions"], [185, "class-functions"], [201, "class-functions"], [217, "class-functions"], [234, "class-functions"]], "Constructors": [[4, "constructors"], [24, "constructors"], [47, "constructors"], [185, "constructors"], [201, "constructors"], [217, "constructors"], [234, "constructors"]], "Operators": [[4, "operators"], [4, "id1"], [24, "operators"], [24, "id1"], [47, "operators"], [47, "id1"], [185, "operators"], [185, "id1"], [201, "operators"], [201, "id1"], [217, "operators"], [217, "id1"], [234, "operators"], [234, "id1"]], "Functions": [[4, "functions"], [4, "id2"], [24, "functions"], [24, "id2"], [47, "functions"], [47, "id2"], [185, "functions"], [185, "id2"], [201, "functions"], [201, "id2"], [217, "functions"], [217, "id2"], [234, "functions"], [234, "id2"]], "Static Functions": [[4, "static-functions"], [24, "static-functions"], [47, "static-functions"], [185, "static-functions"]], "Namespace functions": [[4, "namespace-functions"], [24, "namespace-functions"], [47, "namespace-functions"], [183, "namespace-functions"], [185, "namespace-functions"], [201, "namespace-functions"], [217, "namespace-functions"], [234, "namespace-functions"]], "mat2: mat2()": [[5, "mat2-mat2"]], "Example": [[5, "example"], [6, "example"], [7, "example"], [8, "example"], [9, "example"], [10, "example"], [11, "example"], [12, "example"], [13, "example"], [14, "example"], [15, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [20, "example"], [21, "example"], [22, "example"], [23, "example"], [25, "example"], [26, "example"], [27, "example"], [28, "example"], [29, "example"], [30, "example"], [31, "example"], [32, "example"], [33, "example"], [34, "example"], [35, "example"], [36, "example"], [37, "example"], [38, "example"], [39, "example"], [40, "example"], [41, "example"], [42, "example"], [43, "example"], [44, "example"], [45, "example"], [46, "example"], [48, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [93, "example"], [94, "example"], [95, "example"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [105, "example"], [106, "example"], [107, "example"], [108, "example"], [109, "example"], [110, "example"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [120, "example"], [121, "example"], [122, "example"], [123, "example"], [124, "example"], [125, "example"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [166, "example"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [175, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [193, "example"], [194, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"], [199, "example"], [202, "example"], [203, "example"], [204, "example"], [205, "example"], [206, "example"], [207, "example"], [208, "example"], [209, "example"], [210, "example"], [211, "example"], [212, "example"], [213, "example"], [214, "example"], [215, "example"], [216, "example"], [218, "example"], [219, "example"], [220, "example"], [221, "example"], [222, "example"], [223, "example"], [224, "example"], [225, "example"], [226, "example"], [227, "example"], [228, "example"], [229, "example"], [230, "example"], [231, "example"], [232, "example"], [233, "example"], [235, "example"], [236, "example"], [237, "example"], [238, "example"], [239, "example"], [240, "example"], [241, "example"], [242, "example"], [243, "example"], [244, "example"], [245, "example"], [246, "example"], [247, "example"], [248, "example"], [249, "example"], [250, "example"], [251, "example"], [252, "example"], [253, "example"]], "mat2: mat2(float _value)": [[6, "mat2-mat2-float-value"]], "mat2: mat2(float _xx, float _xy, float _yx, float _yy)": [[7, "mat2-mat2-float-xx-float-xy-float-yx-float-yy"]], "mat2: mat2(float _xx, float _xy, nml::vec2 _y)": [[8, "mat2-mat2-float-xx-float-xy-nml-vec2-y"]], "mat2: mat2(const float* _ptr)": [[9, "mat2-mat2-const-float-ptr"]], "mat2: mat2(nml::mat3 _mat)": [[10, "mat2-mat2-nml-mat3-mat"]], "mat2: mat2(nml::mat4 _mat)": [[11, "mat2-mat2-nml-mat4-mat"]], "mat2: mat2(nml::vec2 _x, float _yx, float _yy)": [[12, "mat2-mat2-nml-vec2-x-float-yx-float-yy"]], "mat2: mat2(nml::vec2 _x, nml::vec2 _y)": [[13, "mat2-mat2-nml-vec2-x-nml-vec2-y"]], "mat2: float* data()": [[14, "mat2-float-data"]], "mat2: float det() const": [[15, "mat2-float-det-const"]], "mat2: nml::mat2 nml::mat2::identity()": [[16, "mat2-nml-mat2-nml-mat2-identity"]], "mat2: nml::mat2& operator[](size_t index)": [[17, "mat2-nml-mat2-operator-size-t-index"]], "mat2: const nml::mat2& operator[](size_t index) const": [[18, "mat2-const-nml-mat2-operator-size-t-index-const"]], "mat2: nml::mat2& operator/=(const float other)": [[19, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator-=(const nml::mat2& other)": [[20, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator+=(const nml::mat2& other)": [[21, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator*=(const float other)": [[22, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator*=(const nml::mat2& other)": [[23, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat3": [[24, "mat3"]], "mat3: mat3()": [[25, "mat3-mat3"]], "mat3: mat3(float _value)": [[26, "mat3-mat3-float-value"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)": [[27, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _z)": [[28, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-nml-vec3-z"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, float _zx, float _zy, float _zz)": [[29, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-y-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, nml::vec3 _z)": [[30, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-y-nml-vec3-z"]], "mat3: mat3(const float* _ptr)": [[31, "mat3-mat3-const-float-ptr"]], "mat3: mat3(nml::mat4 _mat)": [[32, "mat3-mat3-nml-mat4-mat"]], "mat3: mat3(nml::vec3 _x, float _yy, float _yz, float _zx, float _zy, float _zz)": [[33, "mat3-mat3-nml-vec3-x-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _x, float _yx, float _yy, float _yz, nml::vec3 _z)": [[34, "mat3-mat3-nml-vec3-x-float-yx-float-yy-float-yz-nml-vec3-z"]], "mat3: mat3(nml::vec3 _x, nml::vec3 _y, float _zx, float _zy, float _zz)": [[35, "mat3-mat3-nml-vec3-x-nml-vec3-y-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _x, nml::vec3 _y, nml::vec3 _z)": [[36, "mat3-mat3-nml-vec3-x-nml-vec3-y-nml-vec3-z"]], "mat3: float* data()": [[37, "mat3-float-data"]], "mat3: float det() const": [[38, "mat3-float-det-const"]], "mat3: nml::mat3 nml::mat3::identity()": [[39, "mat3-nml-mat3-nml-mat3-identity"]], "mat3: nml::mat3& operator[](size_t index)": [[40, "mat3-nml-mat3-operator-size-t-index"]], "mat3: const nml::mat3& operator[](size_t index) const": [[41, "mat3-const-nml-mat3-operator-size-t-index-const"]], "mat3: nml::mat3& operator/=(const float other)": [[42, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator-=(const nml::mat3& other)": [[43, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator+=(const nml::mat3& other)": [[44, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator*=(const float other)": [[45, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator*=(const nml::mat3& other)": [[46, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat4": [[47, "mat4"]], "mat4: mat4()": [[48, "mat4-mat4"]], "mat4: mat4(float _value)": [[49, "mat4-mat4-float-value"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[50, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[51, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[52, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)": [[53, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-nml-vec4-w"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[54, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[55, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[56, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)": [[57, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-nml-vec4-z-nml-vec4-w"]], "mat4: mat4(const float* _ptr)": [[58, "mat4-mat4-const-float-ptr"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[59, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[60, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[61, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)": [[62, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-nml-vec4-w"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[63, "mat4-mat4-nml-vec4-x-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[64, "mat4-mat4-nml-vec4-x-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[65, "mat4-mat4-nml-vec4-x-nml-vec4-y-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)": [[66, "mat4-mat4-nml-vec4-x-nml-vec4-y-nml-vec4-z-nml-vec4-w"]], "mat4: float* data()": [[67, "mat4-float-data"]], "mat4: float det() const": [[68, "mat4-float-det-const"]], "mat4: nml::mat4 nml::mat4::identity()": [[69, "mat4-nml-mat4-nml-mat4-identity"]], "mat4: nml::mat4& operator[](size_t index)": [[70, "mat4-nml-mat4-operator-size-t-index"]], "mat4: const nml::mat4& operator[](size_t index) const": [[71, "mat4-const-nml-mat4-operator-size-t-index-const"]], "mat4: nml::mat4& operator/=(const float other)": [[72, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator-=(const nml::mat4& other)": [[73, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator+=(const nml::mat4& other)": [[74, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator*=(const float other)": [[75, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator*=(const nml::mat4& other)": [[76, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "nml::quat nml::conjugate(const nml::quat& qua)": [[77, "nml-quat-nml-conjugate-const-nml-quat-qua"]], "nml::vec3 nml::cross(const nml::vec3& a, const nml::vec3& b)": [[78, "nml-vec3-nml-cross-const-nml-vec3-a-const-nml-vec3-b"]], "void nml::decomposeTransform(const nml::mat4& transform, nml::vec3& translation, nml::quat& rotation, nml::vec3& scale)": [[79, "void-nml-decomposetransform-const-nml-mat4-transform-nml-vec3-translation-nml-quat-rotation-nml-vec3-scale"]], "float nml::dot(const nml::quat& a, const nml::quat& b)": [[80, "float-nml-dot-const-nml-quat-a-const-nml-quat-b"]], "float nml::dot(const nml::vec2& a, const nml::vec2& b)": [[81, "float-nml-dot-const-nml-vec2-a-const-nml-vec2-b"]], "float nml::dot(const nml::vec3& a, const nml::vec3& b)": [[82, "float-nml-dot-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::vec4& a, const nml::vec4& b)": [[83, "float-nml-dot-const-nml-vec4-a-const-nml-vec4-b"]], "nml::quat nml::eulerAnglesToQuat(const nml::vec3& vec)": [[84, "nml-quat-nml-euleranglestoquat-const-nml-vec3-vec"]], "nml::mat2 inverse(const nml::mat2& mat)": [[85, "nml-mat2-inverse-const-nml-mat2-mat"]], "nml::mat3 inverse(const nml::mat3& mat)": [[86, "nml-mat3-inverse-const-nml-mat3-mat"]], "nml::mat4 inverse(const nml::mat4& mat)": [[87, "nml-mat4-inverse-const-nml-mat4-mat"]], "float nml::lerp(const float& a, const float& b, const float interpolationValue)": [[88, "float-nml-lerp-const-float-a-const-float-b-const-float-interpolationvalue"]], "nml::mat4 lookAtLH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[89, "nml-mat4-lookatlh-const-nml-vec3-from-const-nml-vec3-to-const-nml-vec3-up"]], "nml::mat4 lookAtRH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[90, "nml-mat4-lookatrh-const-nml-vec3-from-const-nml-vec3-to-const-nml-vec3-up"]], "nml::quat nml::normalize(const nml::quat& qua)": [[91, "nml-quat-nml-normalize-const-nml-quat-qua"]], "nml::vec2 nml::normalize(const nml::vec2& vec)": [[92, "nml-vec2-nml-normalize-const-nml-vec2-vec"]], "nml::vec3 nml::normalize(const nml::vec3& vec)": [[93, "nml-vec3-nml-normalize-const-nml-vec3-vec"]], "nml::vec4 nml::normalize(const nml::vec4& vec)": [[94, "nml-vec4-nml-normalize-const-nml-vec4-vec"]], "nml::mat2 operator/(nml::mat2 lhs, const float rhs)": [[95, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat3 operator/(nml::mat3 lhs, const float rhs)": [[96, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat4 operator/(nml::mat4 lhs, const float rhs)": [[97, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::quat operator/(nml::quat lhs, const float rhs)": [[98, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::vec2 operator/(nml::vec2 lhs, const float rhs)": [[99, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator/(nml::vec3 lhs, const float rhs)": [[100, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator/(nml::vec4 lhs, const float rhs)": [[101, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "bool operator==(const nml::mat2& lhs, const nml::mat2& rhs)": [[102, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator==(const nml::mat3& lhs, const nml::mat3& rhs)": [[103, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator==(const nml::mat4& lhs, const nml::mat4& rhs)": [[104, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator==(const nml::quat& lhs, const nml::quat& rhs)": [[105, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator==(const nml::vec2& lhs, const nml::vec2& rhs)": [[106, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator==(const nml::vec3& lhs, const nml::vec3& rhs)": [[107, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator==(const nml::vec4& lhs, const nml::vec4& rhs)": [[108, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "bool operator!=(const nml::mat2& lhs, const nml::mat2& rhs)": [[109, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator!=(const nml::mat3& lhs, const nml::mat3& rhs)": [[110, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator!=(const nml::mat4& lhs, const nml::mat4& rhs)": [[111, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator!=(const nml::quat& lhs, const nml::quat& rhs)": [[112, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator!=(const nml::vec2& lhs, const nml::vec2& rhs)": [[113, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator!=(const nml::vec3& lhs, const nml::vec3& rhs)": [[114, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator!=(const nml::vec4& lhs, const nml::vec4& rhs)": [[115, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2& rhs)": [[116, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3& rhs)": [[117, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4& rhs)": [[118, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator-(nml::quat lhs, const nml::quat& rhs)": [[119, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2& rhs)": [[120, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3& rhs)": [[121, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4& rhs)": [[122, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2& rhs)": [[123, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3& rhs)": [[124, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4& rhs)": [[125, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator+(nml::quat lhs, const nml::quat& rhs)": [[126, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2& rhs)": [[127, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3& rhs)": [[128, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4& rhs)": [[129, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(float lhs, const nml::mat2& rhs)": [[130, "nml-mat2-operator-float-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator*(float lhs, const nml::mat3& rhs)": [[131, "nml-mat3-operator-float-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator*(float lhs, const nml::mat4& rhs)": [[132, "nml-mat4-operator-float-lhs-const-nml-mat4-rhs"]], "nml::quat operator*(float lhs, const nml::quat& rhs)": [[133, "nml-quat-operator-float-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(float lhs, const nml::vec2& rhs)": [[134, "nml-vec2-operator-float-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator*(float lhs, const nml::vec3& rhs)": [[135, "nml-vec3-operator-float-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator*(float lhs, const nml::vec4& rhs)": [[136, "nml-vec4-operator-float-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const float rhs)": [[137, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2& rhs)": [[138, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2& rhs)": [[139, "nml-vec2-operator-nml-mat2-lhs-const-nml-vec2-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const float rhs)": [[140, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3& rhs)": [[141, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3& rhs)": [[142, "nml-vec3-operator-nml-mat3-lhs-const-nml-vec3-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const float rhs)": [[143, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4& rhs)": [[144, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4& rhs)": [[145, "nml-vec4-operator-nml-mat4-lhs-const-nml-vec4-rhs"]], "nml::quat operator*(nml::quat lhs, const float rhs)": [[146, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::quat operator*(nml::quat lhs, const nml::quat& rhs)": [[147, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(nml::vec2 lhs, const float rhs)": [[148, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator*(nml::vec3 lhs, const float rhs)": [[149, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator*(nml::vec4 lhs, const float rhs)": [[150, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[151, "nml-mat4-ortholh-const-float-left-const-float-right-const-float-bottom-const-float-top-const-float-near-const-float-far"]], "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[152, "nml-mat4-orthorh-const-float-left-const-float-right-const-float-bottom-const-float-top-const-float-near-const-float-far"]], "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)": [[153, "nml-mat4-perspectivelh-const-float-fovy-const-float-aspectratio-const-float-near-const-float-far"]], "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)": [[154, "nml-mat4-perspectiverh-const-float-fovy-const-float-aspectratio-const-float-near-const-float-far"]], "nml::vec3 nml::quatToEulerAngles(const nml::quat& qua)": [[155, "nml-vec3-nml-quattoeulerangles-const-nml-quat-qua"]], "nml::mat4 nml::quatToRotationMatrix(const nml::quat& qua)": [[156, "nml-mat4-nml-quattorotationmatrix-const-nml-quat-qua"]], "nml::vec2 nml::reflect(const nml::vec2& i, const nml::vec2& n)": [[157, "nml-vec2-nml-reflect-const-nml-vec2-i-const-nml-vec2-n"]], "nml::vec3 nml::reflect(const nml::vec3& i, const nml::vec3& n)": [[158, "nml-vec3-nml-reflect-const-nml-vec3-i-const-nml-vec3-n"]], "nml::vec4 nml::reflect(const nml::vec4& i, const nml::vec4& n)": [[159, "nml-vec4-nml-reflect-const-nml-vec4-i-const-nml-vec4-n"]], "nml::vec2 nml::refract(const nml::vec2& i, const nml::vec2& n, float ior)": [[160, "nml-vec2-nml-refract-const-nml-vec2-i-const-nml-vec2-n-float-ior"]], "nml::vec3 nml::refract(const nml::vec3& i, const nml::vec3& n, float ior)": [[161, "nml-vec3-nml-refract-const-nml-vec3-i-const-nml-vec3-n-float-ior"]], "nml::vec4 nml::refract(const nml::vec4& i, const nml::vec4& n, float ior)": [[162, "nml-vec4-nml-refract-const-nml-vec4-i-const-nml-vec4-n-float-ior"]], "nml::mat3 rotate(const float angle)": [[163, "nml-mat3-rotate-const-float-angle"]], "nml::mat4 rotate(const float angle, const nml::vec3& axis)": [[164, "nml-mat4-rotate-const-float-angle-const-nml-vec3-axis"]], "nml::vec3 nml::rotationMatrixToEulerAngles(const nml::mat4& mat)": [[165, "nml-vec3-nml-rotationmatrixtoeulerangles-const-nml-mat4-mat"]], "nml::mat3 scale(const nml::vec2& scaling)": [[166, "nml-mat3-scale-const-nml-vec2-scaling"]], "nml::mat4 scale(const nml::vec3& scaling)": [[167, "nml-mat4-scale-const-nml-vec3-scaling"]], "quat nml::slerp(const quat& a, const quat& b, const float interpolationValue)": [[168, "quat-nml-slerp-const-quat-a-const-quat-b-const-float-interpolationvalue"]], "std::string nml::to_string(const nml::mat2& vec)": [[169, "std-string-nml-to-string-const-nml-mat2-vec"]], "std::string nml::to_string(const nml::mat3& vec)": [[170, "std-string-nml-to-string-const-nml-mat3-vec"]], "std::string nml::to_string(const nml::mat4& vec)": [[171, "std-string-nml-to-string-const-nml-mat4-vec"]], "std::string nml::to_string(const nml::quat& vec)": [[172, "std-string-nml-to-string-const-nml-quat-vec"]], "std::string nml::to_string(const nml::vec2& vec)": [[173, "std-string-nml-to-string-const-nml-vec2-vec"]], "std::string nml::to_string(const nml::vec3& vec)": [[174, "std-string-nml-to-string-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::vec4& vec)": [[175, "std-string-nml-to-string-const-nml-vec4-vec"]], "float nml::toDeg(const float radians)": [[176, "float-nml-todeg-const-float-radians"]], "float nml::toRad(const float degrees)": [[177, "float-nml-torad-const-float-degrees"]], "nml::mat3 translate(const nml::vec2& translation)": [[178, "nml-mat3-translate-const-nml-vec2-translation"]], "nml::mat4 translate(const nml::vec3& translation)": [[179, "nml-mat4-translate-const-nml-vec3-translation"]], "nml::mat2 transpose(const nml::mat2& mat)": [[180, "nml-mat2-transpose-const-nml-mat2-mat"]], "nml::mat3 transpose(const nml::mat3& mat)": [[181, "nml-mat3-transpose-const-nml-mat3-mat"]], "nml::mat4 transpose(const nml::mat4& mat)": [[182, "nml-mat4-transpose-const-nml-mat4-mat"]], "Other": [[183, "other"]], "Quaternion": [[184, "quaternion"]], "quat": [[185, "quat"]], "quat: quat()": [[186, "quat-quat"]], "quat: quat(float _a, float _b, float _c, float _d)": [[187, "quat-quat-float-a-float-b-float-c-float-d"]], "quat: quat(const float* _ptr)": [[188, "quat-quat-const-float-ptr"]], "quat: float* data()": [[189, "quat-float-data"]], "quat: nml::quat nml::quat::identity()": [[190, "quat-nml-quat-nml-quat-identity"]], "quat: float length()": [[191, "quat-float-length"]], "quat: float& operator[](size_t index)": [[192, "quat-float-operator-size-t-index"]], "quat: const float operator[](size_t index) const": [[193, "quat-const-float-operator-size-t-index-const"]], "quat: nml::quat& operator/=(const float other)": [[194, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat operator-()": [[195, "quat-nml-quat-operator"]], "quat: nml::quat& operator-=(const nml::quat& other)": [[196, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator+=(const nml::quat& other)": [[197, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator*=(const float other)": [[198, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator*=(const nml::quat& other)": [[199, "quat-nml-quat-operator-const-nml-quat-other"]], "Vector": [[200, "vector"]], "vec2": [[201, "vec2"]], "vec2: vec2()": [[202, "vec2-vec2"]], "vec2: vec2(float _value)": [[203, "vec2-vec2-float-value"]], "vec2: vec2(float _x, float _y)": [[204, "vec2-vec2-float-x-float-y"]], "vec2: vec2(const float* _ptr)": [[205, "vec2-vec2-const-float-ptr"]], "vec2: vec2(nml::vec3 _xyz)": [[206, "vec2-vec2-nml-vec3-xyz"]], "vec2: vec2(nml::vec4 _xyzw)": [[207, "vec2-vec2-nml-vec4-xyzw"]], "vec2: float* data()": [[208, "vec2-float-data"]], "vec2: float length()": [[209, "vec2-float-length"]], "vec2: float& operator[](size_t index)": [[210, "vec2-float-operator-size-t-index"]], "vec2: const float operator[](size_t index) const": [[211, "vec2-const-float-operator-size-t-index-const"]], "vec2: nml::vec2& operator/=(const float other)": [[212, "vec2-nml-vec2-operator-const-float-other"]], "vec2: nml::vec2 operator-()": [[213, "vec2-nml-vec2-operator"]], "vec2: nml::vec2& operator-=(const nml::vec2& other)": [[214, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator+=(const nml::vec2& other)": [[215, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator*=(const float other)": [[216, "vec2-nml-vec2-operator-const-float-other"]], "vec3": [[217, "vec3"]], "vec3: vec3()": [[218, "vec3-vec3"]], "vec3: vec3(float _value)": [[219, "vec3-vec3-float-value"]], "vec3: vec3(float _x, float _y, float _z)": [[220, "vec3-vec3-float-x-float-y-float-z"]], "vec3: vec3(float _x, nml::vec2 _yz)": [[221, "vec3-vec3-float-x-nml-vec2-yz"]], "vec3: vec3(const float* _ptr)": [[222, "vec3-vec3-const-float-ptr"]], "vec3: vec3(nml::vec2 _xy, float _z)": [[223, "vec3-vec3-nml-vec2-xy-float-z"]], "vec3: vec3(nml::vec4 _xyzw)": [[224, "vec3-vec3-nml-vec4-xyzw"]], "vec3: float* data()": [[225, "vec3-float-data"]], "vec3: float length()": [[226, "vec3-float-length"]], "vec3: float& operator[](size_t index)": [[227, "vec3-float-operator-size-t-index"]], "vec3: const float operator[](size_t index) const": [[228, "vec3-const-float-operator-size-t-index-const"]], "vec3: nml::vec3& operator/=(const float other)": [[229, "vec3-nml-vec3-operator-const-float-other"]], "vec3: nml::vec3 operator-()": [[230, "vec3-nml-vec3-operator"]], "vec3: nml::vec3& operator-=(const nml::vec3& other)": [[231, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator+=(const nml::vec3& other)": [[232, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator*=(const float other)": [[233, "vec3-nml-vec3-operator-const-float-other"]], "vec4": [[234, "vec4"]], "vec4: vec4()": [[235, "vec4-vec4"]], "vec4: vec4(float _value)": [[236, "vec4-vec4-float-value"]], "vec4: vec4(float _x, float _y, float _z, float _w)": [[237, "vec4-vec4-float-x-float-y-float-z-float-w"]], "vec4: vec4(float _x, float _y, nml::vec2 _zw)": [[238, "vec4-vec4-float-x-float-y-nml-vec2-zw"]], "vec4: vec4(float _x, nml::vec2 _yz, float _w)": [[239, "vec4-vec4-float-x-nml-vec2-yz-float-w"]], "vec4: vec4(float _x, nml::vec3 _yzw)": [[240, "vec4-vec4-float-x-nml-vec3-yzw"]], "vec4: vec4(const float* _ptr)": [[241, "vec4-vec4-const-float-ptr"]], "vec4: vec4(nml::vec2 _xy, float _z, float _w)": [[242, "vec4-vec4-nml-vec2-xy-float-z-float-w"]], "vec4: vec4(nml::vec2 _xy, nml::vec2 _zw)": [[243, "vec4-vec4-nml-vec2-xy-nml-vec2-zw"]], "vec4: vec4(nml::vec3 _xyz, float _w)": [[244, "vec4-vec4-nml-vec3-xyz-float-w"]], "vec4: float* data()": [[245, "vec4-float-data"]], "vec4: float length()": [[246, "vec4-float-length"]], "vec4: float& operator[](size_t index)": [[247, "vec4-float-operator-size-t-index"]], "vec4: const float operator[](size_t index) const": [[248, "vec4-const-float-operator-size-t-index-const"]], "vec4: nml::vec4& operator/=(const float other)": [[249, "vec4-nml-vec4-operator-const-float-other"]], "vec4: nml::vec4 operator-()": [[250, "vec4-nml-vec4-operator"]], "vec4: nml::vec4& operator-=(const nml::vec4& other)": [[251, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator+=(const nml::vec4& other)": [[252, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator*=(const float other)": [[253, "vec4-nml-vec4-operator-const-float-other"]]}, "indexentries": {}})