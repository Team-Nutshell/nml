Search.setIndex({"alltitles": {"Add nml to a CMake project": [[0, "add-nml-to-a-cmake-project"]], "Class functions": [[4, "class-functions"], [24, "class-functions"], [48, "class-functions"], [187, "class-functions"], [203, "class-functions"], [219, "class-functions"], [236, "class-functions"]], "Class variables": [[4, "class-variables"], [24, "class-variables"], [48, "class-variables"], [187, "class-variables"], [203, "class-variables"], [219, "class-variables"], [236, "class-variables"]], "Constructors": [[4, "constructors"], [24, "constructors"], [48, "constructors"], [187, "constructors"], [203, "constructors"], [219, "constructors"], [236, "constructors"]], "Example": [[5, "example"], [6, "example"], [7, "example"], [8, "example"], [9, "example"], [10, "example"], [11, "example"], [12, "example"], [13, "example"], [14, "example"], [15, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [20, "example"], [21, "example"], [22, "example"], [23, "example"], [25, "example"], [26, "example"], [27, "example"], [28, "example"], [29, "example"], [30, "example"], [31, "example"], [32, "example"], [33, "example"], [34, "example"], [35, "example"], [36, "example"], [37, "example"], [38, "example"], [39, "example"], [40, "example"], [41, "example"], [42, "example"], [43, "example"], [44, "example"], [45, "example"], [46, "example"], [47, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [93, "example"], [94, "example"], [95, "example"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [105, "example"], [106, "example"], [107, "example"], [108, "example"], [109, "example"], [110, "example"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [120, "example"], [121, "example"], [122, "example"], [123, "example"], [124, "example"], [125, "example"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [166, "example"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [175, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [193, "example"], [194, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"], [199, "example"], [200, "example"], [201, "example"], [204, "example"], [205, "example"], [206, "example"], [207, "example"], [208, "example"], [209, "example"], [210, "example"], [211, "example"], [212, "example"], [213, "example"], [214, "example"], [215, "example"], [216, "example"], [217, "example"], [218, "example"], [220, "example"], [221, "example"], [222, "example"], [223, "example"], [224, "example"], [225, "example"], [226, "example"], [227, "example"], [228, "example"], [229, "example"], [230, "example"], [231, "example"], [232, "example"], [233, "example"], [234, "example"], [235, "example"], [237, "example"], [238, "example"], [239, "example"], [240, "example"], [241, "example"], [242, "example"], [243, "example"], [244, "example"], [245, "example"], [246, "example"], [247, "example"], [248, "example"], [249, "example"], [250, "example"], [251, "example"], [252, "example"], [253, "example"], [254, "example"], [255, "example"]], "Functions": [[4, "functions"], [4, "id2"], [24, "functions"], [24, "id2"], [48, "functions"], [48, "id2"], [187, "functions"], [187, "id2"], [203, "functions"], [203, "id2"], [219, "functions"], [219, "id2"], [236, "functions"], [236, "id2"]], "Get nml": [[0, "get-nml"]], "Getting started": [[0, null]], "Indices and tables": [[1, "indices-and-tables"]], "Matrix": [[3, null]], "Namespace functions": [[4, "namespace-functions"], [24, "namespace-functions"], [48, "namespace-functions"], [185, "namespace-functions"], [187, "namespace-functions"], [203, "namespace-functions"], [219, "namespace-functions"], [236, "namespace-functions"]], "Operators": [[4, "operators"], [4, "id1"], [24, "operators"], [24, "id1"], [48, "operators"], [48, "id1"], [187, "operators"], [187, "id1"], [203, "operators"], [203, "id1"], [219, "operators"], [219, "id1"], [236, "operators"], [236, "id1"]], "Other": [[185, null]], "Quaternion": [[186, null]], "Static Functions": [[4, "static-functions"], [24, "static-functions"], [48, "static-functions"], [187, "static-functions"]], "Table of Contents": [[1, null]], "Use nml": [[0, "use-nml"]], "Vector": [[202, null]], "bool operator!=(const nml::mat2& lhs, const nml::mat2& rhs)": [[110, null]], "bool operator!=(const nml::mat3& lhs, const nml::mat3& rhs)": [[111, null]], "bool operator!=(const nml::mat4& lhs, const nml::mat4& rhs)": [[112, null]], "bool operator!=(const nml::quat& lhs, const nml::quat& rhs)": [[113, null]], "bool operator!=(const nml::vec2& lhs, const nml::vec2& rhs)": [[114, null]], "bool operator!=(const nml::vec3& lhs, const nml::vec3& rhs)": [[115, null]], "bool operator!=(const nml::vec4& lhs, const nml::vec4& rhs)": [[116, null]], "bool operator==(const nml::mat2& lhs, const nml::mat2& rhs)": [[103, null]], "bool operator==(const nml::mat3& lhs, const nml::mat3& rhs)": [[104, null]], "bool operator==(const nml::mat4& lhs, const nml::mat4& rhs)": [[105, null]], "bool operator==(const nml::quat& lhs, const nml::quat& rhs)": [[106, null]], "bool operator==(const nml::vec2& lhs, const nml::vec2& rhs)": [[107, null]], "bool operator==(const nml::vec3& lhs, const nml::vec3& rhs)": [[108, null]], "bool operator==(const nml::vec4& lhs, const nml::vec4& rhs)": [[109, null]], "float nml::dot(const nml::quat& a, const nml::quat& b)": [[81, null]], "float nml::dot(const nml::vec2& a, const nml::vec2& b)": [[82, null]], "float nml::dot(const nml::vec3& a, const nml::vec3& b)": [[83, null]], "float nml::dot(const nml::vec4& a, const nml::vec4& b)": [[84, null]], "float nml::lerp(const float& a, const float& b, const float interpolationValue)": [[89, null]], "float nml::toDeg(const float radians)": [[178, null]], "float nml::toRad(const float degrees)": [[179, null]], "mat2": [[4, null]], "mat2: const nml::mat2& operator[](size_t index) const": [[18, null]], "mat2: float det() const": [[15, null]], "mat2: float* data()": [[14, null]], "mat2: mat2()": [[5, null]], "mat2: mat2(const float* _ptr)": [[9, null]], "mat2: mat2(const nml::mat3& _mat)": [[10, null]], "mat2: mat2(const nml::mat4& _mat)": [[11, null]], "mat2: mat2(const nml::vec2& _x, const nml::vec2& _y)": [[13, null]], "mat2: mat2(const nml::vec2& _x, float _yx, float _yy)": [[12, null]], "mat2: mat2(float _value)": [[6, null]], "mat2: mat2(float _xx, float _xy, const nml::vec2& _y)": [[8, null]], "mat2: mat2(float _xx, float _xy, float _yx, float _yy)": [[7, null]], "mat2: nml::mat2 nml::mat2::identity()": [[16, null]], "mat2: nml::mat2& operator*=(const float other)": [[22, null]], "mat2: nml::mat2& operator*=(const nml::mat2& other)": [[23, null]], "mat2: nml::mat2& operator+=(const nml::mat2& other)": [[21, null]], "mat2: nml::mat2& operator-=(const nml::mat2& other)": [[20, null]], "mat2: nml::mat2& operator/=(const float other)": [[19, null]], "mat2: nml::mat2& operator[](size_t index)": [[17, null]], "mat3": [[24, null]], "mat3: const nml::mat3& operator[](size_t index) const": [[42, null]], "mat3: float det() const": [[38, null]], "mat3: float* data()": [[37, null]], "mat3: mat3()": [[25, null]], "mat3: mat3(const float* _ptr)": [[31, null]], "mat3: mat3(const nml::mat4& _mat)": [[32, null]], "mat3: mat3(const nml::vec3& _x, const nml::vec3& _y, const nml::vec3& _z)": [[36, null]], "mat3: mat3(const nml::vec3& _x, const nml::vec3& _y, float _zx, float _zy, float _zz)": [[35, null]], "mat3: mat3(const nml::vec3& _x, float _yx, float _yy, float _yz, const nml::vec3& _z)": [[34, null]], "mat3: mat3(const nml::vec3& _x, float _yy, float _yz, float _zx, float _zy, float _zz)": [[33, null]], "mat3: mat3(float _value)": [[26, null]], "mat3: mat3(float _xx, float _xy, float _xz, const nml::vec3& _y, const nml::vec3& _z)": [[30, null]], "mat3: mat3(float _xx, float _xy, float _xz, const nml::vec3& _y, float _zx, float _zy, float _zz)": [[29, null]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, const nml::vec3& _z)": [[28, null]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)": [[27, null]], "mat3: nml::mat3 nml::mat3::identity()": [[40, null]], "mat3: nml::mat3& operator*=(const float other)": [[46, null]], "mat3: nml::mat3& operator*=(const nml::mat3& other)": [[47, null]], "mat3: nml::mat3& operator+=(const nml::mat3& other)": [[45, null]], "mat3: nml::mat3& operator-=(const nml::mat3& other)": [[44, null]], "mat3: nml::mat3& operator/=(const float other)": [[43, null]], "mat3: nml::mat3& operator[](size_t index)": [[41, null]], "mat3: std::array<std::pair<float, vec3>, 3> eigen() const": [[39, null]], "mat4": [[48, null]], "mat4: const nml::mat4& operator[](size_t index) const": [[72, null]], "mat4: float det() const": [[69, null]], "mat4: float* data()": [[68, null]], "mat4: mat4()": [[49, null]], "mat4: mat4(const float* _ptr)": [[59, null]], "mat4: mat4(float _value)": [[50, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[51, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[52, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[53, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)": [[54, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[55, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[56, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[57, null]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)": [[58, null]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[60, null]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[61, null]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[62, null]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)": [[63, null]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[64, null]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[65, null]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[66, null]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)": [[67, null]], "mat4: nml::mat4 nml::mat4::identity()": [[70, null]], "mat4: nml::mat4& operator*=(const float other)": [[76, null]], "mat4: nml::mat4& operator*=(const nml::mat4& other)": [[77, null]], "mat4: nml::mat4& operator+=(const nml::mat4& other)": [[75, null]], "mat4: nml::mat4& operator-=(const nml::mat4& other)": [[74, null]], "mat4: nml::mat4& operator/=(const float other)": [[73, null]], "mat4: nml::mat4& operator[](size_t index)": [[71, null]], "nml": [[2, null]], "nml - Nutshell Mathematics Library": [[1, null]], "nml::mat2 inverse(const nml::mat2& mat)": [[86, null]], "nml::mat2 operator*(float lhs, const nml::mat2& rhs)": [[131, null]], "nml::mat2 operator*(nml::mat2 lhs, const float rhs)": [[138, null]], "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2& rhs)": [[139, null]], "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2& rhs)": [[124, null]], "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2& rhs)": [[117, null]], "nml::mat2 operator/(nml::mat2 lhs, const float rhs)": [[96, null]], "nml::mat2 transpose(const nml::mat2& mat)": [[182, null]], "nml::mat3 inverse(const nml::mat3& mat)": [[87, null]], "nml::mat3 operator*(float lhs, const nml::mat3& rhs)": [[132, null]], "nml::mat3 operator*(nml::mat3 lhs, const float rhs)": [[141, null]], "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3& rhs)": [[142, null]], "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3& rhs)": [[125, null]], "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3& rhs)": [[118, null]], "nml::mat3 operator/(nml::mat3 lhs, const float rhs)": [[97, null]], "nml::mat3 rotate(const float angle)": [[164, null]], "nml::mat3 scale(const nml::vec2& scaling)": [[168, null]], "nml::mat3 translate(const nml::vec2& translation)": [[180, null]], "nml::mat3 transpose(const nml::mat3& mat)": [[183, null]], "nml::mat4 inverse(const nml::mat4& mat)": [[88, null]], "nml::mat4 lookAtLH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[90, null]], "nml::mat4 lookAtRH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[91, null]], "nml::mat4 nml::quatToRotationMatrix(const nml::quat& qua)": [[157, null]], "nml::mat4 operator*(float lhs, const nml::mat4& rhs)": [[133, null]], "nml::mat4 operator*(nml::mat4 lhs, const float rhs)": [[144, null]], "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4& rhs)": [[145, null]], "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4& rhs)": [[126, null]], "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4& rhs)": [[119, null]], "nml::mat4 operator/(nml::mat4 lhs, const float rhs)": [[98, null]], "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[152, null]], "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[153, null]], "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)": [[154, null]], "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)": [[155, null]], "nml::mat4 rotate(const float angle, const nml::vec3& axis)": [[165, null]], "nml::mat4 scale(const nml::vec3& scaling)": [[169, null]], "nml::mat4 translate(const nml::vec3& translation)": [[181, null]], "nml::mat4 transpose(const nml::mat4& mat)": [[184, null]], "nml::quat nml::conjugate(const nml::quat& qua)": [[78, null]], "nml::quat nml::eulerAnglesToQuat(const nml::vec3& vec)": [[85, null]], "nml::quat nml::normalize(const nml::quat& qua)": [[92, null]], "nml::quat nml::rotationMatrixToQuat(const nml::mat4& mat)": [[167, null]], "nml::quat operator*(float lhs, const nml::quat& rhs)": [[134, null]], "nml::quat operator*(nml::quat lhs, const float rhs)": [[147, null]], "nml::quat operator*(nml::quat lhs, const nml::quat& rhs)": [[148, null]], "nml::quat operator+(nml::quat lhs, const nml::quat& rhs)": [[127, null]], "nml::quat operator-(nml::quat lhs, const nml::quat& rhs)": [[120, null]], "nml::quat operator/(nml::quat lhs, const float rhs)": [[99, null]], "nml::vec2 nml::normalize(const nml::vec2& vec)": [[93, null]], "nml::vec2 nml::reflect(const nml::vec2& i, const nml::vec2& n)": [[158, null]], "nml::vec2 nml::refract(const nml::vec2& i, const nml::vec2& n, float ior)": [[161, null]], "nml::vec2 operator*(float lhs, const nml::vec2& rhs)": [[135, null]], "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2& rhs)": [[140, null]], "nml::vec2 operator*(nml::vec2 lhs, const float rhs)": [[149, null]], "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2& rhs)": [[128, null]], "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2& rhs)": [[121, null]], "nml::vec2 operator/(nml::vec2 lhs, const float rhs)": [[100, null]], "nml::vec3 nml::cross(const nml::vec3& a, const nml::vec3& b)": [[79, null]], "nml::vec3 nml::normalize(const nml::vec3& vec)": [[94, null]], "nml::vec3 nml::quatToEulerAngles(const nml::quat& qua)": [[156, null]], "nml::vec3 nml::reflect(const nml::vec3& i, const nml::vec3& n)": [[159, null]], "nml::vec3 nml::refract(const nml::vec3& i, const nml::vec3& n, float ior)": [[162, null]], "nml::vec3 nml::rotationMatrixToEulerAngles(const nml::mat4& mat)": [[166, null]], "nml::vec3 operator*(float lhs, const nml::vec3& rhs)": [[136, null]], "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3& rhs)": [[143, null]], "nml::vec3 operator*(nml::vec3 lhs, const float rhs)": [[150, null]], "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3& rhs)": [[129, null]], "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3& rhs)": [[122, null]], "nml::vec3 operator/(nml::vec3 lhs, const float rhs)": [[101, null]], "nml::vec4 nml::normalize(const nml::vec4& vec)": [[95, null]], "nml::vec4 nml::reflect(const nml::vec4& i, const nml::vec4& n)": [[160, null]], "nml::vec4 nml::refract(const nml::vec4& i, const nml::vec4& n, float ior)": [[163, null]], "nml::vec4 operator*(float lhs, const nml::vec4& rhs)": [[137, null]], "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4& rhs)": [[146, null]], "nml::vec4 operator*(nml::vec4 lhs, const float rhs)": [[151, null]], "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4& rhs)": [[130, null]], "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4& rhs)": [[123, null]], "nml::vec4 operator/(nml::vec4 lhs, const float rhs)": [[102, null]], "quat": [[187, null]], "quat nml::slerp(const quat& a, const quat& b, const float interpolationValue)": [[170, null]], "quat: const float operator[](size_t index) const": [[195, null]], "quat: float length()": [[193, null]], "quat: float& operator[](size_t index)": [[194, null]], "quat: float* data()": [[191, null]], "quat: nml::quat nml::quat::identity()": [[192, null]], "quat: nml::quat operator-()": [[197, null]], "quat: nml::quat& operator*=(const float other)": [[200, null]], "quat: nml::quat& operator*=(const nml::quat& other)": [[201, null]], "quat: nml::quat& operator+=(const nml::quat& other)": [[199, null]], "quat: nml::quat& operator-=(const nml::quat& other)": [[198, null]], "quat: nml::quat& operator/=(const float other)": [[196, null]], "quat: quat()": [[188, null]], "quat: quat(const float* _ptr)": [[190, null]], "quat: quat(float _a, float _b, float _c, float _d)": [[189, null]], "std::string nml::to_string(const nml::mat2& vec)": [[171, null]], "std::string nml::to_string(const nml::mat3& vec)": [[172, null]], "std::string nml::to_string(const nml::mat4& vec)": [[173, null]], "std::string nml::to_string(const nml::quat& vec)": [[174, null]], "std::string nml::to_string(const nml::vec2& vec)": [[175, null]], "std::string nml::to_string(const nml::vec3& vec)": [[176, null]], "std::string nml::to_string(const nml::vec4& vec)": [[177, null]], "vec2": [[203, null]], "vec2: const float operator[](size_t index) const": [[213, null]], "vec2: float length()": [[211, null]], "vec2: float& operator[](size_t index)": [[212, null]], "vec2: float* data()": [[210, null]], "vec2: nml::vec2 operator-()": [[215, null]], "vec2: nml::vec2& operator*=(const float other)": [[218, null]], "vec2: nml::vec2& operator+=(const nml::vec2& other)": [[217, null]], "vec2: nml::vec2& operator-=(const nml::vec2& other)": [[216, null]], "vec2: nml::vec2& operator/=(const float other)": [[214, null]], "vec2: vec2()": [[204, null]], "vec2: vec2(const float* _ptr)": [[207, null]], "vec2: vec2(const nml::vec3& _xyz)": [[208, null]], "vec2: vec2(const nml::vec4& _xyzw)": [[209, null]], "vec2: vec2(float _value)": [[205, null]], "vec2: vec2(float _x, float _y)": [[206, null]], "vec3": [[219, null]], "vec3: const float operator[](size_t index) const": [[230, null]], "vec3: float length()": [[228, null]], "vec3: float& operator[](size_t index)": [[229, null]], "vec3: float* data()": [[227, null]], "vec3: nml::vec3 operator-()": [[232, null]], "vec3: nml::vec3& operator*=(const float other)": [[235, null]], "vec3: nml::vec3& operator+=(const nml::vec3& other)": [[234, null]], "vec3: nml::vec3& operator-=(const nml::vec3& other)": [[233, null]], "vec3: nml::vec3& operator/=(const float other)": [[231, null]], "vec3: vec3()": [[220, null]], "vec3: vec3(const float* _ptr)": [[224, null]], "vec3: vec3(const nml::vec2& _xy, float _z)": [[225, null]], "vec3: vec3(const nml::vec4& _xyzw)": [[226, null]], "vec3: vec3(float _value)": [[221, null]], "vec3: vec3(float _x, const nml::vec2& _yz)": [[223, null]], "vec3: vec3(float _x, float _y, float _z)": [[222, null]], "vec4": [[236, null]], "vec4: const float operator[](size_t index) const": [[250, null]], "vec4: float length()": [[248, null]], "vec4: float& operator[](size_t index)": [[249, null]], "vec4: float* data()": [[247, null]], "vec4: nml::vec4 operator-()": [[252, null]], "vec4: nml::vec4& operator*=(const float other)": [[255, null]], "vec4: nml::vec4& operator+=(const nml::vec4& other)": [[254, null]], "vec4: nml::vec4& operator-=(const nml::vec4& other)": [[253, null]], "vec4: nml::vec4& operator/=(const float other)": [[251, null]], "vec4: vec4()": [[237, null]], "vec4: vec4(const float* _ptr)": [[243, null]], "vec4: vec4(const nml::vec2& _xy, const nml::vec2& _zw)": [[245, null]], "vec4: vec4(const nml::vec2& _xy, float _z, float _w)": [[244, null]], "vec4: vec4(const nml::vec3& _xyz, float _w)": [[246, null]], "vec4: vec4(float _value)": [[238, null]], "vec4: vec4(float _x, const nml::vec2& _yz, float _w)": [[241, null]], "vec4: vec4(float _x, const nml::vec3& _yzw)": [[242, null]], "vec4: vec4(float _x, float _y, const nml::vec2& _zw)": [[240, null]], "vec4: vec4(float _x, float _y, float _z, float _w)": [[239, null]], "void nml::decomposeTransform(const nml::mat4& transform, nml::vec3& translation, nml::quat& rotation, nml::vec3& scale)": [[80, null]]}, "docnames": ["getting_started/index", "index", "nml/index", "nml/matrix/index", "nml/matrix/mat2", "nml/matrix/mat2/constructor", "nml/matrix/mat2/constructor_float", "nml/matrix/mat2/constructor_float_float_float_float", "nml/matrix/mat2/constructor_float_float_vec2", "nml/matrix/mat2/constructor_floatptr", "nml/matrix/mat2/constructor_mat3", "nml/matrix/mat2/constructor_mat4", "nml/matrix/mat2/constructor_vec2_float_float", "nml/matrix/mat2/constructor_vec2_vec2", "nml/matrix/mat2/data", "nml/matrix/mat2/det", "nml/matrix/mat2/identity", "nml/matrix/mat2/operator_brackets_ref", "nml/matrix/mat2/operator_brackets_value", "nml/matrix/mat2/operator_divide_equal_float", "nml/matrix/mat2/operator_minus_equal_mat2", "nml/matrix/mat2/operator_plus_equal_mat2", "nml/matrix/mat2/operator_times_equal_float", "nml/matrix/mat2/operator_times_equal_mat2", "nml/matrix/mat3", "nml/matrix/mat3/constructor", "nml/matrix/mat3/constructor_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3", "nml/matrix/mat3/constructor_floatptr", "nml/matrix/mat3/constructor_mat4", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float", "nml/matrix/mat3/constructor_vec3_vec3_vec3", "nml/matrix/mat3/data", "nml/matrix/mat3/det", "nml/matrix/mat3/eigen", "nml/matrix/mat3/identity", "nml/matrix/mat3/operator_brackets_ref", "nml/matrix/mat3/operator_brackets_value", "nml/matrix/mat3/operator_divide_equal_float", "nml/matrix/mat3/operator_minus_equal_mat3", "nml/matrix/mat3/operator_plus_equal_mat3", "nml/matrix/mat3/operator_times_equal_float", "nml/matrix/mat3/operator_times_equal_mat3", "nml/matrix/mat4", "nml/matrix/mat4/constructor", "nml/matrix/mat4/constructor_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4", "nml/matrix/mat4/constructor_floatptr", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4", "nml/matrix/mat4/data", "nml/matrix/mat4/det", "nml/matrix/mat4/identity", "nml/matrix/mat4/operator_brackets_ref", "nml/matrix/mat4/operator_brackets_value", "nml/matrix/mat4/operator_divide_equal_float", "nml/matrix/mat4/operator_minus_equal_mat4", "nml/matrix/mat4/operator_plus_equal_mat4", "nml/matrix/mat4/operator_times_equal_float", "nml/matrix/mat4/operator_times_equal_mat4", "nml/namespace/nml_conjugate_quat", "nml/namespace/nml_cross_vec3_vec3", "nml/namespace/nml_decomposetransform_mat4_vec3_quat_vec3", "nml/namespace/nml_dot_quat_quat", "nml/namespace/nml_dot_vec2_vec2", "nml/namespace/nml_dot_vec3_vec3", "nml/namespace/nml_dot_vec4_vec4", "nml/namespace/nml_euleranglestoquat_vec3", "nml/namespace/nml_inverse_mat2", "nml/namespace/nml_inverse_mat3", "nml/namespace/nml_inverse_mat4", "nml/namespace/nml_lerp_float_float_float", "nml/namespace/nml_lookatlh_vec3_vec3_vec3", "nml/namespace/nml_lookatrh_vec3_vec3_vec3", "nml/namespace/nml_normalize_quat", "nml/namespace/nml_normalize_vec2", "nml/namespace/nml_normalize_vec3", "nml/namespace/nml_normalize_vec4", "nml/namespace/nml_operator_divide_mat2_float", "nml/namespace/nml_operator_divide_mat3_float", "nml/namespace/nml_operator_divide_mat4_float", "nml/namespace/nml_operator_divide_quat_float", "nml/namespace/nml_operator_divide_vec2_float", "nml/namespace/nml_operator_divide_vec3_float", "nml/namespace/nml_operator_divide_vec4_float", "nml/namespace/nml_operator_is_equal_mat2_mat2", "nml/namespace/nml_operator_is_equal_mat3_mat3", "nml/namespace/nml_operator_is_equal_mat4_mat4", "nml/namespace/nml_operator_is_equal_quat_quat", "nml/namespace/nml_operator_is_equal_vec2_vec2", "nml/namespace/nml_operator_is_equal_vec3_vec3", "nml/namespace/nml_operator_is_equal_vec4_vec4", "nml/namespace/nml_operator_is_not_equal_mat2_mat2", "nml/namespace/nml_operator_is_not_equal_mat3_mat3", "nml/namespace/nml_operator_is_not_equal_mat4_mat4", "nml/namespace/nml_operator_is_not_equal_quat_quat", "nml/namespace/nml_operator_is_not_equal_vec2_vec2", "nml/namespace/nml_operator_is_not_equal_vec3_vec3", "nml/namespace/nml_operator_is_not_equal_vec4_vec4", "nml/namespace/nml_operator_minus_mat2_mat2", "nml/namespace/nml_operator_minus_mat3_mat3", "nml/namespace/nml_operator_minus_mat4_mat4", "nml/namespace/nml_operator_minus_quat_quat", "nml/namespace/nml_operator_minus_vec2_vec2", "nml/namespace/nml_operator_minus_vec3_vec3", "nml/namespace/nml_operator_minus_vec4_vec4", "nml/namespace/nml_operator_plus_mat2_mat2", "nml/namespace/nml_operator_plus_mat3_mat3", "nml/namespace/nml_operator_plus_mat4_mat4", "nml/namespace/nml_operator_plus_quat_quat", "nml/namespace/nml_operator_plus_vec2_vec2", "nml/namespace/nml_operator_plus_vec3_vec3", "nml/namespace/nml_operator_plus_vec4_vec4", "nml/namespace/nml_operator_times_float_mat2", "nml/namespace/nml_operator_times_float_mat3", "nml/namespace/nml_operator_times_float_mat4", "nml/namespace/nml_operator_times_float_quat", "nml/namespace/nml_operator_times_float_vec2", "nml/namespace/nml_operator_times_float_vec3", "nml/namespace/nml_operator_times_float_vec4", "nml/namespace/nml_operator_times_mat2_float", "nml/namespace/nml_operator_times_mat2_mat2", "nml/namespace/nml_operator_times_mat2_vec2", "nml/namespace/nml_operator_times_mat3_float", "nml/namespace/nml_operator_times_mat3_mat3", "nml/namespace/nml_operator_times_mat3_vec3", "nml/namespace/nml_operator_times_mat4_float", "nml/namespace/nml_operator_times_mat4_mat4", "nml/namespace/nml_operator_times_mat4_vec4", "nml/namespace/nml_operator_times_quat_float", "nml/namespace/nml_operator_times_quat_quat", "nml/namespace/nml_operator_times_vec2_float", "nml/namespace/nml_operator_times_vec3_float", "nml/namespace/nml_operator_times_vec4_float", "nml/namespace/nml_ortholh_float_float_float_float_float_float", "nml/namespace/nml_orthorh_float_float_float_float_float_float", "nml/namespace/nml_perspectivelh_float_float_float_float", "nml/namespace/nml_perspectiverh_float_float_float_float", "nml/namespace/nml_quattoeulerangles_quat", "nml/namespace/nml_quattorotationmatrix_quat", "nml/namespace/nml_reflect_vec2_vec2", "nml/namespace/nml_reflect_vec3_vec3", "nml/namespace/nml_reflect_vec4_vec4", "nml/namespace/nml_refract_vec2_vec2_float", "nml/namespace/nml_refract_vec3_vec3_float", "nml/namespace/nml_refract_vec4_vec4_float", "nml/namespace/nml_rotate_float", "nml/namespace/nml_rotate_float_vec3", "nml/namespace/nml_rotationmatrixtoeulerangles_mat4", "nml/namespace/nml_rotationmatrixtoquat_mat4", "nml/namespace/nml_scale_vec2", "nml/namespace/nml_scale_vec3", "nml/namespace/nml_slerp_quat_quat_float", "nml/namespace/nml_to_string_mat2", "nml/namespace/nml_to_string_mat3", "nml/namespace/nml_to_string_mat4", "nml/namespace/nml_to_string_quat", "nml/namespace/nml_to_string_vec2", "nml/namespace/nml_to_string_vec3", "nml/namespace/nml_to_string_vec4", "nml/namespace/nml_todeg_float", "nml/namespace/nml_torad_float", "nml/namespace/nml_translate_vec2", "nml/namespace/nml_translate_vec3", "nml/namespace/nml_transpose_mat2", "nml/namespace/nml_transpose_mat3", "nml/namespace/nml_transpose_mat4", "nml/other/index", "nml/quaternion/index", "nml/quaternion/quat", "nml/quaternion/quat/constructor", "nml/quaternion/quat/constructor_float_float_float_float", "nml/quaternion/quat/constructor_floatptr", "nml/quaternion/quat/data", "nml/quaternion/quat/identity", "nml/quaternion/quat/length", "nml/quaternion/quat/operator_brackets_ref", "nml/quaternion/quat/operator_brackets_value", "nml/quaternion/quat/operator_divide_equal_float", "nml/quaternion/quat/operator_minus", "nml/quaternion/quat/operator_minus_equal_quat", "nml/quaternion/quat/operator_plus_equal_quat", "nml/quaternion/quat/operator_times_equal_float", "nml/quaternion/quat/operator_times_equal_quat", "nml/vector/index", "nml/vector/vec2", "nml/vector/vec2/constructor", "nml/vector/vec2/constructor_float", "nml/vector/vec2/constructor_float_float", "nml/vector/vec2/constructor_floatptr", "nml/vector/vec2/constructor_vec3", "nml/vector/vec2/constructor_vec4", "nml/vector/vec2/data", "nml/vector/vec2/length", "nml/vector/vec2/operator_brackets_ref", "nml/vector/vec2/operator_brackets_value", "nml/vector/vec2/operator_divide_equal_float", "nml/vector/vec2/operator_minus", "nml/vector/vec2/operator_minus_equal_vec2", "nml/vector/vec2/operator_plus_equal_vec2", "nml/vector/vec2/operator_times_equal_float", "nml/vector/vec3", "nml/vector/vec3/constructor", "nml/vector/vec3/constructor_float", "nml/vector/vec3/constructor_float_float_float", "nml/vector/vec3/constructor_float_vec2", "nml/vector/vec3/constructor_floatptr", "nml/vector/vec3/constructor_vec2_float", "nml/vector/vec3/constructor_vec4", "nml/vector/vec3/data", "nml/vector/vec3/length", "nml/vector/vec3/operator_brackets_ref", "nml/vector/vec3/operator_brackets_value", "nml/vector/vec3/operator_divide_equal_float", "nml/vector/vec3/operator_minus", "nml/vector/vec3/operator_minus_equal_vec3", "nml/vector/vec3/operator_plus_equal_vec3", "nml/vector/vec3/operator_times_equal_float", "nml/vector/vec4", "nml/vector/vec4/constructor", "nml/vector/vec4/constructor_float", "nml/vector/vec4/constructor_float_float_float_float", "nml/vector/vec4/constructor_float_float_vec2", "nml/vector/vec4/constructor_float_vec2_float", "nml/vector/vec4/constructor_float_vec3", "nml/vector/vec4/constructor_floatptr", "nml/vector/vec4/constructor_vec2_float_float", "nml/vector/vec4/constructor_vec2_vec2", "nml/vector/vec4/constructor_vec3_float", "nml/vector/vec4/data", "nml/vector/vec4/length", "nml/vector/vec4/operator_brackets_ref", "nml/vector/vec4/operator_brackets_value", "nml/vector/vec4/operator_divide_equal_float", "nml/vector/vec4/operator_minus", "nml/vector/vec4/operator_minus_equal_vec4", "nml/vector/vec4/operator_plus_equal_vec4", "nml/vector/vec4/operator_times_equal_float"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["getting_started/index.rst", "index.rst", "nml/index.rst", "nml/matrix/index.rst", "nml/matrix/mat2.rst", "nml/matrix/mat2/constructor.rst", "nml/matrix/mat2/constructor_float.rst", "nml/matrix/mat2/constructor_float_float_float_float.rst", "nml/matrix/mat2/constructor_float_float_vec2.rst", "nml/matrix/mat2/constructor_floatptr.rst", "nml/matrix/mat2/constructor_mat3.rst", "nml/matrix/mat2/constructor_mat4.rst", "nml/matrix/mat2/constructor_vec2_float_float.rst", "nml/matrix/mat2/constructor_vec2_vec2.rst", "nml/matrix/mat2/data.rst", "nml/matrix/mat2/det.rst", "nml/matrix/mat2/identity.rst", "nml/matrix/mat2/operator_brackets_ref.rst", "nml/matrix/mat2/operator_brackets_value.rst", "nml/matrix/mat2/operator_divide_equal_float.rst", "nml/matrix/mat2/operator_minus_equal_mat2.rst", "nml/matrix/mat2/operator_plus_equal_mat2.rst", "nml/matrix/mat2/operator_times_equal_float.rst", "nml/matrix/mat2/operator_times_equal_mat2.rst", "nml/matrix/mat3.rst", "nml/matrix/mat3/constructor.rst", "nml/matrix/mat3/constructor_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3.rst", "nml/matrix/mat3/constructor_floatptr.rst", "nml/matrix/mat3/constructor_mat4.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_vec3_vec3.rst", "nml/matrix/mat3/data.rst", "nml/matrix/mat3/det.rst", "nml/matrix/mat3/eigen.rst", "nml/matrix/mat3/identity.rst", "nml/matrix/mat3/operator_brackets_ref.rst", "nml/matrix/mat3/operator_brackets_value.rst", "nml/matrix/mat3/operator_divide_equal_float.rst", "nml/matrix/mat3/operator_minus_equal_mat3.rst", "nml/matrix/mat3/operator_plus_equal_mat3.rst", "nml/matrix/mat3/operator_times_equal_float.rst", "nml/matrix/mat3/operator_times_equal_mat3.rst", "nml/matrix/mat4.rst", "nml/matrix/mat4/constructor.rst", "nml/matrix/mat4/constructor_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4.rst", "nml/matrix/mat4/constructor_floatptr.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4.rst", "nml/matrix/mat4/data.rst", "nml/matrix/mat4/det.rst", "nml/matrix/mat4/identity.rst", "nml/matrix/mat4/operator_brackets_ref.rst", "nml/matrix/mat4/operator_brackets_value.rst", "nml/matrix/mat4/operator_divide_equal_float.rst", "nml/matrix/mat4/operator_minus_equal_mat4.rst", "nml/matrix/mat4/operator_plus_equal_mat4.rst", "nml/matrix/mat4/operator_times_equal_float.rst", "nml/matrix/mat4/operator_times_equal_mat4.rst", "nml/namespace/nml_conjugate_quat.rst", "nml/namespace/nml_cross_vec3_vec3.rst", "nml/namespace/nml_decomposetransform_mat4_vec3_quat_vec3.rst", "nml/namespace/nml_dot_quat_quat.rst", "nml/namespace/nml_dot_vec2_vec2.rst", "nml/namespace/nml_dot_vec3_vec3.rst", "nml/namespace/nml_dot_vec4_vec4.rst", "nml/namespace/nml_euleranglestoquat_vec3.rst", "nml/namespace/nml_inverse_mat2.rst", "nml/namespace/nml_inverse_mat3.rst", "nml/namespace/nml_inverse_mat4.rst", "nml/namespace/nml_lerp_float_float_float.rst", "nml/namespace/nml_lookatlh_vec3_vec3_vec3.rst", "nml/namespace/nml_lookatrh_vec3_vec3_vec3.rst", "nml/namespace/nml_normalize_quat.rst", "nml/namespace/nml_normalize_vec2.rst", "nml/namespace/nml_normalize_vec3.rst", "nml/namespace/nml_normalize_vec4.rst", "nml/namespace/nml_operator_divide_mat2_float.rst", "nml/namespace/nml_operator_divide_mat3_float.rst", "nml/namespace/nml_operator_divide_mat4_float.rst", "nml/namespace/nml_operator_divide_quat_float.rst", "nml/namespace/nml_operator_divide_vec2_float.rst", "nml/namespace/nml_operator_divide_vec3_float.rst", "nml/namespace/nml_operator_divide_vec4_float.rst", "nml/namespace/nml_operator_is_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_equal_quat_quat.rst", "nml/namespace/nml_operator_is_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_equal_vec4_vec4.rst", "nml/namespace/nml_operator_is_not_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_not_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_not_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_not_equal_quat_quat.rst", "nml/namespace/nml_operator_is_not_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_not_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_not_equal_vec4_vec4.rst", "nml/namespace/nml_operator_minus_mat2_mat2.rst", "nml/namespace/nml_operator_minus_mat3_mat3.rst", "nml/namespace/nml_operator_minus_mat4_mat4.rst", "nml/namespace/nml_operator_minus_quat_quat.rst", "nml/namespace/nml_operator_minus_vec2_vec2.rst", "nml/namespace/nml_operator_minus_vec3_vec3.rst", "nml/namespace/nml_operator_minus_vec4_vec4.rst", "nml/namespace/nml_operator_plus_mat2_mat2.rst", "nml/namespace/nml_operator_plus_mat3_mat3.rst", "nml/namespace/nml_operator_plus_mat4_mat4.rst", "nml/namespace/nml_operator_plus_quat_quat.rst", "nml/namespace/nml_operator_plus_vec2_vec2.rst", "nml/namespace/nml_operator_plus_vec3_vec3.rst", "nml/namespace/nml_operator_plus_vec4_vec4.rst", "nml/namespace/nml_operator_times_float_mat2.rst", "nml/namespace/nml_operator_times_float_mat3.rst", "nml/namespace/nml_operator_times_float_mat4.rst", "nml/namespace/nml_operator_times_float_quat.rst", "nml/namespace/nml_operator_times_float_vec2.rst", "nml/namespace/nml_operator_times_float_vec3.rst", "nml/namespace/nml_operator_times_float_vec4.rst", "nml/namespace/nml_operator_times_mat2_float.rst", "nml/namespace/nml_operator_times_mat2_mat2.rst", "nml/namespace/nml_operator_times_mat2_vec2.rst", "nml/namespace/nml_operator_times_mat3_float.rst", "nml/namespace/nml_operator_times_mat3_mat3.rst", "nml/namespace/nml_operator_times_mat3_vec3.rst", "nml/namespace/nml_operator_times_mat4_float.rst", "nml/namespace/nml_operator_times_mat4_mat4.rst", "nml/namespace/nml_operator_times_mat4_vec4.rst", "nml/namespace/nml_operator_times_quat_float.rst", "nml/namespace/nml_operator_times_quat_quat.rst", "nml/namespace/nml_operator_times_vec2_float.rst", "nml/namespace/nml_operator_times_vec3_float.rst", "nml/namespace/nml_operator_times_vec4_float.rst", "nml/namespace/nml_ortholh_float_float_float_float_float_float.rst", "nml/namespace/nml_orthorh_float_float_float_float_float_float.rst", "nml/namespace/nml_perspectivelh_float_float_float_float.rst", "nml/namespace/nml_perspectiverh_float_float_float_float.rst", "nml/namespace/nml_quattoeulerangles_quat.rst", "nml/namespace/nml_quattorotationmatrix_quat.rst", "nml/namespace/nml_reflect_vec2_vec2.rst", "nml/namespace/nml_reflect_vec3_vec3.rst", "nml/namespace/nml_reflect_vec4_vec4.rst", "nml/namespace/nml_refract_vec2_vec2_float.rst", "nml/namespace/nml_refract_vec3_vec3_float.rst", "nml/namespace/nml_refract_vec4_vec4_float.rst", "nml/namespace/nml_rotate_float.rst", "nml/namespace/nml_rotate_float_vec3.rst", "nml/namespace/nml_rotationmatrixtoeulerangles_mat4.rst", "nml/namespace/nml_rotationmatrixtoquat_mat4.rst", "nml/namespace/nml_scale_vec2.rst", "nml/namespace/nml_scale_vec3.rst", "nml/namespace/nml_slerp_quat_quat_float.rst", "nml/namespace/nml_to_string_mat2.rst", "nml/namespace/nml_to_string_mat3.rst", "nml/namespace/nml_to_string_mat4.rst", "nml/namespace/nml_to_string_quat.rst", "nml/namespace/nml_to_string_vec2.rst", "nml/namespace/nml_to_string_vec3.rst", "nml/namespace/nml_to_string_vec4.rst", "nml/namespace/nml_todeg_float.rst", "nml/namespace/nml_torad_float.rst", "nml/namespace/nml_translate_vec2.rst", "nml/namespace/nml_translate_vec3.rst", "nml/namespace/nml_transpose_mat2.rst", "nml/namespace/nml_transpose_mat3.rst", "nml/namespace/nml_transpose_mat4.rst", "nml/other/index.rst", "nml/quaternion/index.rst", "nml/quaternion/quat.rst", "nml/quaternion/quat/constructor.rst", "nml/quaternion/quat/constructor_float_float_float_float.rst", "nml/quaternion/quat/constructor_floatptr.rst", "nml/quaternion/quat/data.rst", "nml/quaternion/quat/identity.rst", "nml/quaternion/quat/length.rst", "nml/quaternion/quat/operator_brackets_ref.rst", "nml/quaternion/quat/operator_brackets_value.rst", "nml/quaternion/quat/operator_divide_equal_float.rst", "nml/quaternion/quat/operator_minus.rst", "nml/quaternion/quat/operator_minus_equal_quat.rst", "nml/quaternion/quat/operator_plus_equal_quat.rst", "nml/quaternion/quat/operator_times_equal_float.rst", "nml/quaternion/quat/operator_times_equal_quat.rst", "nml/vector/index.rst", "nml/vector/vec2.rst", "nml/vector/vec2/constructor.rst", "nml/vector/vec2/constructor_float.rst", "nml/vector/vec2/constructor_float_float.rst", "nml/vector/vec2/constructor_floatptr.rst", "nml/vector/vec2/constructor_vec3.rst", "nml/vector/vec2/constructor_vec4.rst", "nml/vector/vec2/data.rst", "nml/vector/vec2/length.rst", "nml/vector/vec2/operator_brackets_ref.rst", "nml/vector/vec2/operator_brackets_value.rst", "nml/vector/vec2/operator_divide_equal_float.rst", "nml/vector/vec2/operator_minus.rst", "nml/vector/vec2/operator_minus_equal_vec2.rst", "nml/vector/vec2/operator_plus_equal_vec2.rst", "nml/vector/vec2/operator_times_equal_float.rst", "nml/vector/vec3.rst", "nml/vector/vec3/constructor.rst", "nml/vector/vec3/constructor_float.rst", "nml/vector/vec3/constructor_float_float_float.rst", "nml/vector/vec3/constructor_float_vec2.rst", "nml/vector/vec3/constructor_floatptr.rst", "nml/vector/vec3/constructor_vec2_float.rst", "nml/vector/vec3/constructor_vec4.rst", "nml/vector/vec3/data.rst", "nml/vector/vec3/length.rst", "nml/vector/vec3/operator_brackets_ref.rst", "nml/vector/vec3/operator_brackets_value.rst", "nml/vector/vec3/operator_divide_equal_float.rst", "nml/vector/vec3/operator_minus.rst", "nml/vector/vec3/operator_minus_equal_vec3.rst", "nml/vector/vec3/operator_plus_equal_vec3.rst", "nml/vector/vec3/operator_times_equal_float.rst", "nml/vector/vec4.rst", "nml/vector/vec4/constructor.rst", "nml/vector/vec4/constructor_float.rst", "nml/vector/vec4/constructor_float_float_float_float.rst", "nml/vector/vec4/constructor_float_float_vec2.rst", "nml/vector/vec4/constructor_float_vec2_float.rst", "nml/vector/vec4/constructor_float_vec3.rst", "nml/vector/vec4/constructor_floatptr.rst", "nml/vector/vec4/constructor_vec2_float_float.rst", "nml/vector/vec4/constructor_vec2_vec2.rst", "nml/vector/vec4/constructor_vec3_float.rst", "nml/vector/vec4/data.rst", "nml/vector/vec4/length.rst", "nml/vector/vec4/operator_brackets_ref.rst", "nml/vector/vec4/operator_brackets_value.rst", "nml/vector/vec4/operator_divide_equal_float.rst", "nml/vector/vec4/operator_minus.rst", "nml/vector/vec4/operator_minus_equal_vec4.rst", "nml/vector/vec4/operator_plus_equal_vec4.rst", "nml/vector/vec4/operator_times_equal_float.rst"], "indexentries": {}, "objects": {}, "objnames": {}, "objtypes": {}, "terms": {"": [4, 14, 24, 37, 48, 68, 167, 187, 191, 203, 210, 219, 227, 236, 247], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "000000": [5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 87, 88, 90, 91, 96, 97, 98, 100, 101, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 188, 189, 190, 192, 194, 198, 199, 200, 204, 205, 206, 207, 208, 209, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 255], "000000f": 85, "000000i": [80, 120, 167, 188, 192, 194], "000000j": [80, 167, 188, 192, 194, 200], "000000k": [80, 167, 188, 192, 194], "000300": [154, 155], "010000": 119, "030009": [154, 155], "03f": [154, 155], "050000": [152, 153], "061309": [90, 91], "070000i": 199, "0f": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "0i": [188, 192], "0j": [188, 192], "0k": [188, 192], "1": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "10": [11, 20, 21, 32, 38, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 87, 88, 98, 105, 112, 119, 124, 125, 126, 133, 142, 144, 152, 153, 166, 173, 184, 253], "100": [154, 155], "100000": [152, 153], "100000k": 198, "1024": 126, "1046": 126, "11": [11, 32, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 88, 98, 105, 112, 119, 133, 144, 173, 184], "12": [11, 32, 41, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 88, 98, 105, 111, 112, 119, 125, 126, 129, 130, 131, 132, 133, 137, 138, 141, 144, 151, 173, 184], "125000i": [99, 196, 197], "128": [125, 126], "13": [11, 32, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 88, 98, 105, 112, 119, 133, 144, 173, 184], "14": [11, 32, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 88, 98, 105, 112, 119, 125, 126, 133, 144, 173, 184, 254], "14159": 179, "14159265358979323846f": [164, 165], "144": [125, 126], "15": [11, 32, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 88, 98, 105, 112, 119, 132, 133, 141, 144, 173, 184], "16": [11, 32, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 88, 98, 105, 112, 119, 124, 125, 126, 133, 144, 154, 155, 173, 184], "16384": 126, "16414": 126, "17": [74, 75, 143, 146], "18": [44, 45, 46, 74, 75, 76, 125, 126, 132, 133, 141, 144], "180": [178, 179], "182574": 95, "182574i": 92, "187500": [143, 148, 201], "19": [130, 166], "2": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 187, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "20": [44, 45, 71, 74, 75, 76, 126, 166], "2048": 126, "2072": 126, "21": [132, 133, 141, 144], "22": [74, 75, 76, 126], "23607": [93, 211], "24": [74, 75, 76, 126, 132, 133, 141, 144], "24f": [148, 198, 199, 201], "25": [41, 71, 146, 191, 195], "250": 71, "250000": 143, "250000i": [78, 174, 189, 190], "250000j": [99, 196, 197], "250000k": [120, 127, 134, 147], "256": [125, 126], "25f": [78, 90, 91, 92, 99, 106, 113, 119, 120, 127, 134, 140, 143, 146, 147, 148, 174, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201], "26": [74, 75, 76, 125, 126], "260000j": 198, "267261": 94, "27": [132, 133, 141, 144], "274": [125, 126], "28": [74, 75, 76, 126, 146], "2d": [24, 164, 168, 180], "2f": 119, "3": [7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 86, 87, 88, 90, 91, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 164, 165, 170, 171, 172, 173, 176, 177, 179, 181, 182, 183, 184, 187, 190, 191, 194, 195, 199, 208, 209, 212, 216, 217, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "30": [74, 75, 76, 126, 133, 144, 166], "313677": [90, 91], "32": [69, 74, 75, 76, 125, 126], "322876": [161, 162, 163], "32768": 126, "32800": 126, "33": [133, 144], "333333": 87, "34": [74, 75], "358760": [154, 155], "36": [133, 144, 146], "365148": 95, "365148j": 92, "36931": [92, 193], "375000k": [99, 196, 197], "39": [133, 144], "3d": [48, 157, 165, 166, 169, 181, 219], "4": [7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 86, 87, 88, 90, 91, 95, 96, 97, 98, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 118, 119, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 151, 159, 160, 162, 163, 167, 170, 171, 172, 173, 177, 182, 183, 184, 187, 190, 194, 195, 209, 216, 217, 218, 226, 229, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "400000k": 199, "4096": 126, "4122": 126, "415574": [154, 155], "42": [133, 144], "44": [125, 126], "443607": [90, 91], "447214": 93, "45": [133, 144], "465000i": [148, 201], "47723": [95, 248], "48": [133, 144], "480": 69, "5": [10, 11, 17, 20, 21, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 87, 88, 90, 91, 95, 97, 98, 104, 105, 110, 111, 112, 116, 117, 118, 119, 121, 122, 123, 129, 130, 132, 133, 141, 142, 143, 144, 146, 172, 173, 183, 184, 191, 194, 195, 233, 234, 248, 249, 253, 254], "500000": [19, 43, 73, 85, 86, 88, 96, 97, 98, 99, 100, 101, 102, 118, 119, 122, 123, 152, 153, 162, 163, 170, 196, 197, 214, 231, 251], "500000i": [85, 127, 170, 200], "500000j": [78, 85, 120, 127, 134, 147, 170, 174, 189, 190], "500000k": [85, 170, 200], "512": 126, "532": 126, "534522": 94, "547723": 95, "547723k": 92, "562500": 146, "570000i": 198, "570796": 156, "570796f": 85, "598269": [90, 91], "5f": [78, 89, 90, 91, 92, 99, 106, 113, 118, 119, 120, 122, 123, 127, 134, 140, 143, 146, 147, 148, 161, 162, 163, 170, 174, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201], "6": [10, 11, 17, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 87, 88, 97, 98, 104, 105, 111, 112, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 144, 149, 150, 151, 172, 173, 183, 184, 216, 217, 233, 234, 235, 253, 254, 255], "633724": [90, 91], "64": [69, 125, 126], "65f": [148, 198, 199, 201], "666667": 87, "692500j": [148, 201], "7": [10, 11, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 87, 88, 97, 98, 104, 105, 111, 112, 118, 119, 122, 123, 129, 130, 132, 133, 141, 142, 143, 144, 172, 173, 183, 184], "707107": [90, 91], "730297": [92, 95], "740000j": 199, "74166": [94, 228], "75": [191, 195], "750000": [119, 140, 146], "750000i": [134, 147], "750000k": [78, 174, 189, 190], "75f": [78, 92, 99, 106, 113, 120, 127, 134, 147, 148, 174, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201], "78": [125, 126], "785f": [154, 155], "8": [10, 11, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 87, 88, 97, 98, 104, 105, 111, 112, 118, 119, 123, 124, 125, 126, 132, 133, 141, 142, 144, 172, 173, 183, 184, 233, 253, 254, 255], "800000": 119, "800000k": [148, 201], "801784": 94, "812500": 146, "8192": 126, "8220": 126, "82f": [148, 198, 199, 201], "875000": 140, "894427": 93, "896221": [90, 91], "9": [10, 11, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 87, 88, 97, 98, 104, 105, 111, 112, 118, 119, 131, 132, 133, 136, 137, 138, 141, 144, 150, 151, 154, 155, 172, 173, 183, 184, 234, 254], "90": [164, 165], "949747": [90, 91], "999998": 166, "99f": 119, "In": 0, "It": 0, "Or": 0, "The": [4, 15, 19, 20, 21, 22, 23, 24, 38, 39, 43, 44, 45, 46, 47, 48, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 178, 179, 180, 181, 182, 183, 184, 187, 193, 196, 197, 198, 199, 200, 201, 203, 211, 214, 215, 216, 217, 218, 219, 228, 231, 232, 233, 234, 235, 236, 248, 251, 252, 253, 254, 255], "_a": 187, "_b": 187, "_bi": 189, "_c": 187, "_cj": 189, "_d": 187, "_dk": 189, "_mat": [4, 24], "_ptr": [4, 24, 48, 187, 203, 219, 236], "_valu": [4, 24, 48, 203, 219, 236], "_w": [48, 236], "_ww": 48, "_wx": 48, "_wy": 48, "_wz": 48, "_x": [4, 24, 48, 203, 219, 236], "_xw": 48, "_xx": [4, 24, 48], "_xy": [4, 24, 48, 219, 236], "_xyz": [203, 236], "_xyzw": [203, 219], "_xz": [24, 48], "_y": [4, 24, 48, 203, 219, 236], "_yi": [4, 24, 48], "_yw": 48, "_yx": [4, 24, 33, 48], "_yz": [24, 48, 219, 236], "_yzw": 236, "_z": [24, 48, 219, 236], "_zw": [48, 236], "_zx": [24, 48], "_zy": [24, 48], "_zz": [24, 48], "abort": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "access": [14, 37, 68, 191, 210, 227, 247], "accord": [24, 48, 164, 165, 168, 169, 180, 181], "accordingli": 202, "add": [1, 4, 21, 24, 45, 48, 75, 187, 199, 203, 217, 219, 234, 236, 254], "add_subdirectori": 0, "address": [14, 37, 68, 191, 210, 227, 247], "adj": [87, 88], "after": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "an": [4, 17, 18, 24, 41, 42, 48, 71, 72, 89, 170, 178, 179, 185, 187, 194, 195, 203, 212, 213, 219, 229, 230, 236, 249, 250], "angl": [24, 48, 85, 156, 166, 178, 179, 185, 187, 202, 219], "ar": [4, 24, 48, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 182, 183, 184, 187, 202, 203, 219, 236], "arrai": [9, 24, 31, 59, 190, 207, 224, 243], "asin": 166, "aspectratio": 48, "atan2": 166, "avail": [0, 1], "axi": [48, 202], "b": [10, 11, 18, 20, 21, 23, 32, 42, 44, 45, 47, 72, 74, 75, 77, 78, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 165, 167, 174, 182, 183, 184, 185, 187, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 208, 209, 211, 213, 216, 217, 219, 226, 228, 230, 233, 234, 236, 248, 250, 253, 254], "begin": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 180, 181, 182, 183, 184, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 251, 252, 253, 254, 255], "behaviour": [86, 87, 88], "between": [4, 19, 20, 21, 22, 23, 24, 43, 44, 45, 46, 47, 48, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 170, 185, 187, 196, 198, 199, 200, 201, 203, 214, 216, 217, 218, 219, 231, 233, 234, 235, 236, 251, 253, 254, 255], "bi": [78, 92, 99, 106, 113, 120, 127, 134, 147, 148, 187, 196, 197, 198, 199, 200, 201], "bmatrix": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 180, 181, 182, 183, 184, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 251, 252, 253, 254, 255], "bool": [4, 24, 48, 187, 203, 219, 236], "bottom": 48, "built": 0, "c": [1, 18, 42, 72, 77, 79, 81, 82, 83, 84, 87, 88, 92, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 139, 140, 142, 143, 145, 146, 147, 148, 157, 158, 159, 160, 161, 162, 163, 165, 167, 174, 187, 191, 193, 194, 195, 196, 198, 199, 200, 201, 213, 230, 250], "calcul": [15, 19, 20, 21, 22, 23, 38, 39, 43, 44, 45, 46, 47, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 178, 179, 180, 181, 182, 183, 184, 193, 196, 197, 198, 199, 200, 201, 211, 214, 215, 216, 217, 218, 228, 231, 232, 233, 234, 235, 248, 251, 252, 253, 254, 255], "call": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "can": [0, 39, 202], "case": [161, 162, 163], "cdot": [81, 82, 83, 84, 90, 91, 158, 159, 160, 161, 162, 163], "char": [14, 37, 68, 191, 210, 227, 247], "check": [86, 87, 88], "cj": [78, 92, 99, 106, 113, 120, 127, 134, 147, 148, 187, 196, 197, 198, 199, 200, 201], "clamp": 166, "class": [2, 3, 186, 202], "clone": 0, "cmake": 1, "co": [85, 164, 165], "code": 0, "column": [4, 24, 48, 182, 183, 184], "com": 0, "comput": 1, "conj": 78, "conjug": 187, "const": [4, 24, 48, 185, 187, 203, 219, 236], "construct": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 187, 188, 189, 190, 203, 204, 205, 206, 207, 208, 209, 219, 220, 221, 222, 223, 224, 225, 226, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], "constructor": [2, 3, 186, 202], "convers": [85, 156, 157, 166, 167], "convert": 156, "cout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "cross": 219, "current": [4, 19, 20, 21, 22, 23, 24, 43, 44, 45, 46, 47, 48, 73, 74, 75, 76, 77, 187, 196, 197, 198, 199, 200, 201, 203, 214, 215, 216, 217, 218, 219, 231, 232, 233, 234, 235, 236, 251, 252, 253, 254, 255], "d": [18, 42, 72, 77, 81, 87, 88, 92, 99, 106, 113, 120, 127, 134, 145, 147, 148, 157, 165, 167, 174, 187, 191, 193, 194, 195, 196, 198, 199, 200, 201, 230, 250], "data": [4, 9, 24, 31, 48, 59, 187, 190, 203, 207, 219, 224, 236, 243], "decompos": [48, 80], "decomposetransform": 48, "decomposit": 80, "degre": [178, 185], "descript": [4, 24, 48, 185, 187, 203, 219, 236], "det": [4, 24, 48, 86, 87, 88], "determin": [4, 15, 24, 38, 48, 69, 86, 87, 88], "differ": [4, 20, 24, 44, 48, 74, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 187, 198, 203, 216, 219, 233, 236, 253], "direct": [92, 93, 94, 95, 158, 159, 160, 161, 162, 163, 187, 203, 219, 236], "directori": 0, "divid": [4, 19, 24, 43, 48, 73, 187, 196, 203, 214, 219, 231, 236, 251], "dk": [78, 92, 99, 106, 113, 120, 127, 134, 147, 148, 187, 196, 197, 198, 199, 200, 201], "doe": [86, 87, 88, 158, 159, 160, 161, 162, 163, 165], "dot": [79, 187, 203, 219, 236], "e": [72, 77, 87, 88, 145, 157, 165, 195, 250], "ec4": 253, "eigen": 24, "eigenvalu": [24, 39], "eigenvector": [24, 39], "eight": [37, 68], "element": [4, 14, 24, 37, 48, 68, 187, 191, 203, 210, 219, 227, 236, 247], "eleven": 68, "els": [4, 17, 18, 24, 41, 42, 48, 71, 72, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 166, 167, 187, 194, 195, 203, 212, 213, 219, 229, 230, 236, 249, 250], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 180, 181, 182, 183, 184, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 251, 252, 253, 254, 255], "endl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "entir": 0, "equal": [103, 104, 105, 106, 107, 108, 109], "error": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "etc": 202, "euler": [85, 156, 166, 187, 202, 219], "eulerangl": 166, "euleranglestoquat": 187, "except": [4, 17, 18, 24, 41, 42, 48, 71, 72, 187, 194, 195, 203, 212, 213, 219, 229, 230, 236, 249, 250], "f": [77, 87, 88, 145, 157, 165], "factor": [24, 48, 168, 169], "fals": [4, 24, 48, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 187, 203, 219, 236], "far": 48, "fifteen": 68, "file": [4, 24, 48, 185, 187, 203, 219, 236], "first": [4, 24, 39, 48, 187, 203, 219, 236], "five": [37, 68], "float": [4, 18, 24, 42, 48, 72, 185, 187, 203, 219, 236], "format": [4, 24, 48, 171, 172, 173, 174, 175, 176, 177, 187, 203, 219, 236], "forward": [90, 91], "found": 39, "four": [37, 68], "fourteen": 68, "fourth": [48, 187, 236], "fovi": 48, "frac": [19, 43, 73, 80, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 152, 153, 154, 155, 167, 178, 179, 196, 214, 231, 251], "from": [4, 9, 20, 24, 31, 44, 48, 59, 74, 85, 156, 157, 166, 167, 187, 190, 198, 203, 207, 216, 219, 224, 233, 236, 243, 253], "function": [1, 2, 3, 86, 87, 88, 158, 159, 160, 161, 162, 163, 165, 186, 202], "g": [77, 87, 88, 145, 157, 165], "get": 1, "git": 0, "github": [0, 1], "graphic": 1, "gt": 167, "h": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "hand": [48, 90, 91, 152, 153, 154, 155], "header": [0, 4, 24, 48, 185, 187, 203, 219, 236], "here": 39, "http": 0, "i": [0, 1, 4, 15, 17, 18, 19, 20, 21, 22, 23, 24, 38, 41, 42, 43, 44, 45, 46, 47, 48, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 164, 165, 166, 167, 168, 169, 174, 178, 179, 180, 181, 182, 183, 184, 187, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 211, 212, 213, 214, 215, 216, 217, 218, 219, 228, 229, 230, 231, 232, 233, 234, 235, 236, 248, 249, 250, 251, 252, 253, 254, 255], "ident": [4, 24, 39, 48, 80, 103, 104, 105, 106, 107, 108, 109, 187, 203, 219, 236], "incid": [158, 159, 160, 161, 162, 163, 203, 219, 236], "includ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "index": [1, 4, 24, 48, 187, 203, 219, 236], "indic": [161, 162, 163, 203, 219, 236], "inequ": [110, 111, 112, 113, 114, 115, 116], "inf": [86, 87], "instanc": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "interpol": [89, 170, 185, 187], "interpolationvalu": [185, 187], "inva": [86, 87, 88], "invb": [86, 87, 88], "invers": [4, 23, 24, 47, 48, 77, 139, 142, 145], "invert": [86, 87, 88], "ior": [203, 219, 236], "iostream": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "j": [77, 85, 88, 92, 99, 120, 127, 134, 145, 147, 148, 174, 187, 190, 196, 198, 199, 200, 201], "k": [77, 85, 88, 92, 99, 120, 127, 134, 145, 147, 148, 161, 162, 163, 174, 187, 190, 196, 198, 199, 200, 201], "l": [77, 88, 145], "left": [48, 80, 90, 92, 93, 94, 95, 154], "length": [92, 93, 94, 95, 187, 203, 219, 236], "lerp": 185, "lh": [4, 24, 48, 187, 203, 219, 236], "librari": 0, "linear": [89, 170, 185, 187], "look": [48, 90, 91], "lookatlh": 48, "lookatrh": 48, "lt": 166, "m": [5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 88, 90, 91, 145, 152, 153, 154, 155, 157, 164, 165, 166, 167, 168, 169, 171, 172, 173, 180, 181], "main": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "major": [4, 24, 48], "mat": [4, 24, 48, 187, 219], "mat2": [1, 2, 3], "mat3": [1, 2, 3, 4], "mat4": [0, 1, 2, 3, 4, 24, 187, 219], "matrix": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 80, 86, 87, 88, 90, 91, 152, 153, 154, 155, 156, 157, 164, 165, 166, 167, 168, 169, 180, 181, 187, 219], "method": 39, "modul": 1, "multipl": 202, "multipli": [4, 22, 23, 24, 46, 47, 48, 76, 77, 187, 200, 201, 203, 218, 219, 235, 236, 255], "must": 24, "n": [77, 88, 145, 203, 219, 236], "name": [0, 4, 24, 48, 185, 187, 203, 219, 236], "namespac": [1, 2, 3, 186, 202], "nan": 88, "need": 0, "neg": [187, 197, 203, 215, 219, 232, 236, 252], "neq": [110, 111, 112, 113, 114, 115, 116], "nine": 68, "nml": [4, 5, 6, 7, 9, 14, 15, 24, 25, 26, 27, 31, 37, 38, 39, 48, 49, 50, 51, 59, 68, 69, 187, 188, 189, 190, 191, 193, 194, 195, 203, 204, 205, 206, 207, 210, 211, 212, 213, 219, 220, 221, 222, 224, 227, 228, 229, 230, 236, 237, 238, 239, 243, 247, 248, 249, 250], "norm": [90, 91, 92, 93, 95], "normal": [156, 157, 158, 159, 160, 161, 162, 163, 165, 187, 193, 203, 211, 219, 228, 236, 248], "null": [86, 87, 88], "nutshel": 0, "o": [77, 88, 145], "object": 202, "one": 0, "onli": 0, "oper": [2, 3, 186, 202], "orthograph": [48, 152, 153], "ortholh": 48, "orthorh": 48, "other": [1, 2, 4, 24, 48, 89, 178, 179, 187, 203, 219, 236], "otherwis": [161, 162, 163], "out": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "out_of_rang": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "p": [77, 88, 145], "page": 1, "pair": 24, "path": 0, "path_to_nml": 0, "perspect": [48, 154, 155], "perspectivelh": 48, "perspectiverh": 48, "pi": [164, 165, 178, 179], "point": 202, "pointer": [4, 9, 14, 24, 31, 37, 48, 59, 68, 187, 190, 191, 203, 207, 210, 219, 224, 227, 236, 243, 247], "possibl": 0, "product": [4, 22, 23, 24, 46, 47, 48, 76, 77, 79, 81, 82, 83, 84, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 187, 200, 201, 203, 218, 219, 235, 236, 255], "project": [1, 48, 152, 153, 154, 155], "project_nam": 0, "public": 0, "q": [85, 156, 157, 167, 174, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200], "qua": [48, 187, 219], "quat": [1, 2, 48, 186, 219], "quaternion": [1, 2, 48, 78, 80, 85, 156, 157, 167, 187, 188, 189, 190, 191, 192, 193, 219], "quattoeulerangl": 219, "quattorotationmatrix": 48, "quotient": [4, 19, 24, 43, 48, 73, 96, 97, 98, 99, 100, 101, 102, 187, 196, 203, 214, 219, 231, 236, 251], "radian": [24, 48, 156, 164, 165, 166, 179, 185, 187, 219], "rang": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "ratio": [161, 162, 163, 203, 219, 236], "realup": [90, 91], "refer": [4, 17, 18, 24, 41, 42, 48, 71, 72, 187, 194, 203, 212, 219, 229, 236, 249], "reflect": [203, 219, 236], "refract": [203, 219, 236], "replac": 0, "repres": [156, 166, 202, 219], "result": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "return": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "rh": [4, 24, 48, 187, 203, 219, 236], "right": [48, 80, 90, 91, 92, 93, 94, 95, 155], "rotat": [24, 48, 156, 157, 166, 167, 187, 219], "rotationangl": [164, 165], "rotationmatrix": 80, "rotationmatrixtoeulerangl": 219, "rotationmatrixtoquat": [80, 187], "row": [4, 24, 48, 182, 183, 184], "same": [92, 93, 94, 95, 187, 203, 219, 236], "sampl": 0, "scalar": [4, 19, 22, 24, 43, 46, 48, 73, 76, 89, 96, 97, 98, 99, 100, 101, 102, 131, 132, 133, 134, 135, 136, 137, 138, 141, 144, 147, 149, 150, 151, 185, 187, 196, 200, 201, 202, 203, 214, 218, 219, 231, 235, 236, 251, 255], "scale": [24, 48], "scriptsiz": 69, "search": 1, "second": [4, 24, 39, 48, 187, 203, 219, 236], "seven": [37, 68], "should": [158, 159, 160, 161, 162, 163, 165, 202, 203, 219, 236], "sin": [85, 164, 165], "six": [37, 68], "size": [14, 37, 68, 191, 210, 227, 247], "size_t": [4, 24, 48, 187, 203, 219, 236], "sizeof": [14, 37, 68, 191, 210, 227, 247], "slerp": 187, "small": [38, 77, 88, 103, 104, 105, 110, 111, 112, 145], "sourc": 0, "spheric": [170, 187], "sqrt": [161, 162, 163, 167, 193, 211, 228, 248], "start": 1, "static": [0, 2, 3, 186], "std": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "string": [4, 24, 48, 187, 203, 219, 236], "substract": [4, 20, 24, 44, 48, 74, 187, 198, 203, 216, 219, 233, 236, 253], "sum": [4, 21, 24, 45, 48, 75, 124, 125, 126, 127, 128, 129, 130, 187, 199, 203, 217, 219, 234, 236, 254], "symmetr": [24, 39], "t": [87, 88, 182, 183, 184], "take": [14, 37, 68, 191, 210, 227, 247], "tan": [154, 155], "target_include_directori": 0, "target_link_librari": 0, "team": 0, "ten": 68, "termin": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "text": [161, 162, 163], "thi": [15, 19, 20, 21, 22, 23, 38, 43, 44, 45, 46, 47, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 178, 179, 180, 181, 182, 183, 184, 193, 196, 197, 198, 199, 200, 201, 211, 214, 215, 216, 217, 218, 228, 231, 232, 233, 234, 235, 248, 251, 252, 253, 254, 255], "third": [24, 48, 187, 219, 236], "thirteen": 68, "three": [14, 24, 37, 39, 68, 191, 247], "throw": [4, 17, 18, 24, 41, 42, 48, 71, 72, 187, 194, 195, 203, 212, 213, 219, 229, 230, 236, 249, 250], "time": [79, 90, 91], "tini": [47, 142], "to_str": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 255], "todeg": 185, "top": 48, "torad": [166, 185], "trace": 167, "transform": 48, "translat": [24, 48], "translationvector": [180, 181], "transpos": [4, 24, 48], "true": [4, 24, 48, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 187, 203, 219, 236], "twelv": 68, "two": [4, 14, 20, 21, 23, 24, 37, 44, 45, 47, 48, 68, 74, 75, 77, 79, 81, 82, 83, 84, 89, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 139, 142, 145, 148, 170, 185, 187, 191, 198, 199, 203, 216, 217, 219, 227, 233, 234, 236, 247, 253, 254], "type": [4, 24, 48, 187, 203, 219, 236], "undefin": [86, 87, 88], "under": [4, 24, 48, 171, 172, 173, 174, 175, 176, 177, 187, 203, 219, 236], "up": 48, "us": [1, 39, 202], "v": [85, 156, 166, 175, 176, 177, 204, 205, 206, 207, 210, 212, 213, 214, 215, 218, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255], "valu": [89, 170, 185, 187, 195, 203, 213, 219, 230, 236, 250], "varepsilon": 166, "variabl": [2, 3, 186, 202], "variou": 185, "vec": [187, 203, 219, 236], "vec2": [0, 1, 2, 4, 17, 18, 24, 202, 219, 236], "vec3": [0, 1, 2, 24, 41, 42, 48, 187, 202, 203, 236], "vec4": [1, 2, 48, 71, 72, 202, 203, 219], "vector": [1, 2, 24, 48, 80, 158, 159, 160, 161, 162, 163, 165, 180, 181, 203, 204, 205, 206, 207, 208, 209, 210, 211, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248], "view": [48, 90, 91], "void": 48, "w": [48, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 84, 88, 95, 98, 102, 105, 109, 112, 116, 119, 123, 126, 130, 133, 137, 144, 145, 146, 151, 160, 163, 173, 177, 184, 236, 247, 248, 249, 250, 251, 252, 253, 254, 255], "wai": [15, 19, 20, 21, 22, 23, 38, 43, 44, 45, 46, 47, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 178, 179, 180, 181, 182, 183, 184, 193, 196, 197, 198, 199, 200, 201, 211, 214, 215, 216, 217, 218, 228, 231, 232, 233, 234, 235, 248, 251, 252, 253, 254, 255], "what": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "where": [4, 24, 48, 182, 183, 184], "x": [4, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "y": [4, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "z": [24, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 87, 88, 90, 91, 94, 95, 97, 98, 101, 102, 104, 105, 108, 109, 111, 112, 115, 116, 118, 119, 122, 123, 125, 126, 129, 130, 132, 133, 136, 137, 141, 142, 143, 144, 145, 146, 150, 151, 159, 160, 162, 163, 165, 166, 167, 169, 172, 173, 176, 177, 181, 183, 184, 219, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]}, "titles": ["Getting started", "nml - Nutshell Mathematics Library", "nml", "Matrix", "mat2", "mat2: mat2()", "mat2: mat2(float _value)", "mat2: mat2(float _xx, float _xy, float _yx, float _yy)", "mat2: mat2(float _xx, float _xy, const nml::vec2&amp; _y)", "mat2: mat2(const float* _ptr)", "mat2: mat2(const nml::mat3&amp; _mat)", "mat2: mat2(const nml::mat4&amp; _mat)", "mat2: mat2(const nml::vec2&amp; _x, float _yx, float _yy)", "mat2: mat2(const nml::vec2&amp; _x, const nml::vec2&amp; _y)", "mat2: float* data()", "mat2: float det() const", "mat2: nml::mat2 nml::mat2::identity()", "mat2: nml::mat2&amp; operator[](size_t index)", "mat2: const nml::mat2&amp; operator[](size_t index) const", "mat2: nml::mat2&amp; operator/=(const float other)", "mat2: nml::mat2&amp; operator-=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator+=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator*=(const float other)", "mat2: nml::mat2&amp; operator*=(const nml::mat2&amp; other)", "mat3", "mat3: mat3()", "mat3: mat3(float _value)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, const nml::vec3&amp; _z)", "mat3: mat3(float _xx, float _xy, float _xz, const nml::vec3&amp; _y, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, const nml::vec3&amp; _y, const nml::vec3&amp; _z)", "mat3: mat3(const float* _ptr)", "mat3: mat3(const nml::mat4&amp; _mat)", "mat3: mat3(const nml::vec3&amp; _x, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(const nml::vec3&amp; _x, float _yx, float _yy, float _yz, const nml::vec3&amp; _z)", "mat3: mat3(const nml::vec3&amp; _x, const nml::vec3&amp; _y, float _zx, float _zy, float _zz)", "mat3: mat3(const nml::vec3&amp; _x, const nml::vec3&amp; _y, const nml::vec3&amp; _z)", "mat3: float* data()", "mat3: float det() const", "mat3: std::array&lt;std::pair&lt;float, vec3&gt;, 3&gt; eigen() const", "mat3: nml::mat3 nml::mat3::identity()", "mat3: nml::mat3&amp; operator[](size_t index)", "mat3: const nml::mat3&amp; operator[](size_t index) const", "mat3: nml::mat3&amp; operator/=(const float other)", "mat3: nml::mat3&amp; operator-=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator+=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator*=(const float other)", "mat3: nml::mat3&amp; operator*=(const nml::mat3&amp; other)", "mat4", "mat4: mat4()", "mat4: mat4(float _value)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(const float* _ptr)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)", "mat4: float* data()", "mat4: float det() const", "mat4: nml::mat4 nml::mat4::identity()", "mat4: nml::mat4&amp; operator[](size_t index)", "mat4: const nml::mat4&amp; operator[](size_t index) const", "mat4: nml::mat4&amp; operator/=(const float other)", "mat4: nml::mat4&amp; operator-=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator+=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator*=(const float other)", "mat4: nml::mat4&amp; operator*=(const nml::mat4&amp; other)", "nml::quat nml::conjugate(const nml::quat&amp; qua)", "nml::vec3 nml::cross(const nml::vec3&amp; a, const nml::vec3&amp; b)", "void nml::decomposeTransform(const nml::mat4&amp; transform, nml::vec3&amp; translation, nml::quat&amp; rotation, nml::vec3&amp; scale)", "float nml::dot(const nml::quat&amp; a, const nml::quat&amp; b)", "float nml::dot(const nml::vec2&amp; a, const nml::vec2&amp; b)", "float nml::dot(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec4&amp; a, const nml::vec4&amp; b)", "nml::quat nml::eulerAnglesToQuat(const nml::vec3&amp; vec)", "nml::mat2 inverse(const nml::mat2&amp; mat)", "nml::mat3 inverse(const nml::mat3&amp; mat)", "nml::mat4 inverse(const nml::mat4&amp; mat)", "float nml::lerp(const float&amp; a, const float&amp; b, const float interpolationValue)", "nml::mat4 lookAtLH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::mat4 lookAtRH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::quat nml::normalize(const nml::quat&amp; qua)", "nml::vec2 nml::normalize(const nml::vec2&amp; vec)", "nml::vec3 nml::normalize(const nml::vec3&amp; vec)", "nml::vec4 nml::normalize(const nml::vec4&amp; vec)", "nml::mat2 operator/(nml::mat2 lhs, const float rhs)", "nml::mat3 operator/(nml::mat3 lhs, const float rhs)", "nml::mat4 operator/(nml::mat4 lhs, const float rhs)", "nml::quat operator/(nml::quat lhs, const float rhs)", "nml::vec2 operator/(nml::vec2 lhs, const float rhs)", "nml::vec3 operator/(nml::vec3 lhs, const float rhs)", "nml::vec4 operator/(nml::vec4 lhs, const float rhs)", "bool operator==(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator==(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator==(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator==(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator==(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator==(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator==(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "bool operator!=(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator!=(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator!=(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator!=(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator!=(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator!=(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator!=(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator-(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator+(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(float lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator*(float lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator*(float lhs, const nml::mat4&amp; rhs)", "nml::quat operator*(float lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(float lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator*(float lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator*(float lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(nml::mat2 lhs, const float rhs)", "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2&amp; rhs)", "nml::mat3 operator*(nml::mat3 lhs, const float rhs)", "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3&amp; rhs)", "nml::mat4 operator*(nml::mat4 lhs, const float rhs)", "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4&amp; rhs)", "nml::quat operator*(nml::quat lhs, const float rhs)", "nml::quat operator*(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(nml::vec2 lhs, const float rhs)", "nml::vec3 operator*(nml::vec3 lhs, const float rhs)", "nml::vec4 operator*(nml::vec4 lhs, const float rhs)", "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::vec3 nml::quatToEulerAngles(const nml::quat&amp; qua)", "nml::mat4 nml::quatToRotationMatrix(const nml::quat&amp; qua)", "nml::vec2 nml::reflect(const nml::vec2&amp; i, const nml::vec2&amp; n)", "nml::vec3 nml::reflect(const nml::vec3&amp; i, const nml::vec3&amp; n)", "nml::vec4 nml::reflect(const nml::vec4&amp; i, const nml::vec4&amp; n)", "nml::vec2 nml::refract(const nml::vec2&amp; i, const nml::vec2&amp; n, float ior)", "nml::vec3 nml::refract(const nml::vec3&amp; i, const nml::vec3&amp; n, float ior)", "nml::vec4 nml::refract(const nml::vec4&amp; i, const nml::vec4&amp; n, float ior)", "nml::mat3 rotate(const float angle)", "nml::mat4 rotate(const float angle, const nml::vec3&amp; axis)", "nml::vec3 nml::rotationMatrixToEulerAngles(const nml::mat4&amp; mat)", "nml::quat nml::rotationMatrixToQuat(const nml::mat4&amp; mat)", "nml::mat3 scale(const nml::vec2&amp; scaling)", "nml::mat4 scale(const nml::vec3&amp; scaling)", "quat nml::slerp(const quat&amp; a, const quat&amp; b, const float interpolationValue)", "std::string nml::to_string(const nml::mat2&amp; vec)", "std::string nml::to_string(const nml::mat3&amp; vec)", "std::string nml::to_string(const nml::mat4&amp; vec)", "std::string nml::to_string(const nml::quat&amp; vec)", "std::string nml::to_string(const nml::vec2&amp; vec)", "std::string nml::to_string(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::vec4&amp; vec)", "float nml::toDeg(const float radians)", "float nml::toRad(const float degrees)", "nml::mat3 translate(const nml::vec2&amp; translation)", "nml::mat4 translate(const nml::vec3&amp; translation)", "nml::mat2 transpose(const nml::mat2&amp; mat)", "nml::mat3 transpose(const nml::mat3&amp; mat)", "nml::mat4 transpose(const nml::mat4&amp; mat)", "Other", "Quaternion", "quat", "quat: quat()", "quat: quat(float _a, float _b, float _c, float _d)", "quat: quat(const float* _ptr)", "quat: float* data()", "quat: nml::quat nml::quat::identity()", "quat: float length()", "quat: float&amp; operator[](size_t index)", "quat: const float operator[](size_t index) const", "quat: nml::quat&amp; operator/=(const float other)", "quat: nml::quat operator-()", "quat: nml::quat&amp; operator-=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator+=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator*=(const float other)", "quat: nml::quat&amp; operator*=(const nml::quat&amp; other)", "Vector", "vec2", "vec2: vec2()", "vec2: vec2(float _value)", "vec2: vec2(float _x, float _y)", "vec2: vec2(const float* _ptr)", "vec2: vec2(const nml::vec3&amp; _xyz)", "vec2: vec2(const nml::vec4&amp; _xyzw)", "vec2: float* data()", "vec2: float length()", "vec2: float&amp; operator[](size_t index)", "vec2: const float operator[](size_t index) const", "vec2: nml::vec2&amp; operator/=(const float other)", "vec2: nml::vec2 operator-()", "vec2: nml::vec2&amp; operator-=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator+=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator*=(const float other)", "vec3", "vec3: vec3()", "vec3: vec3(float _value)", "vec3: vec3(float _x, float _y, float _z)", "vec3: vec3(float _x, const nml::vec2&amp; _yz)", "vec3: vec3(const float* _ptr)", "vec3: vec3(const nml::vec2&amp; _xy, float _z)", "vec3: vec3(const nml::vec4&amp; _xyzw)", "vec3: float* data()", "vec3: float length()", "vec3: float&amp; operator[](size_t index)", "vec3: const float operator[](size_t index) const", "vec3: nml::vec3&amp; operator/=(const float other)", "vec3: nml::vec3 operator-()", "vec3: nml::vec3&amp; operator-=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator+=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator*=(const float other)", "vec4", "vec4: vec4()", "vec4: vec4(float _value)", "vec4: vec4(float _x, float _y, float _z, float _w)", "vec4: vec4(float _x, float _y, const nml::vec2&amp; _zw)", "vec4: vec4(float _x, const nml::vec2&amp; _yz, float _w)", "vec4: vec4(float _x, const nml::vec3&amp; _yzw)", "vec4: vec4(const float* _ptr)", "vec4: vec4(const nml::vec2&amp; _xy, float _z, float _w)", "vec4: vec4(const nml::vec2&amp; _xy, const nml::vec2&amp; _zw)", "vec4: vec4(const nml::vec3&amp; _xyz, float _w)", "vec4: float* data()", "vec4: float length()", "vec4: float&amp; operator[](size_t index)", "vec4: const float operator[](size_t index) const", "vec4: nml::vec4&amp; operator/=(const float other)", "vec4: nml::vec4 operator-()", "vec4: nml::vec4&amp; operator-=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator+=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator*=(const float other)"], "titleterms": {"3": 39, "_a": 189, "_b": 189, "_c": 189, "_d": 189, "_mat": [10, 11, 32], "_ptr": [9, 31, 59, 190, 207, 224, 243], "_valu": [6, 26, 50, 205, 221, 238], "_w": [52, 54, 56, 58, 61, 63, 65, 67, 239, 241, 244, 246], "_ww": [51, 53, 55, 57, 60, 62, 64, 66], "_wx": [51, 53, 55, 57, 60, 62, 64, 66], "_wy": [51, 53, 55, 57, 60, 62, 64, 66], "_wz": [51, 53, 55, 57, 60, 62, 64, 66], "_x": [12, 13, 33, 34, 35, 36, 60, 61, 62, 63, 64, 65, 66, 67, 206, 222, 223, 239, 240, 241, 242], "_xw": [51, 52, 53, 54, 55, 56, 57, 58], "_xx": [7, 8, 27, 28, 29, 30, 51, 52, 53, 54, 55, 56, 57, 58], "_xy": [7, 8, 27, 28, 29, 30, 51, 52, 53, 54, 55, 56, 57, 58, 225, 244, 245], "_xyz": [208, 246], "_xyzw": [209, 226], "_xz": [27, 28, 29, 30, 51, 52, 53, 54, 55, 56, 57, 58], "_y": [8, 13, 29, 30, 35, 36, 55, 56, 57, 58, 64, 65, 66, 67, 206, 222, 239, 240], "_yi": [7, 12, 27, 28, 33, 34, 51, 52, 53, 54, 60, 61, 62, 63], "_yw": [51, 52, 53, 54, 60, 61, 62, 63], "_yx": [7, 12, 27, 28, 34, 51, 52, 53, 54, 60, 61, 62, 63], "_yz": [27, 28, 33, 34, 51, 52, 53, 54, 60, 61, 62, 63, 223, 241], "_yzw": 242, "_z": [28, 30, 34, 36, 53, 54, 57, 58, 62, 63, 66, 67, 222, 225, 239, 244], "_zw": [51, 52, 55, 56, 60, 61, 64, 65, 240, 245], "_zx": [27, 29, 33, 35, 51, 52, 55, 56, 60, 61, 64, 65], "_zy": [27, 29, 33, 35, 51, 52, 55, 56, 60, 61, 64, 65], "_zz": [27, 29, 33, 35, 51, 52, 55, 56, 60, 61, 64, 65], "add": 0, "angl": [164, 165], "arrai": 39, "aspectratio": [154, 155], "axi": 165, "b": [79, 81, 82, 83, 84, 89, 170], "bool": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "bottom": [152, 153], "class": [4, 24, 48, 187, 203, 219, 236], "cmake": 0, "conjug": 78, "const": [8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 42, 43, 44, 45, 46, 47, 59, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 195, 196, 198, 199, 200, 201, 207, 208, 209, 213, 214, 216, 217, 218, 223, 224, 225, 226, 230, 231, 233, 234, 235, 240, 241, 242, 243, 244, 245, 246, 250, 251, 253, 254, 255], "constructor": [4, 24, 48, 187, 203, 219, 236], "content": 1, "cross": 79, "data": [14, 37, 68, 191, 210, 227, 247], "decomposetransform": 80, "degre": 179, "det": [15, 38, 69], "dot": [81, 82, 83, 84], "eigen": 39, "euleranglestoquat": 85, "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "far": [152, 153, 154, 155], "float": [6, 7, 8, 9, 12, 14, 15, 19, 22, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 43, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 73, 76, 81, 82, 83, 84, 89, 96, 97, 98, 99, 100, 101, 102, 131, 132, 133, 134, 135, 136, 137, 138, 141, 144, 147, 149, 150, 151, 152, 153, 154, 155, 161, 162, 163, 164, 165, 170, 178, 179, 189, 190, 191, 193, 194, 195, 196, 200, 205, 206, 207, 210, 211, 212, 213, 214, 218, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 235, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 255], "fovi": [154, 155], "from": [90, 91], "function": [4, 24, 48, 185, 187, 203, 219, 236], "get": 0, "i": [158, 159, 160, 161, 162, 163], "ident": [16, 40, 70, 192], "index": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "indic": 1, "interpolationvalu": [89, 170], "invers": [86, 87, 88], "ior": [161, 162, 163], "left": [152, 153], "length": [193, 211, 228, 248], "lerp": 89, "lh": [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "librari": 1, "lookatlh": 90, "lookatrh": 91, "mat": [86, 87, 88, 166, 167, 182, 183, 184], "mat2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 86, 96, 103, 110, 117, 124, 131, 138, 139, 140, 171, 182], "mat3": [10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 87, 97, 104, 111, 118, 125, 132, 141, 142, 143, 164, 168, 172, 180, 183], "mat4": [11, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 88, 90, 91, 98, 105, 112, 119, 126, 133, 144, 145, 146, 152, 153, 154, 155, 157, 165, 166, 167, 169, 173, 181, 184], "mathemat": 1, "matrix": 3, "n": [158, 159, 160, 161, 162, 163], "namespac": [4, 24, 48, 185, 187, 203, 219, 236], "nml": [0, 1, 2, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 196, 197, 198, 199, 200, 201, 208, 209, 214, 215, 216, 217, 218, 223, 225, 226, 231, 232, 233, 234, 235, 240, 241, 242, 244, 245, 246, 251, 252, 253, 254, 255], "normal": [92, 93, 94, 95], "nutshel": 1, "oper": [4, 17, 18, 19, 20, 21, 22, 23, 24, 41, 42, 43, 44, 45, 46, 47, 48, 71, 72, 73, 74, 75, 76, 77, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 187, 194, 195, 196, 197, 198, 199, 200, 201, 203, 212, 213, 214, 215, 216, 217, 218, 219, 229, 230, 231, 232, 233, 234, 235, 236, 249, 250, 251, 252, 253, 254, 255], "ortholh": 152, "orthorh": 153, "other": [19, 20, 21, 22, 23, 43, 44, 45, 46, 47, 73, 74, 75, 76, 77, 185, 196, 198, 199, 200, 201, 214, 216, 217, 218, 231, 233, 234, 235, 251, 253, 254, 255], "pair": 39, "perspectivelh": 154, "perspectiverh": 155, "project": 0, "qua": [78, 92, 156, 157], "quat": [78, 80, 81, 85, 92, 99, 106, 113, 120, 127, 134, 147, 148, 156, 157, 167, 170, 174, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "quaternion": 186, "quattoeulerangl": 156, "quattorotationmatrix": 157, "radian": 178, "reflect": [158, 159, 160], "refract": [161, 162, 163], "rh": [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "right": [152, 153], "rotat": [80, 164, 165], "rotationmatrixtoeulerangl": 166, "rotationmatrixtoquat": 167, "scale": [80, 168, 169], "size_t": [17, 18, 41, 42, 71, 72, 194, 195, 212, 213, 229, 230, 249, 250], "slerp": 170, "start": 0, "static": [4, 24, 48, 187], "std": [39, 171, 172, 173, 174, 175, 176, 177], "string": [171, 172, 173, 174, 175, 176, 177], "tabl": 1, "to_str": [171, 172, 173, 174, 175, 176, 177], "todeg": 178, "top": [152, 153], "torad": 179, "transform": 80, "translat": [80, 180, 181], "transpos": [182, 183, 184], "up": [90, 91], "us": 0, "variabl": [4, 24, 48, 187, 203, 219, 236], "vec": [85, 93, 94, 95, 171, 172, 173, 174, 175, 176, 177], "vec2": [8, 12, 13, 82, 93, 100, 107, 114, 121, 128, 135, 140, 149, 158, 161, 168, 175, 180, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 225, 240, 241, 244, 245], "vec3": [28, 29, 30, 33, 34, 35, 36, 39, 79, 80, 83, 85, 90, 91, 94, 101, 108, 115, 122, 129, 136, 143, 150, 156, 159, 162, 165, 166, 169, 176, 181, 208, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 242, 246], "vec4": [52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 84, 95, 102, 109, 116, 123, 130, 137, 146, 151, 160, 163, 177, 209, 226, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "vector": 202, "void": 80}})