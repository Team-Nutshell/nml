Search.setIndex({"docnames": ["getting_started/index", "index", "nml/index", "nml/matrix/index", "nml/matrix/mat2", "nml/matrix/mat2/constructor", "nml/matrix/mat2/constructor_float", "nml/matrix/mat2/constructor_float_float_float_float", "nml/matrix/mat2/constructor_float_float_vec2", "nml/matrix/mat2/constructor_floatptr", "nml/matrix/mat2/constructor_mat3", "nml/matrix/mat2/constructor_mat4", "nml/matrix/mat2/constructor_vec2_float_float", "nml/matrix/mat2/constructor_vec2_vec2", "nml/matrix/mat2/data", "nml/matrix/mat2/det", "nml/matrix/mat2/operator_brackets_ref", "nml/matrix/mat2/operator_brackets_value", "nml/matrix/mat2/operator_divide_equal_float", "nml/matrix/mat2/operator_minus_equal_mat2", "nml/matrix/mat2/operator_plus_equal_mat2", "nml/matrix/mat2/operator_times_equal_float", "nml/matrix/mat2/operator_times_equal_mat2", "nml/matrix/mat3", "nml/matrix/mat3/constructor", "nml/matrix/mat3/constructor_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3", "nml/matrix/mat3/constructor_floatptr", "nml/matrix/mat3/constructor_mat4", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float", "nml/matrix/mat3/constructor_vec3_vec3_vec3", "nml/matrix/mat3/data", "nml/matrix/mat3/det", "nml/matrix/mat3/operator_brackets_ref", "nml/matrix/mat3/operator_brackets_value", "nml/matrix/mat3/operator_divide_equal_float", "nml/matrix/mat3/operator_minus_equal_mat3", "nml/matrix/mat3/operator_plus_equal_mat3", "nml/matrix/mat3/operator_times_equal_float", "nml/matrix/mat3/operator_times_equal_mat3", "nml/matrix/mat4", "nml/matrix/mat4/constructor", "nml/matrix/mat4/constructor_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4", "nml/matrix/mat4/constructor_floatptr", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4", "nml/matrix/mat4/data", "nml/matrix/mat4/det", "nml/matrix/mat4/operator_brackets_ref", "nml/matrix/mat4/operator_brackets_value", "nml/matrix/mat4/operator_divide_equal_float", "nml/matrix/mat4/operator_minus_equal_mat4", "nml/matrix/mat4/operator_plus_equal_mat4", "nml/matrix/mat4/operator_times_equal_float", "nml/matrix/mat4/operator_times_equal_mat4", "nml/namespace/nml_conjugate_quat", "nml/namespace/nml_cross_vec3_vec3", "nml/namespace/nml_dot_quat_quat", "nml/namespace/nml_dot_vec2_vec2", "nml/namespace/nml_dot_vec3_vec3", "nml/namespace/nml_dot_vec4_vec4", "nml/namespace/nml_inverse_mat2", "nml/namespace/nml_inverse_mat3", "nml/namespace/nml_inverse_mat4", "nml/namespace/nml_lerp_float_float_float", "nml/namespace/nml_lookatlh_vec3_vec3_vec3", "nml/namespace/nml_lookatrh_vec3_vec3_vec3", "nml/namespace/nml_normalize_quat", "nml/namespace/nml_normalize_vec2", "nml/namespace/nml_normalize_vec3", "nml/namespace/nml_normalize_vec4", "nml/namespace/nml_operator_divide_mat2_float", "nml/namespace/nml_operator_divide_mat3_float", "nml/namespace/nml_operator_divide_mat4_float", "nml/namespace/nml_operator_divide_quat_float", "nml/namespace/nml_operator_divide_vec2_float", "nml/namespace/nml_operator_divide_vec3_float", "nml/namespace/nml_operator_divide_vec4_float", "nml/namespace/nml_operator_is_equal_mat2_mat2", "nml/namespace/nml_operator_is_equal_mat3_mat3", "nml/namespace/nml_operator_is_equal_mat4_mat4", "nml/namespace/nml_operator_is_equal_quat_quat", "nml/namespace/nml_operator_is_equal_vec2_vec2", "nml/namespace/nml_operator_is_equal_vec3_vec3", "nml/namespace/nml_operator_is_equal_vec4_vec4", "nml/namespace/nml_operator_is_not_equal_mat2_mat2", "nml/namespace/nml_operator_is_not_equal_mat3_mat3", "nml/namespace/nml_operator_is_not_equal_mat4_mat4", "nml/namespace/nml_operator_is_not_equal_quat_quat", "nml/namespace/nml_operator_is_not_equal_vec2_vec2", "nml/namespace/nml_operator_is_not_equal_vec3_vec3", "nml/namespace/nml_operator_is_not_equal_vec4_vec4", "nml/namespace/nml_operator_minus_mat2_mat2", "nml/namespace/nml_operator_minus_mat3_mat3", "nml/namespace/nml_operator_minus_mat4_mat4", "nml/namespace/nml_operator_minus_quat_quat", "nml/namespace/nml_operator_minus_vec2_vec2", "nml/namespace/nml_operator_minus_vec3_vec3", "nml/namespace/nml_operator_minus_vec4_vec4", "nml/namespace/nml_operator_plus_mat2_mat2", "nml/namespace/nml_operator_plus_mat3_mat3", "nml/namespace/nml_operator_plus_mat4_mat4", "nml/namespace/nml_operator_plus_quat_quat", "nml/namespace/nml_operator_plus_vec2_vec2", "nml/namespace/nml_operator_plus_vec3_vec3", "nml/namespace/nml_operator_plus_vec4_vec4", "nml/namespace/nml_operator_times_float_mat2", "nml/namespace/nml_operator_times_float_mat3", "nml/namespace/nml_operator_times_float_mat4", "nml/namespace/nml_operator_times_float_quat", "nml/namespace/nml_operator_times_float_vec2", "nml/namespace/nml_operator_times_float_vec3", "nml/namespace/nml_operator_times_float_vec4", "nml/namespace/nml_operator_times_mat2_float", "nml/namespace/nml_operator_times_mat2_mat2", "nml/namespace/nml_operator_times_mat2_vec2", "nml/namespace/nml_operator_times_mat3_float", "nml/namespace/nml_operator_times_mat3_mat3", "nml/namespace/nml_operator_times_mat3_vec3", "nml/namespace/nml_operator_times_mat4_float", "nml/namespace/nml_operator_times_mat4_mat4", "nml/namespace/nml_operator_times_mat4_vec4", "nml/namespace/nml_operator_times_quat_float", "nml/namespace/nml_operator_times_quat_quat", "nml/namespace/nml_operator_times_vec2_float", "nml/namespace/nml_operator_times_vec3_float", "nml/namespace/nml_operator_times_vec4_float", "nml/namespace/nml_ortholh_float_float_float_float_float_float", "nml/namespace/nml_orthorh_float_float_float_float_float_float", "nml/namespace/nml_perspectivelh_float_float_float_float", "nml/namespace/nml_perspectiverh_float_float_float_float", "nml/namespace/nml_reflect_vec2_vec2", "nml/namespace/nml_reflect_vec3_vec3", "nml/namespace/nml_reflect_vec4_vec4", "nml/namespace/nml_refract_vec2_vec2_float", "nml/namespace/nml_refract_vec3_vec3_float", "nml/namespace/nml_refract_vec4_vec4_float", "nml/namespace/nml_rotate_float", "nml/namespace/nml_rotate_float_vec3", "nml/namespace/nml_scale_vec2", "nml/namespace/nml_scale_vec3", "nml/namespace/nml_slerp_quat_quat_float", "nml/namespace/nml_to_mat4_quat", "nml/namespace/nml_to_quat_vec3", "nml/namespace/nml_to_string_mat2", "nml/namespace/nml_to_string_mat3", "nml/namespace/nml_to_string_mat4", "nml/namespace/nml_to_string_quat", "nml/namespace/nml_to_string_vec2", "nml/namespace/nml_to_string_vec3", "nml/namespace/nml_to_string_vec4", "nml/namespace/nml_to_vec3_quat", "nml/namespace/nml_todeg_float", "nml/namespace/nml_torad_float", "nml/namespace/nml_translate_vec2", "nml/namespace/nml_translate_vec3", "nml/namespace/nml_transpose_mat2", "nml/namespace/nml_transpose_mat3", "nml/namespace/nml_transpose_mat4", "nml/other/index", "nml/quaternion/index", "nml/quaternion/quat", "nml/quaternion/quat/constructor", "nml/quaternion/quat/constructor_float_float_float_float", "nml/quaternion/quat/constructor_floatptr", "nml/quaternion/quat/data", "nml/quaternion/quat/length", "nml/quaternion/quat/operator_brackets_ref", "nml/quaternion/quat/operator_brackets_value", "nml/quaternion/quat/operator_divide_equal_float", "nml/quaternion/quat/operator_minus_equal_quat", "nml/quaternion/quat/operator_plus_equal_quat", "nml/quaternion/quat/operator_times_equal_float", "nml/quaternion/quat/operator_times_equal_quat", "nml/vector/index", "nml/vector/vec2", "nml/vector/vec2/constructor", "nml/vector/vec2/constructor_float", "nml/vector/vec2/constructor_float_float", "nml/vector/vec2/constructor_floatptr", "nml/vector/vec2/constructor_vec3", "nml/vector/vec2/constructor_vec4", "nml/vector/vec2/data", "nml/vector/vec2/length", "nml/vector/vec2/operator_brackets_ref", "nml/vector/vec2/operator_brackets_value", "nml/vector/vec2/operator_divide_equal_float", "nml/vector/vec2/operator_minus_equal_vec2", "nml/vector/vec2/operator_plus_equal_vec2", "nml/vector/vec2/operator_times_equal_float", "nml/vector/vec3", "nml/vector/vec3/constructor", "nml/vector/vec3/constructor_float", "nml/vector/vec3/constructor_float_float_float", "nml/vector/vec3/constructor_float_vec2", "nml/vector/vec3/constructor_floatptr", "nml/vector/vec3/constructor_vec2_float", "nml/vector/vec3/constructor_vec4", "nml/vector/vec3/data", "nml/vector/vec3/length", "nml/vector/vec3/operator_brackets_ref", "nml/vector/vec3/operator_brackets_value", "nml/vector/vec3/operator_divide_equal_float", "nml/vector/vec3/operator_minus_equal_vec3", "nml/vector/vec3/operator_plus_equal_vec3", "nml/vector/vec3/operator_times_equal_float", "nml/vector/vec4", "nml/vector/vec4/constructor", "nml/vector/vec4/constructor_float", "nml/vector/vec4/constructor_float_float_float_float", "nml/vector/vec4/constructor_float_float_vec2", "nml/vector/vec4/constructor_float_vec2_float", "nml/vector/vec4/constructor_float_vec3", "nml/vector/vec4/constructor_floatptr", "nml/vector/vec4/constructor_vec2_float_float", "nml/vector/vec4/constructor_vec2_vec2", "nml/vector/vec4/constructor_vec3_float", "nml/vector/vec4/data", "nml/vector/vec4/length", "nml/vector/vec4/operator_brackets_ref", "nml/vector/vec4/operator_brackets_value", "nml/vector/vec4/operator_divide_equal_float", "nml/vector/vec4/operator_minus_equal_vec4", "nml/vector/vec4/operator_plus_equal_vec4", "nml/vector/vec4/operator_times_equal_float"], "filenames": ["getting_started/index.rst", "index.rst", "nml/index.rst", "nml/matrix/index.rst", "nml/matrix/mat2.rst", "nml/matrix/mat2/constructor.rst", "nml/matrix/mat2/constructor_float.rst", "nml/matrix/mat2/constructor_float_float_float_float.rst", "nml/matrix/mat2/constructor_float_float_vec2.rst", "nml/matrix/mat2/constructor_floatptr.rst", "nml/matrix/mat2/constructor_mat3.rst", "nml/matrix/mat2/constructor_mat4.rst", "nml/matrix/mat2/constructor_vec2_float_float.rst", "nml/matrix/mat2/constructor_vec2_vec2.rst", "nml/matrix/mat2/data.rst", "nml/matrix/mat2/det.rst", "nml/matrix/mat2/operator_brackets_ref.rst", "nml/matrix/mat2/operator_brackets_value.rst", "nml/matrix/mat2/operator_divide_equal_float.rst", "nml/matrix/mat2/operator_minus_equal_mat2.rst", "nml/matrix/mat2/operator_plus_equal_mat2.rst", "nml/matrix/mat2/operator_times_equal_float.rst", "nml/matrix/mat2/operator_times_equal_mat2.rst", "nml/matrix/mat3.rst", "nml/matrix/mat3/constructor.rst", "nml/matrix/mat3/constructor_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3.rst", "nml/matrix/mat3/constructor_floatptr.rst", "nml/matrix/mat3/constructor_mat4.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_vec3_vec3.rst", "nml/matrix/mat3/data.rst", "nml/matrix/mat3/det.rst", "nml/matrix/mat3/operator_brackets_ref.rst", "nml/matrix/mat3/operator_brackets_value.rst", "nml/matrix/mat3/operator_divide_equal_float.rst", "nml/matrix/mat3/operator_minus_equal_mat3.rst", "nml/matrix/mat3/operator_plus_equal_mat3.rst", "nml/matrix/mat3/operator_times_equal_float.rst", "nml/matrix/mat3/operator_times_equal_mat3.rst", "nml/matrix/mat4.rst", "nml/matrix/mat4/constructor.rst", "nml/matrix/mat4/constructor_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4.rst", "nml/matrix/mat4/constructor_floatptr.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4.rst", "nml/matrix/mat4/data.rst", "nml/matrix/mat4/det.rst", "nml/matrix/mat4/operator_brackets_ref.rst", "nml/matrix/mat4/operator_brackets_value.rst", "nml/matrix/mat4/operator_divide_equal_float.rst", "nml/matrix/mat4/operator_minus_equal_mat4.rst", "nml/matrix/mat4/operator_plus_equal_mat4.rst", "nml/matrix/mat4/operator_times_equal_float.rst", "nml/matrix/mat4/operator_times_equal_mat4.rst", "nml/namespace/nml_conjugate_quat.rst", "nml/namespace/nml_cross_vec3_vec3.rst", "nml/namespace/nml_dot_quat_quat.rst", "nml/namespace/nml_dot_vec2_vec2.rst", "nml/namespace/nml_dot_vec3_vec3.rst", "nml/namespace/nml_dot_vec4_vec4.rst", "nml/namespace/nml_inverse_mat2.rst", "nml/namespace/nml_inverse_mat3.rst", "nml/namespace/nml_inverse_mat4.rst", "nml/namespace/nml_lerp_float_float_float.rst", "nml/namespace/nml_lookatlh_vec3_vec3_vec3.rst", "nml/namespace/nml_lookatrh_vec3_vec3_vec3.rst", "nml/namespace/nml_normalize_quat.rst", "nml/namespace/nml_normalize_vec2.rst", "nml/namespace/nml_normalize_vec3.rst", "nml/namespace/nml_normalize_vec4.rst", "nml/namespace/nml_operator_divide_mat2_float.rst", "nml/namespace/nml_operator_divide_mat3_float.rst", "nml/namespace/nml_operator_divide_mat4_float.rst", "nml/namespace/nml_operator_divide_quat_float.rst", "nml/namespace/nml_operator_divide_vec2_float.rst", "nml/namespace/nml_operator_divide_vec3_float.rst", "nml/namespace/nml_operator_divide_vec4_float.rst", "nml/namespace/nml_operator_is_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_equal_quat_quat.rst", "nml/namespace/nml_operator_is_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_equal_vec4_vec4.rst", "nml/namespace/nml_operator_is_not_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_not_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_not_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_not_equal_quat_quat.rst", "nml/namespace/nml_operator_is_not_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_not_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_not_equal_vec4_vec4.rst", "nml/namespace/nml_operator_minus_mat2_mat2.rst", "nml/namespace/nml_operator_minus_mat3_mat3.rst", "nml/namespace/nml_operator_minus_mat4_mat4.rst", "nml/namespace/nml_operator_minus_quat_quat.rst", "nml/namespace/nml_operator_minus_vec2_vec2.rst", "nml/namespace/nml_operator_minus_vec3_vec3.rst", "nml/namespace/nml_operator_minus_vec4_vec4.rst", "nml/namespace/nml_operator_plus_mat2_mat2.rst", "nml/namespace/nml_operator_plus_mat3_mat3.rst", "nml/namespace/nml_operator_plus_mat4_mat4.rst", "nml/namespace/nml_operator_plus_quat_quat.rst", "nml/namespace/nml_operator_plus_vec2_vec2.rst", "nml/namespace/nml_operator_plus_vec3_vec3.rst", "nml/namespace/nml_operator_plus_vec4_vec4.rst", "nml/namespace/nml_operator_times_float_mat2.rst", "nml/namespace/nml_operator_times_float_mat3.rst", "nml/namespace/nml_operator_times_float_mat4.rst", "nml/namespace/nml_operator_times_float_quat.rst", "nml/namespace/nml_operator_times_float_vec2.rst", "nml/namespace/nml_operator_times_float_vec3.rst", "nml/namespace/nml_operator_times_float_vec4.rst", "nml/namespace/nml_operator_times_mat2_float.rst", "nml/namespace/nml_operator_times_mat2_mat2.rst", "nml/namespace/nml_operator_times_mat2_vec2.rst", "nml/namespace/nml_operator_times_mat3_float.rst", "nml/namespace/nml_operator_times_mat3_mat3.rst", "nml/namespace/nml_operator_times_mat3_vec3.rst", "nml/namespace/nml_operator_times_mat4_float.rst", "nml/namespace/nml_operator_times_mat4_mat4.rst", "nml/namespace/nml_operator_times_mat4_vec4.rst", "nml/namespace/nml_operator_times_quat_float.rst", "nml/namespace/nml_operator_times_quat_quat.rst", "nml/namespace/nml_operator_times_vec2_float.rst", "nml/namespace/nml_operator_times_vec3_float.rst", "nml/namespace/nml_operator_times_vec4_float.rst", "nml/namespace/nml_ortholh_float_float_float_float_float_float.rst", "nml/namespace/nml_orthorh_float_float_float_float_float_float.rst", "nml/namespace/nml_perspectivelh_float_float_float_float.rst", "nml/namespace/nml_perspectiverh_float_float_float_float.rst", "nml/namespace/nml_reflect_vec2_vec2.rst", "nml/namespace/nml_reflect_vec3_vec3.rst", "nml/namespace/nml_reflect_vec4_vec4.rst", "nml/namespace/nml_refract_vec2_vec2_float.rst", "nml/namespace/nml_refract_vec3_vec3_float.rst", "nml/namespace/nml_refract_vec4_vec4_float.rst", "nml/namespace/nml_rotate_float.rst", "nml/namespace/nml_rotate_float_vec3.rst", "nml/namespace/nml_scale_vec2.rst", "nml/namespace/nml_scale_vec3.rst", "nml/namespace/nml_slerp_quat_quat_float.rst", "nml/namespace/nml_to_mat4_quat.rst", "nml/namespace/nml_to_quat_vec3.rst", "nml/namespace/nml_to_string_mat2.rst", "nml/namespace/nml_to_string_mat3.rst", "nml/namespace/nml_to_string_mat4.rst", "nml/namespace/nml_to_string_quat.rst", "nml/namespace/nml_to_string_vec2.rst", "nml/namespace/nml_to_string_vec3.rst", "nml/namespace/nml_to_string_vec4.rst", "nml/namespace/nml_to_vec3_quat.rst", "nml/namespace/nml_todeg_float.rst", "nml/namespace/nml_torad_float.rst", "nml/namespace/nml_translate_vec2.rst", "nml/namespace/nml_translate_vec3.rst", "nml/namespace/nml_transpose_mat2.rst", "nml/namespace/nml_transpose_mat3.rst", "nml/namespace/nml_transpose_mat4.rst", "nml/other/index.rst", "nml/quaternion/index.rst", "nml/quaternion/quat.rst", "nml/quaternion/quat/constructor.rst", "nml/quaternion/quat/constructor_float_float_float_float.rst", "nml/quaternion/quat/constructor_floatptr.rst", "nml/quaternion/quat/data.rst", "nml/quaternion/quat/length.rst", "nml/quaternion/quat/operator_brackets_ref.rst", "nml/quaternion/quat/operator_brackets_value.rst", "nml/quaternion/quat/operator_divide_equal_float.rst", "nml/quaternion/quat/operator_minus_equal_quat.rst", "nml/quaternion/quat/operator_plus_equal_quat.rst", "nml/quaternion/quat/operator_times_equal_float.rst", "nml/quaternion/quat/operator_times_equal_quat.rst", "nml/vector/index.rst", "nml/vector/vec2.rst", "nml/vector/vec2/constructor.rst", "nml/vector/vec2/constructor_float.rst", "nml/vector/vec2/constructor_float_float.rst", "nml/vector/vec2/constructor_floatptr.rst", "nml/vector/vec2/constructor_vec3.rst", "nml/vector/vec2/constructor_vec4.rst", "nml/vector/vec2/data.rst", "nml/vector/vec2/length.rst", "nml/vector/vec2/operator_brackets_ref.rst", "nml/vector/vec2/operator_brackets_value.rst", "nml/vector/vec2/operator_divide_equal_float.rst", "nml/vector/vec2/operator_minus_equal_vec2.rst", "nml/vector/vec2/operator_plus_equal_vec2.rst", "nml/vector/vec2/operator_times_equal_float.rst", "nml/vector/vec3.rst", "nml/vector/vec3/constructor.rst", "nml/vector/vec3/constructor_float.rst", "nml/vector/vec3/constructor_float_float_float.rst", "nml/vector/vec3/constructor_float_vec2.rst", "nml/vector/vec3/constructor_floatptr.rst", "nml/vector/vec3/constructor_vec2_float.rst", "nml/vector/vec3/constructor_vec4.rst", "nml/vector/vec3/data.rst", "nml/vector/vec3/length.rst", "nml/vector/vec3/operator_brackets_ref.rst", "nml/vector/vec3/operator_brackets_value.rst", "nml/vector/vec3/operator_divide_equal_float.rst", "nml/vector/vec3/operator_minus_equal_vec3.rst", "nml/vector/vec3/operator_plus_equal_vec3.rst", "nml/vector/vec3/operator_times_equal_float.rst", "nml/vector/vec4.rst", "nml/vector/vec4/constructor.rst", "nml/vector/vec4/constructor_float.rst", "nml/vector/vec4/constructor_float_float_float_float.rst", "nml/vector/vec4/constructor_float_float_vec2.rst", "nml/vector/vec4/constructor_float_vec2_float.rst", "nml/vector/vec4/constructor_float_vec3.rst", "nml/vector/vec4/constructor_floatptr.rst", "nml/vector/vec4/constructor_vec2_float_float.rst", "nml/vector/vec4/constructor_vec2_vec2.rst", "nml/vector/vec4/constructor_vec3_float.rst", "nml/vector/vec4/data.rst", "nml/vector/vec4/length.rst", "nml/vector/vec4/operator_brackets_ref.rst", "nml/vector/vec4/operator_brackets_value.rst", "nml/vector/vec4/operator_divide_equal_float.rst", "nml/vector/vec4/operator_minus_equal_vec4.rst", "nml/vector/vec4/operator_plus_equal_vec4.rst", "nml/vector/vec4/operator_times_equal_float.rst"], "titles": ["Getting started", "nml - Nutshell Mathematics Library", "nml", "Matrix", "mat2", "mat2: mat2()", "mat2: mat2(float _value)", "mat2: mat2(float _xx, float _xy, float _yx, float _yy)", "mat2: mat2(float _xx, float _xy, nml::vec2 _y)", "mat2: mat2(const float* _ptr)", "mat2: mat2(nml::mat3 _mat)", "mat2: mat2(nml::mat4 _mat)", "mat2: mat2(nml::vec2 _x, float _yx, float _yy)", "mat2: mat2(nml::vec2 _x, nml::vec2 _y)", "mat2: float* data()", "mat2: float det() const", "mat2: nml::mat2&amp; operator[](size_t index)", "mat2: const nml::mat2&amp; operator[](size_t index) const", "mat2: nml::mat2&amp; operator/=(const float other)", "mat2: nml::mat2&amp; operator-=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator+=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator*=(const float other)", "mat2: nml::mat2&amp; operator*=(const nml::mat2&amp; other)", "mat3", "mat3: mat3()", "mat3: mat3(float _value)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _z)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, nml::vec3 _z)", "mat3: mat3(const float* _ptr)", "mat3: mat3(nml::mat4 _mat)", "mat3: mat3(nml::vec3 _x, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _x, float _yx, float _yy, float _yz, nml::vec3 _z)", "mat3: mat3(nml::vec3 _x, nml::vec3 _y, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _x, nml::vec3 _y, nml::vec3 _z)", "mat3: float* data()", "mat3: float det() const", "mat3: nml::mat3&amp; operator[](size_t index)", "mat3: const nml::mat3&amp; operator[](size_t index) const", "mat3: nml::mat3&amp; operator/=(const float other)", "mat3: nml::mat3&amp; operator-=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator+=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator*=(const float other)", "mat3: nml::mat3&amp; operator*=(const nml::mat3&amp; other)", "mat4", "mat4: mat4()", "mat4: mat4(float _value)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(const float* _ptr)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)", "mat4: float* data()", "mat4: float det() const", "mat4: nml::mat4&amp; operator[](size_t index)", "mat4: const nml::mat4&amp; operator[](size_t index) const", "mat4: nml::mat4&amp; operator/=(const float other)", "mat4: nml::mat4&amp; operator-=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator+=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator*=(const float other)", "mat4: nml::mat4&amp; operator*=(const nml::mat4&amp; other)", "nml::quat nml::conjugate(const nml::quat&amp; qua)", "nml::vec3 nml::cross(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::quat&amp; a, const nml::quat&amp; b)", "float nml::dot(const nml::vec2&amp; a, const nml::vec2&amp; b)", "float nml::dot(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec4&amp; a, const nml::vec4&amp; b)", "nml::mat2 inverse(const nml::mat2&amp; mat)", "nml::mat3 inverse(const nml::mat3&amp; mat)", "nml::mat4 inverse(const nml::mat4&amp; mat)", "float nml::lerp(const float&amp; a, const float&amp; b, const float interpolationValue)", "nml::mat4 lookAtLH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::mat4 lookAtRH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::quat nml::normalize(const nml::quat&amp; qua)", "nml::vec2 nml::normalize(const nml::vec2&amp; vec)", "nml::vec3 nml::normalize(const nml::vec3&amp; vec)", "nml::vec4 nml::normalize(const nml::vec4&amp; vec)", "nml::mat2 operator/(nml::mat2 lhs, const float rhs)", "nml::mat3 operator/(nml::mat3 lhs, const float rhs)", "nml::mat4 operator/(nml::mat4 lhs, const float rhs)", "nml::quat operator/(nml::quat lhs, const float rhs)", "nml::vec2 operator/(nml::vec2 lhs, const float rhs)", "nml::vec3 operator/(nml::vec3 lhs, const float rhs)", "nml::vec4 operator/(nml::vec4 lhs, const float rhs)", "bool operator==(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator==(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator==(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator==(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator==(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator==(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator==(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "bool operator!=(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator!=(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator!=(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator!=(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator!=(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator!=(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator!=(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator-(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator+(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(float lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator*(float lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator*(float lhs, const nml::mat4&amp; rhs)", "nml::quat operator*(float lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(float lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator*(float lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator*(float lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(nml::mat2 lhs, const float rhs)", "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2&amp; rhs)", "nml::mat3 operator*(nml::mat3 lhs, const float rhs)", "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3&amp; rhs)", "nml::mat4 operator*(nml::mat4 lhs, const float rhs)", "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4&amp; rhs)", "nml::quat operator*(nml::quat lhs, const float rhs)", "nml::quat operator*(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(nml::vec2 lhs, const float rhs)", "nml::vec3 operator*(nml::vec3 lhs, const float rhs)", "nml::vec4 operator*(nml::vec4 lhs, const float rhs)", "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::vec2 nml::reflect(const nml::vec2&amp; i, const nml::vec2&amp; n)", "nml::vec3 nml::reflect(const nml::vec3&amp; i, const nml::vec3&amp; n)", "nml::vec4 nml::reflect(const nml::vec4&amp; i, const nml::vec4&amp; n)", "nml::vec2 nml::refract(const nml::vec2&amp; i, const nml::vec2&amp; n, float ior)", "nml::vec3 nml::refract(const nml::vec3&amp; i, const nml::vec3&amp; n, float ior)", "nml::vec4 nml::refract(const nml::vec4&amp; i, const nml::vec4&amp; n, float ior)", "nml::mat3 rotate(const float angle)", "nml::mat4 rotate(const float angle, const nml::vec3&amp; axis)", "nml::mat3 scale(const nml::vec2&amp; scaling)", "nml::mat4 scale(const nml::vec3&amp; scaling)", "quat nml::slerp(const quat&amp; a, const quat&amp; b, const float interpolationValue)", "nml::mat4 nml::to_mat4(const nml::quat&amp; qua)", "nml::quat nml::to_quat(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::mat2&amp; vec)", "std::string nml::to_string(const nml::mat3&amp; vec)", "std::string nml::to_string(const nml::mat4&amp; vec)", "std::string nml::to_string(const nml::quat&amp; vec)", "std::string nml::to_string(const nml::vec2&amp; vec)", "std::string nml::to_string(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::vec4&amp; vec)", "nml::vec3 nml::to_vec3(const nml::quat&amp; qua)", "float nml::toDeg(const float radians)", "float nml::toRad(const float degrees)", "nml::mat3 translate(const nml::vec2&amp; translation)", "nml::mat4 translate(const nml::vec3&amp; translation)", "nml::mat2 transpose(const nml::mat2&amp; mat)", "nml::mat3 transpose(const nml::mat3&amp; mat)", "nml::mat4 transpose(const nml::mat4&amp; mat)", "Other", "Quaternion", "quat", "quat: quat()", "quat: quat(float _a, float _b, float _c, float _d)", "quat: quat(const float* _ptr)", "quat: float* data()", "quat: float length()", "quat: float&amp; operator[](size_t index)", "quat: const float operator[](size_t index) const", "quat: nml::quat&amp; operator/=(const float other)", "quat: nml::quat&amp; operator-=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator+=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator*=(const float other)", "quat: nml::quat&amp; operator*=(const nml::quat&amp; other)", "Vector", "vec2", "vec2: vec2()", "vec2: vec2(float _value)", "vec2: vec2(float _x, float _y)", "vec2: vec2(const float* _ptr)", "vec2: vec2(nml::vec3 _xyz)", "vec2: vec2(nml::vec4 _xyzw)", "vec2: float* data()", "vec2: float length()", "vec2: float&amp; operator[](size_t index)", "vec2: const float operator[](size_t index) const", "vec2: nml::vec2&amp; operator/=(const float other)", "vec2: nml::vec2&amp; operator-=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator+=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator*=(const float other)", "vec3", "vec3: vec3()", "vec3: vec3(float _value)", "vec3: vec3(float _x, float _y, float _z)", "vec3: vec3(float _x, nml::vec2 _yz)", "vec3: vec3(const float* _ptr)", "vec3: vec3(nml::vec2 _xy, float _z)", "vec3: vec3(nml::vec4 _xyzw)", "vec3: float* data()", "vec3: float length()", "vec3: float&amp; operator[](size_t index)", "vec3: const float operator[](size_t index) const", "vec3: nml::vec3&amp; operator/=(const float other)", "vec3: nml::vec3&amp; operator-=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator+=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator*=(const float other)", "vec4", "vec4: vec4()", "vec4: vec4(float _value)", "vec4: vec4(float _x, float _y, float _z, float _w)", "vec4: vec4(float _x, float _y, nml::vec2 _zw)", "vec4: vec4(float _x, nml::vec2 _yz, float _w)", "vec4: vec4(float _x, nml::vec3 _yzw)", "vec4: vec4(const float* _ptr)", "vec4: vec4(nml::vec2 _xy, float _z, float _w)", "vec4: vec4(nml::vec2 _xy, nml::vec2 _zw)", "vec4: vec4(nml::vec3 _xyz, float _w)", "vec4: float* data()", "vec4: float length()", "vec4: float&amp; operator[](size_t index)", "vec4: const float operator[](size_t index) const", "vec4: nml::vec4&amp; operator/=(const float other)", "vec4: nml::vec4&amp; operator-=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator+=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator*=(const float other)"], "terms": {"i": [0, 1, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 161, 162, 166, 170, 171, 172, 173, 174, 175, 176, 177, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 202, 203, 204, 205, 206, 207, 208, 209, 218, 219, 220, 221, 222, 223, 224, 225, 237, 238, 239, 240, 241, 242, 243], "avail": [0, 1], "github": [0, 1], "git": 0, "clone": 0, "http": 0, "com": 0, "team": 0, "nutshel": 0, "can": [0, 193], "built": 0, "static": 0, "librari": 0, "name": [0, 4, 23, 45, 178, 180, 194, 209, 225], "replac": 0, "path_to_nml": 0, "path": 0, "sourc": 0, "code": 0, "directori": 0, "add_subdirectori": 0, "target_include_directori": 0, "project_nam": 0, "public": 0, "target_link_librari": 0, "In": 0, "sampl": 0, "It": 0, "possibl": 0, "includ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "entir": 0, "one": 0, "h": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "Or": 0, "onli": 0, "need": 0, "header": [0, 4, 23, 45, 178, 180, 194, 209, 225], "vec2": [0, 1, 2, 4, 16, 17, 23, 193, 209, 225], "vec3": [0, 1, 2, 23, 38, 39, 45, 180, 193, 194, 225], "mat4": [0, 1, 2, 3, 4, 23], "c": [1, 17, 39, 68, 73, 75, 76, 77, 78, 79, 81, 82, 86, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 133, 134, 136, 137, 139, 140, 141, 142, 150, 151, 152, 153, 154, 155, 157, 161, 166, 170, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 204, 220, 239], "comput": 1, "graphic": 1, "get": 1, "start": 1, "add": [1, 4, 20, 23, 42, 45, 71, 180, 190, 194, 207, 209, 223, 225, 242], "cmake": 1, "project": [1, 45, 146, 147, 148, 149], "us": [1, 193], "vector": [1, 2, 23, 45, 150, 151, 152, 153, 154, 155, 157, 173, 174, 194, 195, 196, 197, 198, 199, 200, 201, 202, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "vec4": [1, 2, 45, 67, 68, 193, 194, 209], "matrix": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 80, 81, 82, 84, 85, 146, 147, 148, 149, 156, 157, 158, 159, 161, 173, 174], "mat2": [1, 2, 3], "mat3": [1, 2, 3, 4], "quaternion": [1, 2, 45, 74, 161, 162, 170, 180, 181, 182, 183, 184, 185, 209], "quat": [1, 2, 45, 179, 209], "other": [1, 2, 4, 23, 45, 83, 171, 172, 180, 194, 209, 225], "namespac": [1, 2, 3, 179, 193], "function": [1, 2, 3, 80, 81, 82, 150, 151, 152, 153, 154, 155, 157, 179, 193], "index": [1, 4, 23, 45, 180, 194, 209, 225], "modul": 1, "search": 1, "page": 1, "class": [2, 3, 179, 193], "variabl": [2, 3, 179, 193], "constructor": [2, 3, 179, 193], "oper": [2, 3, 179, 193], "file": [4, 23, 45, 178, 180, 194, 209, 225], "column": [4, 23, 45, 175, 176, 177], "major": [4, 23, 45], "2": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 173, 174, 175, 176, 177, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "row": [4, 23, 45, 175, 176, 177], "begin": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 170, 173, 174, 175, 176, 177, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243], "bmatrix": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 170, 173, 174, 175, 176, 177, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243], "x": [4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 164, 165, 167, 168, 169, 173, 174, 175, 176, 177, 194, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "y": [4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 164, 165, 167, 168, 169, 173, 174, 175, 176, 177, 194, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 170, 173, 174, 175, 176, 177, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243], "type": [4, 23, 45, 180, 194, 209, 225], "descript": [4, 23, 45, 178, 180, 194, 209, 225], "nml": [4, 5, 6, 7, 9, 14, 15, 23, 24, 25, 26, 30, 36, 37, 45, 46, 47, 48, 56, 65, 66, 180, 181, 182, 183, 184, 185, 186, 187, 194, 195, 196, 197, 198, 201, 202, 203, 204, 209, 210, 211, 212, 214, 217, 218, 219, 220, 225, 226, 227, 228, 232, 236, 237, 238, 239], "The": [4, 15, 18, 19, 20, 21, 22, 23, 37, 40, 41, 42, 43, 44, 45, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 170, 171, 172, 173, 174, 175, 176, 177, 180, 185, 188, 189, 190, 191, 192, 194, 202, 205, 206, 207, 208, 209, 218, 221, 222, 223, 224, 225, 237, 240, 241, 242, 243], "first": [4, 23, 45, 180, 194, 209, 225], "second": [4, 23, 45, 180, 194, 209, 225], "construct": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 180, 181, 182, 183, 194, 195, 196, 197, 198, 199, 200, 209, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "1": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "ident": [4, 5, 23, 24, 45, 46, 97, 98, 99, 100, 101, 102, 103, 180, 181, 194, 209, 225], "float": [4, 17, 23, 39, 45, 68, 178, 180, 194, 209, 225], "_valu": [4, 23, 45, 194, 209, 225], "_xx": [4, 23, 45], "_xy": [4, 23, 45, 209, 225], "_yx": [4, 23, 32, 45], "_yi": [4, 23, 45], "_y": [4, 23, 45, 194, 209, 225], "_x": [4, 23, 45, 194, 209, 225], "const": [4, 23, 45, 178, 180, 194, 209, 225], "_ptr": [4, 23, 45, 180, 194, 209, 225], "from": [4, 9, 19, 23, 30, 41, 45, 56, 70, 161, 162, 170, 180, 183, 189, 194, 198, 206, 209, 214, 222, 225, 232, 241], "pointer": [4, 9, 14, 23, 30, 36, 45, 56, 65, 180, 183, 184, 194, 198, 201, 209, 214, 217, 225, 232, 236], "_mat": [4, 23], "current": [4, 18, 19, 20, 21, 22, 23, 40, 41, 42, 43, 44, 45, 69, 70, 71, 72, 73, 180, 188, 189, 190, 191, 192, 194, 205, 206, 207, 208, 209, 221, 222, 223, 224, 225, 240, 241, 242, 243], "substract": [4, 19, 23, 41, 45, 70, 180, 189, 194, 206, 209, 222, 225, 241], "multipli": [4, 21, 22, 23, 43, 44, 45, 72, 73, 180, 191, 192, 194, 208, 209, 224, 225, 243], "scalar": [4, 18, 21, 23, 40, 43, 45, 69, 72, 83, 90, 91, 92, 93, 94, 95, 96, 125, 126, 127, 128, 129, 130, 131, 132, 135, 138, 141, 143, 144, 145, 178, 180, 188, 191, 192, 193, 194, 205, 208, 209, 221, 224, 225, 240, 243], "divid": [4, 18, 23, 40, 45, 69, 180, 188, 194, 205, 209, 221, 225, 240], "size_t": [4, 23, 45, 180, 194, 209, 225], "return": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "refer": [4, 16, 17, 23, 38, 39, 45, 67, 68, 180, 186, 194, 203, 209, 219, 225, 238], "els": [4, 16, 17, 23, 38, 39, 45, 67, 68, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 180, 186, 187, 194, 203, 204, 209, 219, 220, 225, 238, 239], "throw": [4, 16, 17, 23, 38, 39, 45, 67, 68, 180, 186, 187, 194, 203, 204, 209, 219, 220, 225, 238, 239], "an": [4, 16, 17, 23, 38, 39, 45, 67, 68, 83, 160, 171, 172, 178, 180, 186, 187, 194, 203, 204, 209, 219, 220, 225, 238, 239], "except": [4, 16, 17, 23, 38, 39, 45, 67, 68, 180, 186, 187, 194, 203, 204, 209, 219, 220, 225, 238, 239], "det": [4, 23, 45, 80, 81, 82], "determin": [4, 15, 23, 37, 45, 66, 80, 81, 82], "data": [4, 9, 23, 30, 45, 56, 180, 183, 194, 198, 209, 214, 225, 232], "": [4, 14, 23, 36, 45, 65, 180, 184, 194, 201, 209, 217, 225, 236], "element": [4, 14, 23, 36, 45, 65, 180, 184, 194, 201, 209, 217, 225, 236], "lh": [4, 23, 45, 180, 194, 209, 225], "rh": [4, 23, 45, 180, 194, 209, 225], "sum": [4, 20, 23, 42, 45, 71, 118, 119, 120, 121, 122, 123, 124, 180, 190, 194, 207, 209, 223, 225, 242], "between": [4, 18, 19, 20, 21, 22, 23, 40, 41, 42, 43, 44, 45, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 160, 178, 180, 188, 189, 190, 191, 192, 194, 205, 206, 207, 208, 209, 221, 222, 223, 224, 225, 240, 241, 242, 243], "two": [4, 14, 19, 20, 22, 23, 36, 41, 42, 44, 45, 65, 70, 71, 73, 75, 76, 77, 78, 79, 83, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 133, 136, 139, 142, 160, 178, 180, 184, 189, 190, 194, 206, 207, 209, 217, 222, 223, 225, 236, 241, 242], "differ": [4, 19, 23, 41, 45, 70, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 180, 189, 194, 206, 209, 222, 225, 241], "product": [4, 21, 22, 23, 43, 44, 45, 72, 73, 75, 76, 77, 78, 79, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 180, 191, 192, 194, 208, 209, 224, 225, 243], "quotient": [4, 18, 23, 40, 45, 69, 90, 91, 92, 93, 94, 95, 96, 180, 188, 194, 205, 209, 221, 225, 240], "bool": [4, 23, 45, 180, 194, 209, 225], "true": [4, 23, 45, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 180, 194, 209, 225], "ar": [4, 23, 45, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 175, 176, 177, 180, 193, 194, 209, 225], "fals": [4, 23, 45, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 180, 194, 209, 225], "transpos": [4, 23, 45], "mat": [4, 23, 45], "where": [4, 23, 45, 175, 176, 177], "invers": [4, 22, 23, 44, 45, 73, 133, 136, 139], "std": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "string": [4, 23, 45, 180, 194, 209, 225], "to_str": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 173, 174, 175, 176, 177, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 243], "under": [4, 23, 45, 163, 164, 165, 166, 167, 168, 169, 180, 194, 209, 225], "format": [4, 23, 45, 163, 164, 165, 166, 167, 168, 169, 180, 194, 209, 225], "iostream": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "main": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "m": [5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 82, 84, 85, 139, 146, 147, 148, 149, 156, 157, 158, 159, 161, 163, 164, 165, 173, 174], "cout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "endl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "result": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "000000": [5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 84, 85, 90, 91, 92, 94, 95, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 181, 182, 183, 186, 189, 190, 191, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 243], "0f": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "3": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 156, 157, 160, 163, 164, 165, 168, 169, 172, 174, 175, 176, 177, 180, 183, 184, 186, 187, 190, 199, 200, 203, 206, 207, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "4": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 80, 81, 82, 84, 85, 89, 90, 91, 92, 96, 97, 98, 99, 103, 104, 105, 106, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 140, 145, 151, 152, 154, 155, 160, 163, 164, 165, 169, 175, 176, 177, 180, 183, 186, 187, 200, 206, 207, 208, 216, 219, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "arrai": [9, 30, 56, 183, 198, 214, 232], "5": [10, 11, 16, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 81, 82, 84, 85, 89, 91, 92, 98, 99, 104, 105, 106, 110, 111, 112, 113, 115, 116, 117, 123, 124, 126, 127, 135, 136, 137, 138, 140, 164, 165, 176, 177, 184, 186, 187, 222, 223, 237, 238, 241, 242], "6": [10, 11, 16, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 81, 82, 91, 92, 98, 99, 105, 106, 111, 112, 113, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 138, 143, 144, 145, 164, 165, 176, 177, 206, 207, 222, 223, 224, 241, 242, 243], "7": [10, 11, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 81, 82, 91, 92, 98, 99, 105, 106, 112, 113, 116, 117, 123, 124, 126, 127, 135, 136, 137, 138, 164, 165, 176, 177], "8": [10, 11, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 91, 92, 98, 99, 105, 106, 112, 113, 117, 118, 119, 120, 126, 127, 135, 136, 138, 164, 165, 176, 177, 222, 241, 242, 243], "9": [10, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 91, 92, 98, 99, 105, 106, 112, 113, 125, 126, 127, 130, 131, 132, 135, 138, 144, 145, 148, 149, 164, 165, 176, 177, 223, 242], "b": [10, 11, 17, 19, 20, 22, 31, 39, 41, 42, 44, 68, 70, 71, 73, 74, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 157, 161, 166, 170, 175, 176, 177, 178, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 199, 200, 202, 204, 206, 207, 209, 216, 218, 220, 222, 223, 225, 237, 239, 241, 242], "10": [11, 19, 20, 31, 37, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82, 92, 99, 106, 113, 118, 119, 120, 127, 136, 138, 146, 147, 165, 177, 241], "11": [11, 31, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 92, 99, 106, 113, 127, 138, 165, 177], "12": [11, 31, 38, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 92, 99, 105, 106, 113, 119, 120, 123, 124, 125, 126, 127, 131, 132, 135, 138, 145, 165, 177], "13": [11, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 92, 99, 106, 113, 127, 138, 165, 177], "14": [11, 31, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 92, 99, 106, 113, 119, 120, 127, 138, 165, 177, 242], "15": [11, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 92, 99, 106, 113, 126, 127, 135, 138, 165, 177], "16": [11, 31, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 92, 99, 106, 113, 118, 119, 120, 127, 138, 148, 149, 165, 177], "access": [14, 36, 65, 184, 201, 217, 236], "char": [14, 36, 65, 184, 201, 217, 236], "sizeof": [14, 36, 65, 184, 201, 217, 236], "take": [14, 36, 65, 184, 201, 217, 236], "address": [14, 36, 65, 184, 201, 217, 236], "size": [14, 36, 65, 184, 201, 217, 236], "three": [14, 36, 65, 184, 236], "calcul": [15, 18, 19, 20, 21, 22, 37, 40, 41, 42, 43, 44, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 170, 171, 172, 173, 174, 175, 176, 177, 185, 188, 189, 190, 191, 192, 202, 205, 206, 207, 208, 218, 221, 222, 223, 224, 237, 240, 241, 242, 243], "thi": [15, 18, 19, 20, 21, 22, 37, 40, 41, 42, 43, 44, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 170, 171, 172, 173, 174, 175, 176, 177, 185, 188, 189, 190, 191, 192, 202, 205, 206, 207, 208, 218, 221, 222, 223, 224, 237, 240, 241, 242, 243], "wai": [15, 18, 19, 20, 21, 22, 37, 40, 41, 42, 43, 44, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 170, 171, 172, 173, 174, 175, 176, 177, 185, 188, 189, 190, 191, 192, 202, 205, 206, 207, 208, 218, 221, 222, 223, 224, 237, 240, 241, 242, 243], "error": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "termin": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "call": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "after": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "instanc": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "out_of_rang": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "what": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "out": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "rang": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "abort": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "d": [17, 39, 68, 73, 76, 81, 82, 86, 93, 100, 107, 114, 121, 128, 139, 141, 142, 157, 161, 166, 170, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 220, 239], "frac": [18, 40, 69, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 146, 147, 148, 149, 162, 171, 172, 188, 205, 221, 240], "500000": [18, 40, 69, 80, 82, 90, 91, 92, 93, 94, 95, 96, 112, 113, 116, 117, 146, 147, 154, 155, 160, 162, 188, 205, 221, 240], "z": [23, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 81, 82, 84, 85, 88, 89, 91, 92, 95, 96, 98, 99, 102, 103, 105, 106, 109, 110, 112, 113, 116, 117, 119, 120, 123, 124, 126, 127, 130, 131, 135, 136, 137, 138, 139, 140, 144, 145, 151, 152, 154, 155, 157, 159, 162, 164, 165, 168, 169, 174, 176, 177, 209, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243], "third": [23, 45, 180, 209, 225], "_xz": [23, 45], "_yz": [23, 45, 209, 225], "_zx": [23, 45], "_zy": [23, 45], "_zz": [23, 45], "_z": [23, 45, 209, 225], "translat": [23, 45], "2d": [23, 156, 158, 173], "accord": [23, 45, 156, 157, 158, 159, 173, 174], "rotat": [23, 45, 161], "angl": [23, 45, 162, 170, 171, 172, 178, 180, 193, 209], "radian": [23, 45, 156, 157, 170, 172, 178, 180, 209], "scale": [23, 45], "factor": [23, 45, 158, 159], "four": [36, 65], "five": [36, 65], "six": [36, 65], "seven": [36, 65], "eight": [36, 65], "small": [37, 73, 82, 97, 98, 99, 104, 105, 106, 139, 170], "25": [38, 67, 140, 184, 187], "18": [41, 42, 43, 70, 71, 72, 119, 120, 126, 127, 135, 138], "20": [41, 42, 67, 70, 71, 72, 120], "tini": [44, 136], "w": [45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 82, 89, 92, 96, 99, 103, 106, 110, 113, 117, 120, 124, 127, 131, 138, 139, 140, 145, 152, 155, 165, 169, 177, 225, 236, 237, 238, 239, 240, 241, 242, 243], "fourth": [45, 180, 225], "_xw": 45, "_yw": 45, "_zw": [45, 225], "_wx": 45, "_wy": 45, "_wz": 45, "_ww": 45, "_w": [45, 225], "3d": [45, 157, 159, 161, 174], "axi": [45, 193], "lookatlh": 45, "up": 45, "left": [45, 84, 86, 87, 88, 89, 148], "hand": [45, 84, 85, 146, 147, 148, 149], "look": [45, 84, 85], "view": [45, 84, 85], "lookatrh": 45, "right": [45, 84, 85, 86, 87, 88, 89, 149], "ortholh": 45, "bottom": 45, "top": 45, "far": 45, "orthograph": [45, 146, 147], "orthorh": 45, "perspectivelh": 45, "fovi": 45, "aspectratio": 45, "perspect": [45, 148, 149], "perspectiverh": 45, "to_mat4": 45, "qua": [45, 180, 209], "nine": 65, "ten": 65, "eleven": 65, "twelv": 65, "thirteen": 65, "fourteen": 65, "fifteen": 65, "scriptsiz": 66, "32": [66, 70, 71, 72, 119, 120], "64": [66, 119, 120], "480": 66, "250": 67, "e": [68, 73, 81, 82, 139, 157, 161, 187, 239], "22": [70, 71, 72, 120], "24": [70, 71, 72, 120, 126, 127, 135, 138], "26": [70, 71, 72, 119, 120], "28": [70, 71, 72, 120, 140], "30": [70, 71, 72, 120, 127, 138], "34": [70, 71], "17": [70, 71, 137, 140], "f": [73, 81, 82, 139, 157, 161], "j": [73, 82, 86, 93, 114, 121, 128, 139, 141, 142, 162, 166, 180, 183, 188, 189, 190, 191, 192], "n": [73, 82, 139, 194, 209, 225], "g": [73, 81, 82, 139, 157, 161], "k": [73, 82, 86, 93, 114, 121, 128, 139, 141, 142, 153, 154, 155, 162, 166, 180, 183, 188, 189, 190, 191, 192], "o": [73, 82, 139], "l": [73, 82, 139], "p": [73, 82, 139], "conj": 74, "bi": [74, 86, 93, 100, 107, 114, 121, 128, 141, 142, 180, 188, 189, 190, 191, 192], "cj": [74, 86, 93, 100, 107, 114, 121, 128, 141, 142, 180, 188, 189, 190, 191, 192], "dk": [74, 86, 93, 100, 107, 114, 121, 128, 141, 142, 180, 188, 189, 190, 191, 192], "25f": [74, 84, 85, 86, 93, 100, 107, 113, 114, 121, 128, 134, 137, 140, 141, 142, 166, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "5f": [74, 83, 84, 85, 86, 93, 100, 107, 112, 113, 114, 116, 117, 121, 128, 134, 137, 140, 141, 142, 153, 154, 155, 160, 166, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "75f": [74, 86, 93, 100, 107, 114, 121, 128, 141, 142, 166, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "250000i": [74, 166, 182, 183], "500000j": [74, 114, 121, 128, 141, 160, 162, 166, 182, 183], "750000k": [74, 166, 182, 183], "dot": [75, 180, 194, 209, 225], "time": [75, 84, 85], "cdot": [76, 77, 78, 79, 84, 85, 150, 151, 152, 153, 154, 155], "doe": [80, 81, 82, 150, 151, 152, 153, 154, 155, 157], "check": [80, 81, 82], "invert": [80, 81, 82], "null": [80, 81, 82], "inva": [80, 81, 82], "invb": [80, 81, 82], "undefin": [80, 81, 82], "behaviour": [80, 81, 82], "inf": [80, 81], "t": [81, 82, 175, 176, 177], "adj": [81, 82], "666667": 81, "333333": 81, "nan": 82, "linear": [83, 160, 178, 180], "interpol": [83, 160, 178, 180], "valu": [83, 160, 178, 180, 187, 194, 204, 209, 220, 225, 239], "realup": [84, 85], "forward": [84, 85], "norm": [84, 85, 86, 87, 88, 89], "707107": [84, 85], "313677": [84, 85], "633724": [84, 85], "896221": [84, 85], "443607": [84, 85], "949747": [84, 85], "061309": [84, 85], "598269": [84, 85], "same": [86, 87, 88, 89, 180, 194, 209, 225], "direct": [86, 87, 88, 89, 150, 151, 152, 153, 154, 155, 180, 194, 209, 225], "length": [86, 87, 88, 89, 180, 194, 209, 225], "36931": [86, 185], "730297": [86, 89], "182574i": 86, "365148j": 86, "547723k": 86, "23607": [87, 202], "447214": 87, "894427": 87, "74166": [88, 218], "267261": 88, "534522": 88, "801784": 88, "47723": [89, 237], "182574": 89, "365148": 89, "547723": 89, "125000i": [93, 188], "250000j": [93, 188], "375000k": [93, 188], "equal": [97, 98, 99, 100, 101, 102, 103], "inequ": [104, 105, 106, 107, 108, 109, 110], "neq": [104, 105, 106, 107, 108, 109, 110], "99f": 113, "2f": 113, "750000": [113, 134, 140], "010000": 113, "800000": 113, "000000i": [114, 181, 186], "250000k": [114, 121, 128, 141], "128": [119, 120], "256": [119, 120], "44": [119, 120], "78": [119, 120], "144": [119, 120], "274": [119, 120], "512": 120, "1024": 120, "2048": 120, "4096": 120, "8192": 120, "16384": 120, "32768": 120, "532": 120, "1046": 120, "2072": 120, "4122": 120, "8220": 120, "16414": 120, "32800": 120, "500000i": [121, 160, 162, 191], "19": 124, "21": [126, 127, 135, 138], "27": [126, 127, 135, 138], "33": [127, 138], "36": [127, 138, 140], "39": [127, 138], "42": [127, 138], "45": [127, 138], "48": [127, 138], "750000i": [128, 141], "875000": 134, "250000": 137, "187500": [137, 142, 192], "812500": 140, "562500": 140, "82f": [142, 189, 190, 192], "24f": [142, 189, 190, 192], "65f": [142, 189, 190, 192], "465000i": [142, 192], "692500j": [142, 192], "800000k": [142, 192], "100000": [146, 147], "050000": [146, 147], "tan": [148, 149], "785f": [148, 149], "03f": [148, 149], "100": [148, 149], "358760": [148, 149], "415574": [148, 149], "000300": [148, 149], "030009": [148, 149], "incid": [150, 151, 152, 153, 154, 155, 194, 209, 225], "normal": [150, 151, 152, 153, 154, 155, 157, 161, 170, 180, 185, 194, 202, 209, 218, 225, 237], "should": [150, 151, 152, 153, 154, 155, 157, 193, 194, 209, 225], "ratio": [153, 154, 155, 194, 209, 225], "indic": [153, 154, 155, 194, 209, 225], "case": [153, 154, 155], "text": [153, 154, 155], "sqrt": [153, 154, 155, 185, 202, 218, 237], "otherwis": [153, 154, 155], "322876": [153, 154, 155], "co": [156, 157, 162], "sin": [156, 157, 162], "pi": [156, 157, 171, 172], "14159265358979323846f": [156, 157], "rotationangl": [156, 157], "90": [156, 157], "spheric": [160, 180], "500000k": [160, 162, 191], "convers": [161, 162, 170], "q": [161, 162, 166, 170, 181, 182, 183, 184, 186, 187, 188, 191], "euler": [162, 170, 180, 193, 209], "v": [162, 167, 168, 169, 170, 195, 196, 197, 198, 201, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243], "570796f": 162, "000000f": 162, "repres": [170, 193, 209], "atan2": 170, "asin": 170, "570796": 170, "degre": [171, 178], "180": [171, 172], "14159": 172, "translationvector": [173, 174], "variou": 178, "torad": 178, "todeg": 178, "lerp": 178, "interpolationvalu": [178, 180], "_a": 180, "_b": 180, "_c": 180, "_d": 180, "conjug": 180, "slerp": 180, "to_quat": 180, "vec": [180, 194, 209, 225], "0i": 181, "0j": 181, "0k": 181, "000000j": [181, 186, 191], "000000k": [181, 186], "_bi": 182, "_cj": 182, "_dk": 182, "75": [184, 187], "570000i": 189, "260000j": 189, "100000k": 189, "070000i": 190, "740000j": 190, "400000k": 190, "object": 193, "multipl": 193, "point": 193, "etc": 193, "accordingli": 193, "_xyz": [194, 225], "_xyzw": [194, 209], "reflect": [194, 209, 225], "refract": [194, 209, 225], "ior": [194, 209, 225], "cross": 209, "to_vec3": 209, "_yzw": 225, "ec4": 241}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"get": 0, "start": 0, "nml": [0, 1, 2, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 27, 28, 29, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 188, 189, 190, 191, 192, 199, 200, 205, 206, 207, 208, 213, 215, 216, 221, 222, 223, 224, 229, 230, 231, 233, 234, 235, 240, 241, 242, 243], "add": 0, "cmake": 0, "project": 0, "us": 0, "nutshel": 1, "mathemat": 1, "librari": 1, "tabl": 1, "content": 1, "indic": 1, "matrix": 3, "mat2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 80, 90, 97, 104, 111, 118, 125, 132, 133, 134, 163, 175], "class": [4, 23, 45, 180, 194, 209, 225], "variabl": [4, 23, 45, 180, 194, 209, 225], "function": [4, 23, 45, 178, 180, 194, 209, 225], "constructor": [4, 23, 45, 180, 194, 209, 225], "oper": [4, 16, 17, 18, 19, 20, 21, 22, 23, 38, 39, 40, 41, 42, 43, 44, 45, 67, 68, 69, 70, 71, 72, 73, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 180, 186, 187, 188, 189, 190, 191, 192, 194, 203, 204, 205, 206, 207, 208, 209, 219, 220, 221, 222, 223, 224, 225, 238, 239, 240, 241, 242, 243], "namespac": [4, 23, 45, 178, 180, 194, 209, 225], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "float": [6, 7, 8, 9, 12, 14, 15, 18, 21, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 40, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 72, 76, 77, 78, 79, 83, 90, 91, 92, 93, 94, 95, 96, 125, 126, 127, 128, 129, 130, 131, 132, 135, 138, 141, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 160, 171, 172, 182, 183, 184, 185, 186, 187, 188, 191, 196, 197, 198, 201, 202, 203, 204, 205, 208, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 243], "_valu": [6, 25, 47, 196, 211, 227], "_xx": [7, 8, 26, 27, 28, 29, 48, 49, 50, 51, 52, 53, 54, 55], "_xy": [7, 8, 26, 27, 28, 29, 48, 49, 50, 51, 52, 53, 54, 55, 215, 233, 234], "_yx": [7, 12, 26, 27, 33, 48, 49, 50, 51, 57, 58, 59, 60], "_yi": [7, 12, 26, 27, 32, 33, 48, 49, 50, 51, 57, 58, 59, 60], "vec2": [8, 12, 13, 77, 87, 94, 101, 108, 115, 122, 129, 134, 143, 150, 153, 158, 167, 173, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 215, 229, 230, 233, 234], "_y": [8, 13, 28, 29, 34, 35, 52, 53, 54, 55, 61, 62, 63, 64, 197, 212, 228, 229], "const": [9, 15, 17, 18, 19, 20, 21, 22, 30, 37, 39, 40, 41, 42, 43, 44, 56, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 183, 187, 188, 189, 190, 191, 192, 198, 204, 205, 206, 207, 208, 214, 220, 221, 222, 223, 224, 232, 239, 240, 241, 242, 243], "_ptr": [9, 30, 56, 183, 198, 214, 232], "mat3": [10, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 81, 91, 98, 105, 112, 119, 126, 135, 136, 137, 156, 158, 164, 173, 176], "_mat": [10, 11, 31], "mat4": [11, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 82, 84, 85, 92, 99, 106, 113, 120, 127, 138, 139, 140, 146, 147, 148, 149, 157, 159, 161, 165, 174, 177], "_x": [12, 13, 32, 33, 34, 35, 57, 58, 59, 60, 61, 62, 63, 64, 197, 212, 213, 228, 229, 230, 231], "data": [14, 36, 65, 184, 201, 217, 236], "det": [15, 37, 66], "size_t": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "index": [16, 17, 38, 39, 67, 68, 186, 187, 203, 204, 219, 220, 238, 239], "other": [18, 19, 20, 21, 22, 40, 41, 42, 43, 44, 69, 70, 71, 72, 73, 178, 188, 189, 190, 191, 192, 205, 206, 207, 208, 221, 222, 223, 224, 240, 241, 242, 243], "_xz": [26, 27, 28, 29, 48, 49, 50, 51, 52, 53, 54, 55], "_yz": [26, 27, 32, 33, 48, 49, 50, 51, 57, 58, 59, 60, 213, 230], "_zx": [26, 28, 32, 34, 48, 49, 52, 53, 57, 58, 61, 62], "_zy": [26, 28, 32, 34, 48, 49, 52, 53, 57, 58, 61, 62], "_zz": [26, 28, 32, 34, 48, 49, 52, 53, 57, 58, 61, 62], "vec3": [27, 28, 29, 32, 33, 34, 35, 75, 78, 84, 85, 88, 95, 102, 109, 116, 123, 130, 137, 144, 151, 154, 157, 159, 162, 168, 170, 174, 199, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 231, 235], "_z": [27, 29, 33, 35, 50, 51, 54, 55, 59, 60, 63, 64, 212, 215, 228, 233], "_xw": [48, 49, 50, 51, 52, 53, 54, 55], "_yw": [48, 49, 50, 51, 57, 58, 59, 60], "_zw": [48, 49, 52, 53, 57, 58, 61, 62, 229, 234], "_wx": [48, 50, 52, 54, 57, 59, 61, 63], "_wy": [48, 50, 52, 54, 57, 59, 61, 63], "_wz": [48, 50, 52, 54, 57, 59, 61, 63], "_ww": [48, 50, 52, 54, 57, 59, 61, 63], "vec4": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 79, 89, 96, 103, 110, 117, 124, 131, 140, 145, 152, 155, 169, 200, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], "_w": [49, 51, 53, 55, 58, 60, 62, 64, 228, 230, 233, 235], "quat": [74, 76, 86, 93, 100, 107, 114, 121, 128, 141, 142, 160, 161, 162, 166, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "conjug": 74, "qua": [74, 86, 161, 170], "cross": 75, "b": [75, 76, 77, 78, 79, 83, 160], "dot": [76, 77, 78, 79], "invers": [80, 81, 82], "mat": [80, 81, 82, 175, 176, 177], "lerp": 83, "interpolationvalu": [83, 160], "lookatlh": 84, "from": [84, 85], "up": [84, 85], "lookatrh": 85, "normal": [86, 87, 88, 89], "vec": [87, 88, 89, 162, 163, 164, 165, 166, 167, 168, 169], "lh": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "rh": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "bool": [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "ortholh": 146, "left": [146, 147], "right": [146, 147], "bottom": [146, 147], "top": [146, 147], "far": [146, 147, 148, 149], "orthorh": 147, "perspectivelh": 148, "fovi": [148, 149], "aspectratio": [148, 149], "perspectiverh": 149, "reflect": [150, 151, 152], "i": [150, 151, 152, 153, 154, 155], "n": [150, 151, 152, 153, 154, 155], "refract": [153, 154, 155], "ior": [153, 154, 155], "rotat": [156, 157], "angl": [156, 157], "axi": 157, "scale": [158, 159], "slerp": 160, "to_mat4": 161, "to_quat": 162, "std": [163, 164, 165, 166, 167, 168, 169], "string": [163, 164, 165, 166, 167, 168, 169], "to_str": [163, 164, 165, 166, 167, 168, 169], "to_vec3": 170, "todeg": 171, "radian": 171, "torad": 172, "degre": 172, "translat": [173, 174], "transpos": [175, 176, 177], "quaternion": 179, "_a": 182, "_b": 182, "_c": 182, "_d": 182, "length": [185, 202, 218, 237], "vector": 193, "_xyz": [199, 235], "_xyzw": [200, 216], "_yzw": 231}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Getting started": [[0, "getting-started"]], "Get nml": [[0, "get-nml"]], "Add nml to a CMake project": [[0, "add-nml-to-a-cmake-project"]], "Use nml": [[0, "use-nml"]], "nml - Nutshell Mathematics Library": [[1, "nml-nutshell-mathematics-library"]], "Table of Contents": [[1, null]], "Indices and tables": [[1, "indices-and-tables"]], "nml": [[2, "nml"]], "Matrix": [[3, "matrix"]], "mat2": [[4, "mat2"]], "Class variables": [[4, "class-variables"], [23, "class-variables"], [45, "class-variables"], [180, "class-variables"], [194, "class-variables"], [209, "class-variables"], [225, "class-variables"]], "Class functions": [[4, "class-functions"], [23, "class-functions"], [45, "class-functions"], [180, "class-functions"], [194, "class-functions"], [209, "class-functions"], [225, "class-functions"]], "Constructors": [[4, "constructors"], [23, "constructors"], [45, "constructors"], [180, "constructors"], [194, "constructors"], [209, "constructors"], [225, "constructors"]], "Operators": [[4, "operators"], [4, "id1"], [23, "operators"], [23, "id1"], [45, "operators"], [45, "id1"], [180, "operators"], [180, "id1"], [194, "operators"], [194, "id1"], [209, "operators"], [209, "id1"], [225, "operators"], [225, "id1"]], "Functions": [[4, "functions"], [4, "id2"], [23, "functions"], [23, "id2"], [45, "functions"], [45, "id2"], [180, "functions"], [180, "id2"], [194, "functions"], [194, "id2"], [209, "functions"], [209, "id2"], [225, "functions"], [225, "id2"]], "Namespace functions": [[4, "namespace-functions"], [23, "namespace-functions"], [45, "namespace-functions"], [178, "namespace-functions"], [180, "namespace-functions"], [194, "namespace-functions"], [209, "namespace-functions"], [225, "namespace-functions"]], "mat2: mat2()": [[5, "mat2-mat2"]], "Example": [[5, "example"], [6, "example"], [7, "example"], [8, "example"], [9, "example"], [10, "example"], [11, "example"], [12, "example"], [13, "example"], [14, "example"], [15, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [20, "example"], [21, "example"], [22, "example"], [24, "example"], [25, "example"], [26, "example"], [27, "example"], [28, "example"], [29, "example"], [30, "example"], [31, "example"], [32, "example"], [33, "example"], [34, "example"], [35, "example"], [36, "example"], [37, "example"], [38, "example"], [39, "example"], [40, "example"], [41, "example"], [42, "example"], [43, "example"], [44, "example"], [46, "example"], [47, "example"], [48, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [93, "example"], [94, "example"], [95, "example"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [105, "example"], [106, "example"], [107, "example"], [108, "example"], [109, "example"], [110, "example"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [120, "example"], [121, "example"], [122, "example"], [123, "example"], [124, "example"], [125, "example"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [166, "example"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [175, "example"], [176, "example"], [177, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"], [199, "example"], [200, "example"], [201, "example"], [202, "example"], [203, "example"], [204, "example"], [205, "example"], [206, "example"], [207, "example"], [208, "example"], [210, "example"], [211, "example"], [212, "example"], [213, "example"], [214, "example"], [215, "example"], [216, "example"], [217, "example"], [218, "example"], [219, "example"], [220, "example"], [221, "example"], [222, "example"], [223, "example"], [224, "example"], [226, "example"], [227, "example"], [228, "example"], [229, "example"], [230, "example"], [231, "example"], [232, "example"], [233, "example"], [234, "example"], [235, "example"], [236, "example"], [237, "example"], [238, "example"], [239, "example"], [240, "example"], [241, "example"], [242, "example"], [243, "example"]], "mat2: mat2(float _value)": [[6, "mat2-mat2-float-value"]], "mat2: mat2(float _xx, float _xy, float _yx, float _yy)": [[7, "mat2-mat2-float-xx-float-xy-float-yx-float-yy"]], "mat2: mat2(float _xx, float _xy, nml::vec2 _y)": [[8, "mat2-mat2-float-xx-float-xy-nml-vec2-y"]], "mat2: mat2(const float* _ptr)": [[9, "mat2-mat2-const-float-ptr"]], "mat2: mat2(nml::mat3 _mat)": [[10, "mat2-mat2-nml-mat3-mat"]], "mat2: mat2(nml::mat4 _mat)": [[11, "mat2-mat2-nml-mat4-mat"]], "mat2: mat2(nml::vec2 _x, float _yx, float _yy)": [[12, "mat2-mat2-nml-vec2-x-float-yx-float-yy"]], "mat2: mat2(nml::vec2 _x, nml::vec2 _y)": [[13, "mat2-mat2-nml-vec2-x-nml-vec2-y"]], "mat2: float* data()": [[14, "mat2-float-data"]], "mat2: float det() const": [[15, "mat2-float-det-const"]], "mat2: nml::mat2& operator[](size_t index)": [[16, "mat2-nml-mat2-operator-size-t-index"]], "mat2: const nml::mat2& operator[](size_t index) const": [[17, "mat2-const-nml-mat2-operator-size-t-index-const"]], "mat2: nml::mat2& operator/=(const float other)": [[18, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator-=(const nml::mat2& other)": [[19, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator+=(const nml::mat2& other)": [[20, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator*=(const float other)": [[21, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator*=(const nml::mat2& other)": [[22, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat3": [[23, "mat3"]], "mat3: mat3()": [[24, "mat3-mat3"]], "mat3: mat3(float _value)": [[25, "mat3-mat3-float-value"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)": [[26, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _z)": [[27, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-nml-vec3-z"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, float _zx, float _zy, float _zz)": [[28, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-y-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _y, nml::vec3 _z)": [[29, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-y-nml-vec3-z"]], "mat3: mat3(const float* _ptr)": [[30, "mat3-mat3-const-float-ptr"]], "mat3: mat3(nml::mat4 _mat)": [[31, "mat3-mat3-nml-mat4-mat"]], "mat3: mat3(nml::vec3 _x, float _yy, float _yz, float _zx, float _zy, float _zz)": [[32, "mat3-mat3-nml-vec3-x-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _x, float _yx, float _yy, float _yz, nml::vec3 _z)": [[33, "mat3-mat3-nml-vec3-x-float-yx-float-yy-float-yz-nml-vec3-z"]], "mat3: mat3(nml::vec3 _x, nml::vec3 _y, float _zx, float _zy, float _zz)": [[34, "mat3-mat3-nml-vec3-x-nml-vec3-y-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _x, nml::vec3 _y, nml::vec3 _z)": [[35, "mat3-mat3-nml-vec3-x-nml-vec3-y-nml-vec3-z"]], "mat3: float* data()": [[36, "mat3-float-data"]], "mat3: float det() const": [[37, "mat3-float-det-const"]], "mat3: nml::mat3& operator[](size_t index)": [[38, "mat3-nml-mat3-operator-size-t-index"]], "mat3: const nml::mat3& operator[](size_t index) const": [[39, "mat3-const-nml-mat3-operator-size-t-index-const"]], "mat3: nml::mat3& operator/=(const float other)": [[40, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator-=(const nml::mat3& other)": [[41, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator+=(const nml::mat3& other)": [[42, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator*=(const float other)": [[43, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator*=(const nml::mat3& other)": [[44, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat4": [[45, "mat4"]], "mat4: mat4()": [[46, "mat4-mat4"]], "mat4: mat4(float _value)": [[47, "mat4-mat4-float-value"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[48, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[49, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[50, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)": [[51, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-nml-vec4-w"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[52, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[53, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[54, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)": [[55, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-y-nml-vec4-z-nml-vec4-w"]], "mat4: mat4(const float* _ptr)": [[56, "mat4-mat4-const-float-ptr"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[57, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[58, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[59, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, float _yx, float _yy, float _yz, float _yw, nml::vec4 _z, nml::vec4 _w)": [[60, "mat4-mat4-nml-vec4-x-float-yx-float-yy-float-yz-float-yw-nml-vec4-z-nml-vec4-w"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[61, "mat4-mat4-nml-vec4-x-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, float _zx, float _zy, float _zz, float _zw, nml::vec4 _w)": [[62, "mat4-mat4-nml-vec4-x-nml-vec4-y-float-zx-float-zy-float-zz-float-zw-nml-vec4-w"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, float _wx, float _wy, float _wz, float _ww)": [[63, "mat4-mat4-nml-vec4-x-nml-vec4-y-nml-vec4-z-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _x, nml::vec4 _y, nml::vec4 _z, nml::vec4 _w)": [[64, "mat4-mat4-nml-vec4-x-nml-vec4-y-nml-vec4-z-nml-vec4-w"]], "mat4: float* data()": [[65, "mat4-float-data"]], "mat4: float det() const": [[66, "mat4-float-det-const"]], "mat4: nml::mat4& operator[](size_t index)": [[67, "mat4-nml-mat4-operator-size-t-index"]], "mat4: const nml::mat4& operator[](size_t index) const": [[68, "mat4-const-nml-mat4-operator-size-t-index-const"]], "mat4: nml::mat4& operator/=(const float other)": [[69, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator-=(const nml::mat4& other)": [[70, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator+=(const nml::mat4& other)": [[71, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator*=(const float other)": [[72, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator*=(const nml::mat4& other)": [[73, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "nml::quat nml::conjugate(const nml::quat& qua)": [[74, "nml-quat-nml-conjugate-const-nml-quat-qua"]], "nml::vec3 nml::cross(const nml::vec3& a, const nml::vec3& b)": [[75, "nml-vec3-nml-cross-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::quat& a, const nml::quat& b)": [[76, "float-nml-dot-const-nml-quat-a-const-nml-quat-b"]], "float nml::dot(const nml::vec2& a, const nml::vec2& b)": [[77, "float-nml-dot-const-nml-vec2-a-const-nml-vec2-b"]], "float nml::dot(const nml::vec3& a, const nml::vec3& b)": [[78, "float-nml-dot-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::vec4& a, const nml::vec4& b)": [[79, "float-nml-dot-const-nml-vec4-a-const-nml-vec4-b"]], "nml::mat2 inverse(const nml::mat2& mat)": [[80, "nml-mat2-inverse-const-nml-mat2-mat"]], "nml::mat3 inverse(const nml::mat3& mat)": [[81, "nml-mat3-inverse-const-nml-mat3-mat"]], "nml::mat4 inverse(const nml::mat4& mat)": [[82, "nml-mat4-inverse-const-nml-mat4-mat"]], "float nml::lerp(const float& a, const float& b, const float interpolationValue)": [[83, "float-nml-lerp-const-float-a-const-float-b-const-float-interpolationvalue"]], "nml::mat4 lookAtLH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[84, "nml-mat4-lookatlh-const-nml-vec3-from-const-nml-vec3-to-const-nml-vec3-up"]], "nml::mat4 lookAtRH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[85, "nml-mat4-lookatrh-const-nml-vec3-from-const-nml-vec3-to-const-nml-vec3-up"]], "nml::quat nml::normalize(const nml::quat& qua)": [[86, "nml-quat-nml-normalize-const-nml-quat-qua"]], "nml::vec2 nml::normalize(const nml::vec2& vec)": [[87, "nml-vec2-nml-normalize-const-nml-vec2-vec"]], "nml::vec3 nml::normalize(const nml::vec3& vec)": [[88, "nml-vec3-nml-normalize-const-nml-vec3-vec"]], "nml::vec4 nml::normalize(const nml::vec4& vec)": [[89, "nml-vec4-nml-normalize-const-nml-vec4-vec"]], "nml::mat2 operator/(nml::mat2 lhs, const float rhs)": [[90, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat3 operator/(nml::mat3 lhs, const float rhs)": [[91, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat4 operator/(nml::mat4 lhs, const float rhs)": [[92, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::quat operator/(nml::quat lhs, const float rhs)": [[93, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::vec2 operator/(nml::vec2 lhs, const float rhs)": [[94, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator/(nml::vec3 lhs, const float rhs)": [[95, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator/(nml::vec4 lhs, const float rhs)": [[96, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "bool operator==(const nml::mat2& lhs, const nml::mat2& rhs)": [[97, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator==(const nml::mat3& lhs, const nml::mat3& rhs)": [[98, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator==(const nml::mat4& lhs, const nml::mat4& rhs)": [[99, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator==(const nml::quat& lhs, const nml::quat& rhs)": [[100, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator==(const nml::vec2& lhs, const nml::vec2& rhs)": [[101, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator==(const nml::vec3& lhs, const nml::vec3& rhs)": [[102, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator==(const nml::vec4& lhs, const nml::vec4& rhs)": [[103, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "bool operator!=(const nml::mat2& lhs, const nml::mat2& rhs)": [[104, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator!=(const nml::mat3& lhs, const nml::mat3& rhs)": [[105, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator!=(const nml::mat4& lhs, const nml::mat4& rhs)": [[106, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator!=(const nml::quat& lhs, const nml::quat& rhs)": [[107, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator!=(const nml::vec2& lhs, const nml::vec2& rhs)": [[108, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator!=(const nml::vec3& lhs, const nml::vec3& rhs)": [[109, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator!=(const nml::vec4& lhs, const nml::vec4& rhs)": [[110, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2& rhs)": [[111, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3& rhs)": [[112, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4& rhs)": [[113, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator-(nml::quat lhs, const nml::quat& rhs)": [[114, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2& rhs)": [[115, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3& rhs)": [[116, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4& rhs)": [[117, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2& rhs)": [[118, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3& rhs)": [[119, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4& rhs)": [[120, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator+(nml::quat lhs, const nml::quat& rhs)": [[121, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2& rhs)": [[122, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3& rhs)": [[123, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4& rhs)": [[124, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(float lhs, const nml::mat2& rhs)": [[125, "nml-mat2-operator-float-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator*(float lhs, const nml::mat3& rhs)": [[126, "nml-mat3-operator-float-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator*(float lhs, const nml::mat4& rhs)": [[127, "nml-mat4-operator-float-lhs-const-nml-mat4-rhs"]], "nml::quat operator*(float lhs, const nml::quat& rhs)": [[128, "nml-quat-operator-float-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(float lhs, const nml::vec2& rhs)": [[129, "nml-vec2-operator-float-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator*(float lhs, const nml::vec3& rhs)": [[130, "nml-vec3-operator-float-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator*(float lhs, const nml::vec4& rhs)": [[131, "nml-vec4-operator-float-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const float rhs)": [[132, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2& rhs)": [[133, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2& rhs)": [[134, "nml-vec2-operator-nml-mat2-lhs-const-nml-vec2-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const float rhs)": [[135, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3& rhs)": [[136, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3& rhs)": [[137, "nml-vec3-operator-nml-mat3-lhs-const-nml-vec3-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const float rhs)": [[138, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4& rhs)": [[139, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4& rhs)": [[140, "nml-vec4-operator-nml-mat4-lhs-const-nml-vec4-rhs"]], "nml::quat operator*(nml::quat lhs, const float rhs)": [[141, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::quat operator*(nml::quat lhs, const nml::quat& rhs)": [[142, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(nml::vec2 lhs, const float rhs)": [[143, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator*(nml::vec3 lhs, const float rhs)": [[144, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator*(nml::vec4 lhs, const float rhs)": [[145, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[146, "nml-mat4-ortholh-const-float-left-const-float-right-const-float-bottom-const-float-top-const-float-near-const-float-far"]], "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[147, "nml-mat4-orthorh-const-float-left-const-float-right-const-float-bottom-const-float-top-const-float-near-const-float-far"]], "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)": [[148, "nml-mat4-perspectivelh-const-float-fovy-const-float-aspectratio-const-float-near-const-float-far"]], "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)": [[149, "nml-mat4-perspectiverh-const-float-fovy-const-float-aspectratio-const-float-near-const-float-far"]], "nml::vec2 nml::reflect(const nml::vec2& i, const nml::vec2& n)": [[150, "nml-vec2-nml-reflect-const-nml-vec2-i-const-nml-vec2-n"]], "nml::vec3 nml::reflect(const nml::vec3& i, const nml::vec3& n)": [[151, "nml-vec3-nml-reflect-const-nml-vec3-i-const-nml-vec3-n"]], "nml::vec4 nml::reflect(const nml::vec4& i, const nml::vec4& n)": [[152, "nml-vec4-nml-reflect-const-nml-vec4-i-const-nml-vec4-n"]], "nml::vec2 nml::refract(const nml::vec2& i, const nml::vec2& n, float ior)": [[153, "nml-vec2-nml-refract-const-nml-vec2-i-const-nml-vec2-n-float-ior"]], "nml::vec3 nml::refract(const nml::vec3& i, const nml::vec3& n, float ior)": [[154, "nml-vec3-nml-refract-const-nml-vec3-i-const-nml-vec3-n-float-ior"]], "nml::vec4 nml::refract(const nml::vec4& i, const nml::vec4& n, float ior)": [[155, "nml-vec4-nml-refract-const-nml-vec4-i-const-nml-vec4-n-float-ior"]], "nml::mat3 rotate(const float angle)": [[156, "nml-mat3-rotate-const-float-angle"]], "nml::mat4 rotate(const float angle, const nml::vec3& axis)": [[157, "nml-mat4-rotate-const-float-angle-const-nml-vec3-axis"]], "nml::mat3 scale(const nml::vec2& scaling)": [[158, "nml-mat3-scale-const-nml-vec2-scaling"]], "nml::mat4 scale(const nml::vec3& scaling)": [[159, "nml-mat4-scale-const-nml-vec3-scaling"]], "quat nml::slerp(const quat& a, const quat& b, const float interpolationValue)": [[160, "quat-nml-slerp-const-quat-a-const-quat-b-const-float-interpolationvalue"]], "nml::mat4 nml::to_mat4(const nml::quat& qua)": [[161, "nml-mat4-nml-to-mat4-const-nml-quat-qua"]], "nml::quat nml::to_quat(const nml::vec3& vec)": [[162, "nml-quat-nml-to-quat-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::mat2& vec)": [[163, "std-string-nml-to-string-const-nml-mat2-vec"]], "std::string nml::to_string(const nml::mat3& vec)": [[164, "std-string-nml-to-string-const-nml-mat3-vec"]], "std::string nml::to_string(const nml::mat4& vec)": [[165, "std-string-nml-to-string-const-nml-mat4-vec"]], "std::string nml::to_string(const nml::quat& vec)": [[166, "std-string-nml-to-string-const-nml-quat-vec"]], "std::string nml::to_string(const nml::vec2& vec)": [[167, "std-string-nml-to-string-const-nml-vec2-vec"]], "std::string nml::to_string(const nml::vec3& vec)": [[168, "std-string-nml-to-string-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::vec4& vec)": [[169, "std-string-nml-to-string-const-nml-vec4-vec"]], "nml::vec3 nml::to_vec3(const nml::quat& qua)": [[170, "nml-vec3-nml-to-vec3-const-nml-quat-qua"]], "float nml::toDeg(const float radians)": [[171, "float-nml-todeg-const-float-radians"]], "float nml::toRad(const float degrees)": [[172, "float-nml-torad-const-float-degrees"]], "nml::mat3 translate(const nml::vec2& translation)": [[173, "nml-mat3-translate-const-nml-vec2-translation"]], "nml::mat4 translate(const nml::vec3& translation)": [[174, "nml-mat4-translate-const-nml-vec3-translation"]], "nml::mat2 transpose(const nml::mat2& mat)": [[175, "nml-mat2-transpose-const-nml-mat2-mat"]], "nml::mat3 transpose(const nml::mat3& mat)": [[176, "nml-mat3-transpose-const-nml-mat3-mat"]], "nml::mat4 transpose(const nml::mat4& mat)": [[177, "nml-mat4-transpose-const-nml-mat4-mat"]], "Other": [[178, "other"]], "Quaternion": [[179, "quaternion"]], "quat": [[180, "quat"]], "quat: quat()": [[181, "quat-quat"]], "quat: quat(float _a, float _b, float _c, float _d)": [[182, "quat-quat-float-a-float-b-float-c-float-d"]], "quat: quat(const float* _ptr)": [[183, "quat-quat-const-float-ptr"]], "quat: float* data()": [[184, "quat-float-data"]], "quat: float length()": [[185, "quat-float-length"]], "quat: float& operator[](size_t index)": [[186, "quat-float-operator-size-t-index"]], "quat: const float operator[](size_t index) const": [[187, "quat-const-float-operator-size-t-index-const"]], "quat: nml::quat& operator/=(const float other)": [[188, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator-=(const nml::quat& other)": [[189, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator+=(const nml::quat& other)": [[190, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator*=(const float other)": [[191, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator*=(const nml::quat& other)": [[192, "quat-nml-quat-operator-const-nml-quat-other"]], "Vector": [[193, "vector"]], "vec2": [[194, "vec2"]], "vec2: vec2()": [[195, "vec2-vec2"]], "vec2: vec2(float _value)": [[196, "vec2-vec2-float-value"]], "vec2: vec2(float _x, float _y)": [[197, "vec2-vec2-float-x-float-y"]], "vec2: vec2(const float* _ptr)": [[198, "vec2-vec2-const-float-ptr"]], "vec2: vec2(nml::vec3 _xyz)": [[199, "vec2-vec2-nml-vec3-xyz"]], "vec2: vec2(nml::vec4 _xyzw)": [[200, "vec2-vec2-nml-vec4-xyzw"]], "vec2: float* data()": [[201, "vec2-float-data"]], "vec2: float length()": [[202, "vec2-float-length"]], "vec2: float& operator[](size_t index)": [[203, "vec2-float-operator-size-t-index"]], "vec2: const float operator[](size_t index) const": [[204, "vec2-const-float-operator-size-t-index-const"]], "vec2: nml::vec2& operator/=(const float other)": [[205, "vec2-nml-vec2-operator-const-float-other"]], "vec2: nml::vec2& operator-=(const nml::vec2& other)": [[206, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator+=(const nml::vec2& other)": [[207, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator*=(const float other)": [[208, "vec2-nml-vec2-operator-const-float-other"]], "vec3": [[209, "vec3"]], "vec3: vec3()": [[210, "vec3-vec3"]], "vec3: vec3(float _value)": [[211, "vec3-vec3-float-value"]], "vec3: vec3(float _x, float _y, float _z)": [[212, "vec3-vec3-float-x-float-y-float-z"]], "vec3: vec3(float _x, nml::vec2 _yz)": [[213, "vec3-vec3-float-x-nml-vec2-yz"]], "vec3: vec3(const float* _ptr)": [[214, "vec3-vec3-const-float-ptr"]], "vec3: vec3(nml::vec2 _xy, float _z)": [[215, "vec3-vec3-nml-vec2-xy-float-z"]], "vec3: vec3(nml::vec4 _xyzw)": [[216, "vec3-vec3-nml-vec4-xyzw"]], "vec3: float* data()": [[217, "vec3-float-data"]], "vec3: float length()": [[218, "vec3-float-length"]], "vec3: float& operator[](size_t index)": [[219, "vec3-float-operator-size-t-index"]], "vec3: const float operator[](size_t index) const": [[220, "vec3-const-float-operator-size-t-index-const"]], "vec3: nml::vec3& operator/=(const float other)": [[221, "vec3-nml-vec3-operator-const-float-other"]], "vec3: nml::vec3& operator-=(const nml::vec3& other)": [[222, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator+=(const nml::vec3& other)": [[223, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator*=(const float other)": [[224, "vec3-nml-vec3-operator-const-float-other"]], "vec4": [[225, "vec4"]], "vec4: vec4()": [[226, "vec4-vec4"]], "vec4: vec4(float _value)": [[227, "vec4-vec4-float-value"]], "vec4: vec4(float _x, float _y, float _z, float _w)": [[228, "vec4-vec4-float-x-float-y-float-z-float-w"]], "vec4: vec4(float _x, float _y, nml::vec2 _zw)": [[229, "vec4-vec4-float-x-float-y-nml-vec2-zw"]], "vec4: vec4(float _x, nml::vec2 _yz, float _w)": [[230, "vec4-vec4-float-x-nml-vec2-yz-float-w"]], "vec4: vec4(float _x, nml::vec3 _yzw)": [[231, "vec4-vec4-float-x-nml-vec3-yzw"]], "vec4: vec4(const float* _ptr)": [[232, "vec4-vec4-const-float-ptr"]], "vec4: vec4(nml::vec2 _xy, float _z, float _w)": [[233, "vec4-vec4-nml-vec2-xy-float-z-float-w"]], "vec4: vec4(nml::vec2 _xy, nml::vec2 _zw)": [[234, "vec4-vec4-nml-vec2-xy-nml-vec2-zw"]], "vec4: vec4(nml::vec3 _xyz, float _w)": [[235, "vec4-vec4-nml-vec3-xyz-float-w"]], "vec4: float* data()": [[236, "vec4-float-data"]], "vec4: float length()": [[237, "vec4-float-length"]], "vec4: float& operator[](size_t index)": [[238, "vec4-float-operator-size-t-index"]], "vec4: const float operator[](size_t index) const": [[239, "vec4-const-float-operator-size-t-index-const"]], "vec4: nml::vec4& operator/=(const float other)": [[240, "vec4-nml-vec4-operator-const-float-other"]], "vec4: nml::vec4& operator-=(const nml::vec4& other)": [[241, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator+=(const nml::vec4& other)": [[242, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator*=(const float other)": [[243, "vec4-nml-vec4-operator-const-float-other"]]}, "indexentries": {}})