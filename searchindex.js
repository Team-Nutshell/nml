Search.setIndex({"docnames": ["getting_started/index", "index", "nml/index", "nml/matrix/index", "nml/matrix/mat2", "nml/matrix/mat2/constructor", "nml/matrix/mat2/constructor_float", "nml/matrix/mat2/constructor_float_float_float_float", "nml/matrix/mat2/constructor_float_float_vec2", "nml/matrix/mat2/constructor_vec2_float_float", "nml/matrix/mat2/constructor_vec2_vec2", "nml/matrix/mat2/data", "nml/matrix/mat2/det", "nml/matrix/mat2/operator_brackets_ref", "nml/matrix/mat2/operator_brackets_value", "nml/matrix/mat2/operator_divide_equal_float", "nml/matrix/mat2/operator_minus_equal_mat2", "nml/matrix/mat2/operator_plus_equal_mat2", "nml/matrix/mat2/operator_times_equal_float", "nml/matrix/mat2/operator_times_equal_mat2", "nml/matrix/mat3", "nml/matrix/mat3/constructor", "nml/matrix/mat3/constructor_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float", "nml/matrix/mat3/constructor_vec3_vec3_vec3", "nml/matrix/mat3/data", "nml/matrix/mat3/det", "nml/matrix/mat3/operator_brackets_ref", "nml/matrix/mat3/operator_brackets_value", "nml/matrix/mat3/operator_divide_equal_float", "nml/matrix/mat3/operator_minus_equal_mat3", "nml/matrix/mat3/operator_plus_equal_mat3", "nml/matrix/mat3/operator_times_equal_float", "nml/matrix/mat3/operator_times_equal_mat3", "nml/matrix/mat4", "nml/matrix/mat4/constructor", "nml/matrix/mat4/constructor_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4", "nml/matrix/mat4/data", "nml/matrix/mat4/det", "nml/matrix/mat4/operator_brackets_ref", "nml/matrix/mat4/operator_brackets_value", "nml/matrix/mat4/operator_divide_equal_float", "nml/matrix/mat4/operator_minus_equal_mat4", "nml/matrix/mat4/operator_plus_equal_mat4", "nml/matrix/mat4/operator_times_equal_float", "nml/matrix/mat4/operator_times_equal_mat4", "nml/namespace/nml_conjugate_quat", "nml/namespace/nml_cross_vec3_vec3", "nml/namespace/nml_dot_vec2_vec2", "nml/namespace/nml_dot_vec3_vec3", "nml/namespace/nml_dot_vec4_vec4", "nml/namespace/nml_inverse_mat2", "nml/namespace/nml_inverse_mat3", "nml/namespace/nml_inverse_mat4", "nml/namespace/nml_normalize_quat", "nml/namespace/nml_normalize_vec2", "nml/namespace/nml_normalize_vec3", "nml/namespace/nml_normalize_vec4", "nml/namespace/nml_operator_divide_mat2_float", "nml/namespace/nml_operator_divide_mat3_float", "nml/namespace/nml_operator_divide_mat4_float", "nml/namespace/nml_operator_divide_quat_float", "nml/namespace/nml_operator_divide_vec2_float", "nml/namespace/nml_operator_divide_vec3_float", "nml/namespace/nml_operator_divide_vec4_float", "nml/namespace/nml_operator_is_equal_mat2_mat2", "nml/namespace/nml_operator_is_equal_mat3_mat3", "nml/namespace/nml_operator_is_equal_mat4_mat4", "nml/namespace/nml_operator_is_equal_quat_quat", "nml/namespace/nml_operator_is_equal_vec2_vec2", "nml/namespace/nml_operator_is_equal_vec3_vec3", "nml/namespace/nml_operator_is_equal_vec4_vec4", "nml/namespace/nml_operator_is_not_equal_mat2_mat2", "nml/namespace/nml_operator_is_not_equal_mat3_mat3", "nml/namespace/nml_operator_is_not_equal_mat4_mat4", "nml/namespace/nml_operator_is_not_equal_quat_quat", "nml/namespace/nml_operator_is_not_equal_vec2_vec2", "nml/namespace/nml_operator_is_not_equal_vec3_vec3", "nml/namespace/nml_operator_is_not_equal_vec4_vec4", "nml/namespace/nml_operator_minus_mat2_mat2", "nml/namespace/nml_operator_minus_mat3_mat3", "nml/namespace/nml_operator_minus_mat4_mat4", "nml/namespace/nml_operator_minus_quat_quat", "nml/namespace/nml_operator_minus_vec2_vec2", "nml/namespace/nml_operator_minus_vec3_vec3", "nml/namespace/nml_operator_minus_vec4_vec4", "nml/namespace/nml_operator_plus_mat2_mat2", "nml/namespace/nml_operator_plus_mat3_mat3", "nml/namespace/nml_operator_plus_mat4_mat4", "nml/namespace/nml_operator_plus_quat_quat", "nml/namespace/nml_operator_plus_vec2_vec2", "nml/namespace/nml_operator_plus_vec3_vec3", "nml/namespace/nml_operator_plus_vec4_vec4", "nml/namespace/nml_operator_times_float_mat2", "nml/namespace/nml_operator_times_float_mat3", "nml/namespace/nml_operator_times_float_mat4", "nml/namespace/nml_operator_times_float_quat", "nml/namespace/nml_operator_times_float_vec2", "nml/namespace/nml_operator_times_float_vec3", "nml/namespace/nml_operator_times_float_vec4", "nml/namespace/nml_operator_times_mat2_float", "nml/namespace/nml_operator_times_mat2_mat2", "nml/namespace/nml_operator_times_mat2_vec2", "nml/namespace/nml_operator_times_mat3_float", "nml/namespace/nml_operator_times_mat3_mat3", "nml/namespace/nml_operator_times_mat3_vec3", "nml/namespace/nml_operator_times_mat4_float", "nml/namespace/nml_operator_times_mat4_mat4", "nml/namespace/nml_operator_times_mat4_vec4", "nml/namespace/nml_operator_times_quat_float", "nml/namespace/nml_operator_times_quat_quat", "nml/namespace/nml_operator_times_vec2_float", "nml/namespace/nml_operator_times_vec3_float", "nml/namespace/nml_operator_times_vec4_float", "nml/namespace/nml_reflect_vec2_vec2", "nml/namespace/nml_reflect_vec3_vec3", "nml/namespace/nml_reflect_vec4_vec4", "nml/namespace/nml_refract_vec2_vec2_float", "nml/namespace/nml_refract_vec3_vec3_float", "nml/namespace/nml_refract_vec4_vec4_float", "nml/namespace/nml_rotate_float", "nml/namespace/nml_rotate_float_vec3", "nml/namespace/nml_scale_vec2", "nml/namespace/nml_scale_vec3", "nml/namespace/nml_to_mat4_quat", "nml/namespace/nml_to_quat_vec3", "nml/namespace/nml_to_string_mat2", "nml/namespace/nml_to_string_mat3", "nml/namespace/nml_to_string_mat4", "nml/namespace/nml_to_string_quat", "nml/namespace/nml_to_string_vec2", "nml/namespace/nml_to_string_vec3", "nml/namespace/nml_to_string_vec4", "nml/namespace/nml_to_vec3_quat", "nml/namespace/nml_translate_vec2", "nml/namespace/nml_translate_vec3", "nml/namespace/nml_transpose_mat2", "nml/namespace/nml_transpose_mat3", "nml/namespace/nml_transpose_mat4", "nml/quaternion/index", "nml/quaternion/quat", "nml/quaternion/quat/constructor", "nml/quaternion/quat/constructor_float_float_float_float", "nml/quaternion/quat/data", "nml/quaternion/quat/length", "nml/quaternion/quat/operator_brackets_ref", "nml/quaternion/quat/operator_brackets_value", "nml/quaternion/quat/operator_divide_equal_float", "nml/quaternion/quat/operator_minus_equal_quat", "nml/quaternion/quat/operator_plus_equal_quat", "nml/quaternion/quat/operator_times_equal_float", "nml/quaternion/quat/operator_times_equal_quat", "nml/vector/index", "nml/vector/vec2", "nml/vector/vec2/constructor", "nml/vector/vec2/constructor_float", "nml/vector/vec2/constructor_float_float", "nml/vector/vec2/data", "nml/vector/vec2/length", "nml/vector/vec2/operator_brackets_ref", "nml/vector/vec2/operator_brackets_value", "nml/vector/vec2/operator_divide_equal_float", "nml/vector/vec2/operator_minus_equal_vec2", "nml/vector/vec2/operator_plus_equal_vec2", "nml/vector/vec2/operator_times_equal_float", "nml/vector/vec3", "nml/vector/vec3/constructor", "nml/vector/vec3/constructor_float", "nml/vector/vec3/constructor_float_float_float", "nml/vector/vec3/constructor_float_vec2", "nml/vector/vec3/constructor_vec2_float", "nml/vector/vec3/data", "nml/vector/vec3/length", "nml/vector/vec3/operator_brackets_ref", "nml/vector/vec3/operator_brackets_value", "nml/vector/vec3/operator_divide_equal_float", "nml/vector/vec3/operator_minus_equal_vec3", "nml/vector/vec3/operator_plus_equal_vec3", "nml/vector/vec3/operator_times_equal_float", "nml/vector/vec4", "nml/vector/vec4/constructor", "nml/vector/vec4/constructor_float", "nml/vector/vec4/constructor_float_float_float_float", "nml/vector/vec4/constructor_float_float_vec2", "nml/vector/vec4/constructor_float_vec2_float", "nml/vector/vec4/constructor_float_vec3", "nml/vector/vec4/constructor_vec2_float_float", "nml/vector/vec4/constructor_vec2_vec2", "nml/vector/vec4/constructor_vec3_float", "nml/vector/vec4/data", "nml/vector/vec4/length", "nml/vector/vec4/operator_brackets_ref", "nml/vector/vec4/operator_brackets_value", "nml/vector/vec4/operator_divide_equal_float", "nml/vector/vec4/operator_minus_equal_vec4", "nml/vector/vec4/operator_plus_equal_vec4", "nml/vector/vec4/operator_times_equal_float"], "filenames": ["getting_started/index.rst", "index.rst", "nml/index.rst", "nml/matrix/index.rst", "nml/matrix/mat2.rst", "nml/matrix/mat2/constructor.rst", "nml/matrix/mat2/constructor_float.rst", "nml/matrix/mat2/constructor_float_float_float_float.rst", "nml/matrix/mat2/constructor_float_float_vec2.rst", "nml/matrix/mat2/constructor_vec2_float_float.rst", "nml/matrix/mat2/constructor_vec2_vec2.rst", "nml/matrix/mat2/data.rst", "nml/matrix/mat2/det.rst", "nml/matrix/mat2/operator_brackets_ref.rst", "nml/matrix/mat2/operator_brackets_value.rst", "nml/matrix/mat2/operator_divide_equal_float.rst", "nml/matrix/mat2/operator_minus_equal_mat2.rst", "nml/matrix/mat2/operator_plus_equal_mat2.rst", "nml/matrix/mat2/operator_times_equal_float.rst", "nml/matrix/mat2/operator_times_equal_mat2.rst", "nml/matrix/mat3.rst", "nml/matrix/mat3/constructor.rst", "nml/matrix/mat3/constructor_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_vec3_vec3.rst", "nml/matrix/mat3/data.rst", "nml/matrix/mat3/det.rst", "nml/matrix/mat3/operator_brackets_ref.rst", "nml/matrix/mat3/operator_brackets_value.rst", "nml/matrix/mat3/operator_divide_equal_float.rst", "nml/matrix/mat3/operator_minus_equal_mat3.rst", "nml/matrix/mat3/operator_plus_equal_mat3.rst", "nml/matrix/mat3/operator_times_equal_float.rst", "nml/matrix/mat3/operator_times_equal_mat3.rst", "nml/matrix/mat4.rst", "nml/matrix/mat4/constructor.rst", "nml/matrix/mat4/constructor_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4.rst", "nml/matrix/mat4/data.rst", "nml/matrix/mat4/det.rst", "nml/matrix/mat4/operator_brackets_ref.rst", "nml/matrix/mat4/operator_brackets_value.rst", "nml/matrix/mat4/operator_divide_equal_float.rst", "nml/matrix/mat4/operator_minus_equal_mat4.rst", "nml/matrix/mat4/operator_plus_equal_mat4.rst", "nml/matrix/mat4/operator_times_equal_float.rst", "nml/matrix/mat4/operator_times_equal_mat4.rst", "nml/namespace/nml_conjugate_quat.rst", "nml/namespace/nml_cross_vec3_vec3.rst", "nml/namespace/nml_dot_vec2_vec2.rst", "nml/namespace/nml_dot_vec3_vec3.rst", "nml/namespace/nml_dot_vec4_vec4.rst", "nml/namespace/nml_inverse_mat2.rst", "nml/namespace/nml_inverse_mat3.rst", "nml/namespace/nml_inverse_mat4.rst", "nml/namespace/nml_normalize_quat.rst", "nml/namespace/nml_normalize_vec2.rst", "nml/namespace/nml_normalize_vec3.rst", "nml/namespace/nml_normalize_vec4.rst", "nml/namespace/nml_operator_divide_mat2_float.rst", "nml/namespace/nml_operator_divide_mat3_float.rst", "nml/namespace/nml_operator_divide_mat4_float.rst", "nml/namespace/nml_operator_divide_quat_float.rst", "nml/namespace/nml_operator_divide_vec2_float.rst", "nml/namespace/nml_operator_divide_vec3_float.rst", "nml/namespace/nml_operator_divide_vec4_float.rst", "nml/namespace/nml_operator_is_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_equal_quat_quat.rst", "nml/namespace/nml_operator_is_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_equal_vec4_vec4.rst", "nml/namespace/nml_operator_is_not_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_not_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_not_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_not_equal_quat_quat.rst", "nml/namespace/nml_operator_is_not_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_not_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_not_equal_vec4_vec4.rst", "nml/namespace/nml_operator_minus_mat2_mat2.rst", "nml/namespace/nml_operator_minus_mat3_mat3.rst", "nml/namespace/nml_operator_minus_mat4_mat4.rst", "nml/namespace/nml_operator_minus_quat_quat.rst", "nml/namespace/nml_operator_minus_vec2_vec2.rst", "nml/namespace/nml_operator_minus_vec3_vec3.rst", "nml/namespace/nml_operator_minus_vec4_vec4.rst", "nml/namespace/nml_operator_plus_mat2_mat2.rst", "nml/namespace/nml_operator_plus_mat3_mat3.rst", "nml/namespace/nml_operator_plus_mat4_mat4.rst", "nml/namespace/nml_operator_plus_quat_quat.rst", "nml/namespace/nml_operator_plus_vec2_vec2.rst", "nml/namespace/nml_operator_plus_vec3_vec3.rst", "nml/namespace/nml_operator_plus_vec4_vec4.rst", "nml/namespace/nml_operator_times_float_mat2.rst", "nml/namespace/nml_operator_times_float_mat3.rst", "nml/namespace/nml_operator_times_float_mat4.rst", "nml/namespace/nml_operator_times_float_quat.rst", "nml/namespace/nml_operator_times_float_vec2.rst", "nml/namespace/nml_operator_times_float_vec3.rst", "nml/namespace/nml_operator_times_float_vec4.rst", "nml/namespace/nml_operator_times_mat2_float.rst", "nml/namespace/nml_operator_times_mat2_mat2.rst", "nml/namespace/nml_operator_times_mat2_vec2.rst", "nml/namespace/nml_operator_times_mat3_float.rst", "nml/namespace/nml_operator_times_mat3_mat3.rst", "nml/namespace/nml_operator_times_mat3_vec3.rst", "nml/namespace/nml_operator_times_mat4_float.rst", "nml/namespace/nml_operator_times_mat4_mat4.rst", "nml/namespace/nml_operator_times_mat4_vec4.rst", "nml/namespace/nml_operator_times_quat_float.rst", "nml/namespace/nml_operator_times_quat_quat.rst", "nml/namespace/nml_operator_times_vec2_float.rst", "nml/namespace/nml_operator_times_vec3_float.rst", "nml/namespace/nml_operator_times_vec4_float.rst", "nml/namespace/nml_reflect_vec2_vec2.rst", "nml/namespace/nml_reflect_vec3_vec3.rst", "nml/namespace/nml_reflect_vec4_vec4.rst", "nml/namespace/nml_refract_vec2_vec2_float.rst", "nml/namespace/nml_refract_vec3_vec3_float.rst", "nml/namespace/nml_refract_vec4_vec4_float.rst", "nml/namespace/nml_rotate_float.rst", "nml/namespace/nml_rotate_float_vec3.rst", "nml/namespace/nml_scale_vec2.rst", "nml/namespace/nml_scale_vec3.rst", "nml/namespace/nml_to_mat4_quat.rst", "nml/namespace/nml_to_quat_vec3.rst", "nml/namespace/nml_to_string_mat2.rst", "nml/namespace/nml_to_string_mat3.rst", "nml/namespace/nml_to_string_mat4.rst", "nml/namespace/nml_to_string_quat.rst", "nml/namespace/nml_to_string_vec2.rst", "nml/namespace/nml_to_string_vec3.rst", "nml/namespace/nml_to_string_vec4.rst", "nml/namespace/nml_to_vec3_quat.rst", "nml/namespace/nml_translate_vec2.rst", "nml/namespace/nml_translate_vec3.rst", "nml/namespace/nml_transpose_mat2.rst", "nml/namespace/nml_transpose_mat3.rst", "nml/namespace/nml_transpose_mat4.rst", "nml/quaternion/index.rst", "nml/quaternion/quat.rst", "nml/quaternion/quat/constructor.rst", "nml/quaternion/quat/constructor_float_float_float_float.rst", "nml/quaternion/quat/data.rst", "nml/quaternion/quat/length.rst", "nml/quaternion/quat/operator_brackets_ref.rst", "nml/quaternion/quat/operator_brackets_value.rst", "nml/quaternion/quat/operator_divide_equal_float.rst", "nml/quaternion/quat/operator_minus_equal_quat.rst", "nml/quaternion/quat/operator_plus_equal_quat.rst", "nml/quaternion/quat/operator_times_equal_float.rst", "nml/quaternion/quat/operator_times_equal_quat.rst", "nml/vector/index.rst", "nml/vector/vec2.rst", "nml/vector/vec2/constructor.rst", "nml/vector/vec2/constructor_float.rst", "nml/vector/vec2/constructor_float_float.rst", "nml/vector/vec2/data.rst", "nml/vector/vec2/length.rst", "nml/vector/vec2/operator_brackets_ref.rst", "nml/vector/vec2/operator_brackets_value.rst", "nml/vector/vec2/operator_divide_equal_float.rst", "nml/vector/vec2/operator_minus_equal_vec2.rst", "nml/vector/vec2/operator_plus_equal_vec2.rst", "nml/vector/vec2/operator_times_equal_float.rst", "nml/vector/vec3.rst", "nml/vector/vec3/constructor.rst", "nml/vector/vec3/constructor_float.rst", "nml/vector/vec3/constructor_float_float_float.rst", "nml/vector/vec3/constructor_float_vec2.rst", "nml/vector/vec3/constructor_vec2_float.rst", "nml/vector/vec3/data.rst", "nml/vector/vec3/length.rst", "nml/vector/vec3/operator_brackets_ref.rst", "nml/vector/vec3/operator_brackets_value.rst", "nml/vector/vec3/operator_divide_equal_float.rst", "nml/vector/vec3/operator_minus_equal_vec3.rst", "nml/vector/vec3/operator_plus_equal_vec3.rst", "nml/vector/vec3/operator_times_equal_float.rst", "nml/vector/vec4.rst", "nml/vector/vec4/constructor.rst", "nml/vector/vec4/constructor_float.rst", "nml/vector/vec4/constructor_float_float_float_float.rst", "nml/vector/vec4/constructor_float_float_vec2.rst", "nml/vector/vec4/constructor_float_vec2_float.rst", "nml/vector/vec4/constructor_float_vec3.rst", "nml/vector/vec4/constructor_vec2_float_float.rst", "nml/vector/vec4/constructor_vec2_vec2.rst", "nml/vector/vec4/constructor_vec3_float.rst", "nml/vector/vec4/data.rst", "nml/vector/vec4/length.rst", "nml/vector/vec4/operator_brackets_ref.rst", "nml/vector/vec4/operator_brackets_value.rst", "nml/vector/vec4/operator_divide_equal_float.rst", "nml/vector/vec4/operator_minus_equal_vec4.rst", "nml/vector/vec4/operator_plus_equal_vec4.rst", "nml/vector/vec4/operator_times_equal_float.rst"], "titles": ["Getting started", "nml - Nutshell Mathematics Library", "nml", "Matrix", "mat2", "mat2: mat2()", "mat2: mat2(float _xxxyyxyy)", "mat2: mat2(float _xx, float _xy, float _yx, float _yy)", "mat2: mat2(float _xx, float _xy, nlm::vec2 _yxyy)", "mat2: mat2(nlm::vec2 _xxxy, float _yx, float _yy)", "mat2: mat2(nlm::vec2 _xxxy, nlm::vec2 _yxyy)", "mat2: float* data()", "mat2: float det() const", "mat2: nml::mat2&amp; operator[](size_t index)", "mat2: const nml::mat2&amp; operator[](size_t index) const", "mat2: nml::mat2&amp; operator/=(const float other)", "mat2: nml::mat2&amp; operator-=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator+=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator*=(const float other)", "mat2: nml::mat2&amp; operator*=(const nlm::mat2&amp; other)", "mat3", "mat3: mat3()", "mat3: mat3(float _xxxyxzyxyyyzzxzyzz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)", "mat3: mat3(nml::vec3 _xxxyxz, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _xxxyxz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)", "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)", "mat3: float* data()", "mat3: float det() const", "mat3: nml::mat3&amp; operator[](size_t index)", "mat3: const nml::mat3&amp; operator[](size_t index) const", "mat3: nml::mat3&amp; operator/=(const float other)", "mat3: nml::mat3&amp; operator-=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator+=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator*=(const float other)", "mat3: nml::mat3&amp; operator*=(const nlm::mat3&amp; other)", "mat4", "mat4: mat4()", "mat4: mat4(float _xxxyxzxwyxyyyzywzxzyzzzwwxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)", "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)", "mat4: float* data()", "mat4: float det() const", "mat4: nml::mat4&amp; operator[](size_t index)", "mat4: const nml::mat4&amp; operator[](size_t index) const", "mat4: nml::mat4&amp; operator/=(const float other)", "mat4: nml::mat4&amp; operator-=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator+=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator*=(const float other)", "mat4: nml::mat4&amp; operator*=(const nlm::mat4&amp; other)", "nml::quat nml::conjugate(const nml::quat&amp; qua)", "nml::vec3 nml::cross(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec2&amp; a, const nml::vec2&amp; b)", "float nml::dot(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec4&amp; a, const nml::vec4&amp; b)", "nml::mat2 inverse(const nml::mat2&amp; mat)", "nml::mat3 inverse(const nml::mat3&amp; mat)", "nml::mat4 inverse(const nml::mat4&amp; mat)", "nml::quat nml::normalize(const nml::quat&amp; qua)", "nml::vec2 nml::normalize(const nml::vec2&amp; vec)", "nml::vec3 nml::normalize(const nml::vec3&amp; vec)", "nml::vec4 nml::normalize(const nml::vec4&amp; vec)", "nml::mat2 operator/(nml::mat2 lhs, const float rhs)", "nml::mat3 operator/(nml::mat3 lhs, const float rhs)", "nml::mat4 operator/(nml::mat4 lhs, const float rhs)", "nml::quat operator/(nml::quat lhs, const float rhs)", "nml::vec2 operator/(nml::vec2 lhs, const float rhs)", "nml::vec3 operator/(nml::vec3 lhs, const float rhs)", "nml::vec4 operator/(nml::vec4 lhs, const float rhs)", "bool operator==(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator==(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator==(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator==(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator==(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator==(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator==(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "bool operator!=(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator!=(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator!=(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator!=(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator!=(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator!=(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator!=(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator-(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator+(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(float lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator*(float lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator*(float lhs, const nml::mat4&amp; rhs)", "nml::quat operator*(float lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(float lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator*(float lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator*(float lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(nml::mat2 lhs, const float rhs)", "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2&amp; rhs)", "nml::mat3 operator*(nml::mat3 lhs, const float rhs)", "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3&amp; rhs)", "nml::mat4 operator*(nml::mat4 lhs, const float rhs)", "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4&amp; rhs)", "nml::quat operator*(nml::quat lhs, const float rhs)", "nml::quat operator*(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(nml::vec2 lhs, const float rhs)", "nml::vec3 operator*(nml::vec3 lhs, const float rhs)", "nml::vec4 operator*(nml::vec4 lhs, const float rhs)", "nml::vec2 nml::reflect(const nml::vec2&amp; i, const nml::vec2&amp; n)", "nml::vec3 nml::reflect(const nml::vec3&amp; i, const nml::vec3&amp; n)", "nml::vec4 nml::reflect(const nml::vec4&amp; i, const nml::vec4&amp; n)", "nml::vec2 nml::refract(const nml::vec2&amp; i, const nml::vec2&amp; n, float ior)", "nml::vec3 nml::refract(const nml::vec3&amp; i, const nml::vec3&amp; n, float ior)", "nml::vec4 nml::refract(const nml::vec4&amp; i, const nml::vec4&amp; n, float ior)", "nml::mat3 rotate(const float angle)", "nml::mat4 rotate(const float angle, const nml::vec3&amp; axis)", "nml::mat3 scale(const nml::vec2&amp; scaling)", "nml::mat4 scale(const nml::vec3&amp; scaling)", "nml::mat4 nml::to_mat4(const nml::quat&amp; qua)", "nml::quat nml::to_quat(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::mat2&amp; vec)", "std::string nml::to_string(const nml::mat3&amp; vec)", "std::string nml::to_string(const nml::mat4&amp; vec)", "std::string nml::to_string(const nml::quat&amp; vec)", "std::string nml::to_string(const nml::vec2&amp; vec)", "std::string nml::to_string(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::vec4&amp; vec)", "nml::vec3 nml::to_vec3(const nml::quat&amp; qua)", "nml::mat3 translate(const nml::vec2&amp; translation)", "nml::mat4 translate(const nml::vec3&amp; translation)", "nml::mat2 transpose(const nml::mat2&amp; mat)", "nml::mat3 transpose(const nml::mat3&amp; mat)", "nml::mat4 transpose(const nml::mat4&amp; mat)", "Quaternion", "quat", "quat: quat()", "quat: quat(float _a, float _b, float _c, float _d)", "quat: float* data()", "quat: float length()", "quat: float&amp; operator[](size_t index)", "quat: const float operator[](size_t index) const", "quat: nml::quat&amp; operator/=(const float other)", "quat: nml::quat&amp; operator-=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator+=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator*=(const float other)", "quat: nml::quat&amp; operator*=(const nml::quat&amp; other)", "Vector", "vec2", "vec2: vec2()", "vec2: vec2(float _xy)", "vec2: vec2(float _x, float _y)", "vec2: float* data()", "vec2: float length()", "vec2: float&amp; operator[](size_t index)", "vec2: const float operator[](size_t index) const", "vec2: nml::vec2&amp; operator/=(const float other)", "vec2: nml::vec2&amp; operator-=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator+=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator*=(const float other)", "vec3", "vec3: vec3()", "vec3: vec3(float _xyz)", "vec3: vec3(float _x, float _y, float _z)", "vec3: vec3(float _x, nml::vec2 _yz)", "vec3: vec3(nml::vec2 _xy, float _z)", "vec3: float* data()", "vec3: float length()", "vec3: float&amp; operator[](size_t index)", "vec3: const float operator[](size_t index) const", "vec3: nml::vec3&amp; operator/=(const float other)", "vec3: nml::vec3&amp; operator-=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator+=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator*=(const float other)", "vec4", "vec4: vec4()", "vec4: vec4(float _xyzw)", "vec4: vec4(float _x, float _y, float _z, float _w)", "vec4: vec4(float _x, float _y, nlm::vec2 _zw)", "vec4: vec4(float _x, nlm::vec2 _yz, float _w)", "vec4: vec4(float _x, nlm::vec3 _yzw)", "vec4: vec4(nlm::vec2 _xy, float _z, float _w)", "vec4: vec4(nlm::vec2 _xy, nlm::vec2 _zw)", "vec4: vec4(nlm::vec3 _xyz, float _w)", "vec4: float* data()", "vec4: float length()", "vec4: float&amp; operator[](size_t index)", "vec4: const float operator[](size_t index) const", "vec4: nml::vec4&amp; operator/=(const float other)", "vec4: nml::vec4&amp; operator-=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator+=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator*=(const float other)"], "terms": {"i": [0, 1, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 151, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 175, 180, 181, 182, 183, 184, 185, 186, 187, 194, 195, 196, 197, 198, 199, 200, 201, 212, 213, 214, 215, 216, 217, 218], "avail": [0, 1], "github": [0, 1], "git": 0, "clone": 0, "http": 0, "com": 0, "team": 0, "nutshel": 0, "can": [0, 174], "built": 0, "static": 0, "librari": 0, "name": [0, 4, 20, 40, 162, 175, 187, 201], "replac": 0, "path_to_nml": 0, "path": 0, "sourc": 0, "code": 0, "directori": 0, "add_subdirectori": 0, "target_include_directori": 0, "project_nam": 0, "public": 0, "target_link_librari": 0, "In": 0, "sampl": 0, "It": 0, "possibl": 0, "includ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "entir": 0, "one": 0, "h": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "Or": 0, "onli": 0, "need": 0, "header": [0, 4, 20, 40, 162, 175, 187, 201], "vec2": [0, 1, 2, 4, 13, 14, 20, 174, 187, 201], "vec3": [0, 1, 2, 20, 33, 34, 40, 162, 174, 201], "mat4": [0, 1, 2, 3], "c": [1, 14, 34, 62, 67, 69, 70, 71, 72, 74, 75, 76, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 123, 124, 126, 127, 129, 130, 131, 132, 136, 137, 138, 139, 140, 141, 143, 146, 151, 155, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 182, 196, 214], "comput": 1, "graphic": 1, "get": 1, "start": 1, "add": [1, 4, 17, 20, 37, 40, 65, 162, 171, 175, 185, 187, 199, 201, 217], "cmake": 1, "project": 1, "us": [1, 174], "vector": [1, 2, 20, 40, 136, 137, 138, 139, 140, 141, 156, 157, 175, 176, 177, 178, 179, 180, 187, 188, 189, 190, 191, 192, 193, 194, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "vec4": [1, 2, 40, 54, 61, 62, 174], "matrix": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 73, 74, 75, 142, 143, 144, 145, 146, 156, 157], "mat2": [1, 2, 3], "mat3": [1, 2, 3], "quaternion": [1, 2, 40, 68, 146, 147, 155, 162, 163, 164, 165, 166, 187], "quat": [1, 2, 40, 161, 187], "index": [1, 4, 20, 40, 162, 175, 187, 201], "modul": 1, "search": 1, "page": 1, "class": [2, 3, 161, 174], "variabl": [2, 3, 161, 174], "function": [2, 3, 73, 74, 75, 136, 137, 138, 139, 140, 141, 161, 174], "constructor": [2, 3, 161, 174], "oper": [2, 3, 161, 174], "namespac": [2, 3, 161, 174], "file": [4, 20, 40, 162, 175, 187, 201], "column": [4, 20, 40, 158, 159, 160], "major": [4, 20, 40], "2": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "row": [4, 20, 40, 158, 159, 160], "begin": [4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 156, 157, 158, 159, 160, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218], "bmatrix": [4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 156, 157, 158, 159, 160, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218], "x": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 165, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "y": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "end": [4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 155, 156, 157, 158, 159, 160, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218], "type": [4, 20, 40, 162, 175, 187, 201], "descript": [4, 20, 40, 162, 175, 187, 201], "nml": [4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 31, 32, 40, 41, 42, 43, 54, 59, 60, 162, 163, 164, 165, 166, 167, 168, 175, 176, 177, 178, 179, 180, 181, 182, 187, 188, 189, 190, 193, 194, 195, 196, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "The": [4, 12, 15, 16, 17, 18, 19, 20, 32, 35, 36, 37, 38, 39, 40, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 162, 166, 169, 170, 171, 172, 173, 175, 180, 183, 184, 185, 186, 187, 194, 197, 198, 199, 200, 201, 212, 215, 216, 217, 218], "first": [4, 20, 40, 162, 175, 187, 201], "second": [4, 20, 40, 162, 175, 187, 201], "construct": [4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 162, 163, 164, 175, 176, 177, 178, 187, 188, 189, 190, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "1": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "ident": [4, 5, 20, 21, 40, 41, 87, 88, 89, 90, 91, 92, 93, 162, 163, 175, 187, 201], "float": [4, 14, 20, 34, 40, 62, 162, 175, 187, 201], "_xxxyyxyi": 4, "_xx": [4, 20, 40], "_xy": [4, 20, 40, 175, 187, 201], "_yx": [4, 20, 27, 40], "_yi": [4, 20, 40], "nlm": [4, 20, 40, 201], "_yxyi": 4, "_xxxy": 4, "const": [4, 20, 40, 162, 175, 187, 201], "other": [4, 20, 40, 162, 175, 187, 201], "current": [4, 15, 16, 17, 18, 19, 20, 35, 36, 37, 38, 39, 40, 63, 64, 65, 66, 67, 162, 169, 170, 171, 172, 173, 175, 183, 184, 185, 186, 187, 197, 198, 199, 200, 201, 215, 216, 217, 218], "substract": [4, 16, 20, 36, 40, 64, 162, 170, 175, 184, 187, 198, 201, 216], "from": [4, 16, 20, 36, 40, 64, 146, 147, 155, 162, 170, 175, 184, 187, 198, 201, 216], "multipli": [4, 18, 19, 20, 38, 39, 40, 66, 67, 162, 172, 173, 175, 186, 187, 200, 201, 218], "scalar": [4, 15, 18, 20, 35, 38, 40, 63, 66, 80, 81, 82, 83, 84, 85, 86, 115, 116, 117, 118, 119, 120, 121, 122, 125, 128, 131, 132, 133, 134, 135, 162, 169, 172, 173, 174, 175, 183, 186, 187, 197, 200, 201, 215, 218], "divid": [4, 15, 20, 35, 40, 63, 162, 169, 175, 183, 187, 197, 201, 215], "size_t": [4, 20, 40, 162, 175, 187, 201], "return": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "refer": [4, 13, 14, 20, 33, 34, 40, 61, 62, 162, 167, 175, 181, 187, 195, 201, 213], "els": [4, 13, 14, 20, 33, 34, 40, 61, 62, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 162, 167, 168, 175, 181, 182, 187, 195, 196, 201, 213, 214], "throw": [4, 13, 14, 20, 33, 34, 40, 61, 62, 162, 167, 168, 175, 181, 182, 187, 195, 196, 201, 213, 214], "an": [4, 13, 14, 20, 33, 34, 40, 61, 62, 162, 167, 168, 175, 181, 182, 187, 195, 196, 201, 213, 214], "except": [4, 13, 14, 20, 33, 34, 40, 61, 62, 162, 167, 168, 175, 181, 182, 187, 195, 196, 201, 213, 214], "det": [4, 20, 40, 73, 74, 75], "determin": [4, 12, 20, 32, 40, 60, 73, 74, 75], "data": [4, 20, 40, 162, 175, 187, 201], "pointer": [4, 11, 20, 31, 40, 59, 162, 165, 175, 179, 187, 193, 201, 211], "": [4, 11, 20, 31, 40, 59, 162, 165, 175, 179, 187, 193, 201, 211], "element": [4, 11, 20, 31, 40, 59, 162, 165, 175, 179, 187, 193, 201, 211], "lh": [4, 20, 40, 162, 175, 187, 201], "rh": [4, 20, 40, 162, 175, 187, 201], "sum": [4, 17, 20, 37, 40, 65, 108, 109, 110, 111, 112, 113, 114, 162, 171, 175, 185, 187, 199, 201, 217], "between": [4, 15, 16, 17, 18, 19, 20, 35, 36, 37, 38, 39, 40, 63, 64, 65, 66, 67, 69, 70, 71, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 162, 169, 170, 171, 172, 173, 175, 183, 184, 185, 186, 187, 197, 198, 199, 200, 201, 215, 216, 217, 218], "two": [4, 11, 16, 17, 19, 20, 31, 36, 37, 39, 40, 59, 64, 65, 67, 69, 70, 71, 72, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 123, 126, 129, 162, 165, 170, 171, 175, 184, 185, 187, 193, 198, 199, 201, 211, 216, 217], "differ": [4, 16, 20, 36, 40, 64, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 162, 170, 175, 184, 187, 198, 201, 216], "product": [4, 18, 19, 20, 38, 39, 40, 66, 67, 69, 70, 71, 72, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 162, 172, 173, 175, 186, 187, 200, 201, 218], "quotient": [4, 15, 20, 35, 40, 63, 80, 81, 82, 83, 84, 85, 86, 162, 169, 175, 183, 187, 197, 201, 215], "bool": [4, 20, 40, 162, 175, 187, 201], "true": [4, 20, 40, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 162, 175, 187, 201], "ar": [4, 20, 40, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 158, 159, 160, 162, 174, 175, 187, 201], "fals": [4, 20, 40, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 162, 175, 187, 201], "transpos": [4, 20, 40], "mat": [4, 20, 40], "where": [4, 20, 40, 158, 159, 160], "invers": [4, 19, 20, 39, 40, 67, 123, 126, 129], "std": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "string": [4, 20, 40, 162, 175, 187, 201], "to_str": [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218], "under": [4, 20, 40, 148, 149, 150, 151, 152, 153, 154, 162, 175, 187, 201], "format": [4, 20, 40, 148, 149, 150, 151, 152, 153, 154, 162, 175, 187, 201], "iostream": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "main": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "m": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 75, 129, 142, 143, 144, 145, 146, 148, 149, 150, 156, 157], "cout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "endl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "result": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "000000": [5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 80, 81, 82, 84, 85, 86, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 167, 170, 171, 172, 176, 177, 178, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218], "0f": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "3": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 142, 143, 148, 149, 150, 153, 154, 157, 158, 159, 160, 162, 165, 167, 168, 171, 181, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "4": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 73, 74, 75, 79, 80, 81, 82, 86, 87, 88, 89, 93, 94, 95, 96, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 135, 137, 138, 140, 141, 148, 149, 150, 154, 158, 159, 160, 162, 167, 168, 184, 185, 186, 195, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "access": [11, 31, 59, 165, 179, 193, 211], "char": [11, 31, 59, 165, 179, 193, 211], "sizeof": [11, 31, 59, 165, 179, 193, 211], "take": [11, 31, 59, 165, 179, 193, 211], "address": [11, 31, 59, 165, 179, 193, 211], "size": [11, 31, 59, 165, 179, 193, 211], "three": [11, 31, 59, 165, 211], "calcul": [12, 15, 16, 17, 18, 19, 32, 35, 36, 37, 38, 39, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 166, 169, 170, 171, 172, 173, 180, 183, 184, 185, 186, 194, 197, 198, 199, 200, 212, 215, 216, 217, 218], "thi": [12, 15, 16, 17, 18, 19, 32, 35, 36, 37, 38, 39, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 166, 169, 170, 171, 172, 173, 180, 183, 184, 185, 186, 194, 197, 198, 199, 200, 212, 215, 216, 217, 218], "wai": [12, 15, 16, 17, 18, 19, 32, 35, 36, 37, 38, 39, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 155, 156, 157, 158, 159, 160, 166, 169, 170, 171, 172, 173, 180, 183, 184, 185, 186, 194, 197, 198, 199, 200, 212, 215, 216, 217, 218], "5": [13, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 74, 75, 79, 81, 82, 88, 89, 94, 95, 96, 100, 101, 102, 103, 105, 106, 107, 113, 114, 116, 117, 125, 126, 127, 128, 130, 149, 150, 159, 160, 165, 167, 168, 198, 199, 212, 213, 216, 217], "6": [13, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 74, 75, 81, 82, 88, 89, 95, 96, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 128, 133, 134, 135, 149, 150, 159, 160, 184, 185, 198, 199, 200, 216, 217, 218], "7": [13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 74, 75, 81, 82, 88, 89, 95, 96, 102, 103, 106, 107, 113, 114, 116, 117, 125, 126, 127, 128, 149, 150, 159, 160], "error": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "termin": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "call": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "after": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "instanc": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "out_of_rang": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "what": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "out": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "rang": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "abort": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "b": [14, 16, 17, 19, 34, 36, 37, 39, 62, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 146, 151, 155, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 180, 182, 184, 185, 187, 194, 196, 198, 199, 201, 212, 214, 216, 217], "d": [14, 34, 62, 67, 74, 75, 76, 83, 90, 97, 104, 111, 118, 129, 131, 132, 143, 146, 151, 155, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 196, 214], "frac": [15, 35, 63, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 147, 169, 183, 197, 215], "500000": [15, 35, 63, 73, 75, 80, 81, 82, 83, 84, 85, 86, 102, 103, 106, 107, 140, 141, 147, 169, 183, 197, 215], "8": [16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 75, 81, 82, 88, 89, 95, 96, 102, 103, 107, 108, 109, 110, 116, 117, 125, 126, 128, 149, 150, 159, 160, 198, 216, 217, 218], "10": [16, 17, 32, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 75, 82, 89, 96, 103, 108, 109, 110, 117, 126, 128, 150, 160, 216], "z": [20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 78, 79, 81, 82, 85, 86, 88, 89, 92, 93, 95, 96, 99, 100, 102, 103, 106, 107, 109, 110, 113, 114, 116, 117, 120, 121, 125, 126, 127, 128, 129, 130, 134, 135, 137, 138, 140, 141, 143, 145, 147, 149, 150, 153, 154, 157, 159, 160, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218], "third": [20, 40, 162, 187, 201], "_xxxyxzyxyyyzzxzyzz": 20, "_xz": [20, 40], "_yz": [20, 40, 187, 201], "_zx": [20, 40], "_zy": [20, 40], "_zz": [20, 40], "_zxzyzz": 20, "_yxyyyz": 20, "_xxxyxz": 20, "translat": [20, 40], "2d": [20, 142, 144, 156], "accord": [20, 40, 142, 143, 144, 145, 156, 157], "rotat": [20, 40, 146], "angl": [20, 40, 147, 155, 162, 174, 187], "radian": [20, 40, 142, 143, 155, 162, 187], "scale": [20, 40], "factor": [20, 40, 144, 145], "9": [23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 75, 81, 82, 88, 89, 95, 96, 102, 103, 115, 116, 117, 120, 121, 122, 125, 128, 134, 135, 149, 150, 159, 160, 199, 217], "four": [31, 59], "five": [31, 59], "six": [31, 59], "seven": [31, 59], "eight": [31, 59], "small": [32, 67, 75, 87, 88, 89, 94, 95, 96, 129, 155], "12": [33, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 82, 89, 95, 96, 103, 109, 110, 113, 114, 115, 116, 117, 121, 122, 125, 128, 135, 150, 160], "25": [33, 61, 130, 165, 168], "14": [36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 82, 89, 96, 103, 109, 110, 117, 128, 150, 160, 217], "16": [36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 82, 89, 96, 103, 108, 109, 110, 117, 128, 150, 160], "18": [36, 37, 38, 64, 65, 66, 109, 110, 116, 117, 125, 128], "20": [36, 37, 61, 64, 65, 66, 110], "11": [36, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 82, 89, 96, 103, 117, 128, 150, 160], "tini": [39, 42, 126], "w": [40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 75, 79, 82, 86, 89, 93, 96, 100, 103, 107, 110, 114, 117, 121, 128, 129, 130, 135, 138, 141, 150, 154, 160, 201, 211, 212, 213, 214, 215, 216, 217, 218], "fourth": [40, 162, 201], "_xxxyxzxwyxyyyzywzxzyzzzwwxwywzww": 40, "_xw": 40, "_yw": 40, "_zw": [40, 201], "_wx": 40, "_wy": 40, "_wz": 40, "_ww": 40, "_wxwywzww": [40, 54], "_zxzyzzzw": [40, 54], "_yxyyyzyw": 40, "_xxxyxzxw": [40, 54], "3d": [40, 143, 145, 146, 157], "axi": [40, 174], "to_mat4": 40, "qua": [40, 162, 187], "13": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 82, 89, 96, 103, 117, 128, 150, 160], "15": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 82, 89, 96, 103, 116, 117, 125, 128, 150, 160], "nine": 59, "ten": 59, "eleven": 59, "twelv": 59, "thirteen": 59, "fourteen": 59, "fifteen": 59, "scriptsiz": 60, "32": [60, 64, 65, 66, 109, 110], "64": [60, 109, 110], "480": 60, "250": 61, "e": [62, 67, 74, 75, 129, 143, 146, 168, 214], "22": [64, 65, 66, 110], "24": [64, 65, 66, 110, 116, 117, 125, 128], "26": [64, 65, 66, 109, 110], "28": [64, 65, 66, 110, 130], "30": [64, 65, 66, 110, 117, 128], "34": [64, 65], "17": [64, 65, 127, 130], "f": [67, 74, 75, 129, 143, 146], "j": [67, 75, 76, 83, 104, 111, 118, 129, 131, 132, 147, 151, 162, 169, 170, 171, 172, 173], "n": [67, 75, 129, 175, 187, 201], "g": [67, 74, 75, 129, 143, 146], "k": [67, 75, 76, 83, 104, 111, 118, 129, 131, 132, 139, 140, 141, 147, 151, 162, 169, 170, 171, 172, 173], "o": [67, 75, 129], "l": [67, 75, 129], "p": [67, 75, 129], "conj": 68, "bi": [68, 76, 83, 90, 97, 104, 111, 118, 131, 132, 162, 169, 170, 171, 172, 173], "cj": [68, 76, 83, 90, 97, 104, 111, 118, 131, 132, 162, 169, 170, 171, 172, 173], "dk": [68, 76, 83, 90, 97, 104, 111, 118, 131, 132, 162, 169, 170, 171, 172, 173], "25f": [68, 76, 83, 90, 97, 103, 104, 111, 118, 124, 127, 130, 131, 132, 151, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "5f": [68, 76, 83, 90, 97, 102, 103, 104, 106, 107, 111, 118, 124, 127, 130, 131, 132, 139, 140, 141, 151, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "75f": [68, 76, 83, 90, 97, 104, 111, 118, 131, 132, 151, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "250000i": [68, 151, 164], "500000j": [68, 104, 111, 118, 131, 147, 151, 164], "750000k": [68, 151, 164], "dot": [69, 175, 187, 201], "time": 69, "cdot": [70, 71, 72, 136, 137, 138, 139, 140, 141], "doe": [73, 74, 75, 136, 137, 138, 139, 140, 141], "check": [73, 74, 75], "invert": [73, 74, 75], "null": [73, 74, 75], "inva": [73, 74, 75], "invb": [73, 74, 75], "undefin": [73, 74, 75], "behaviour": [73, 74, 75], "inf": [73, 74], "t": [74, 75, 158, 159, 160], "adj": [74, 75], "666667": 74, "333333": 74, "nan": 75, "same": [76, 77, 78, 79, 162, 175, 187, 201], "direct": [76, 77, 78, 79, 136, 137, 138, 139, 140, 141, 162, 175, 187, 201], "length": [76, 77, 78, 79, 162, 175, 187, 201], "norm": [76, 77, 78, 79], "left": [76, 77, 78, 79], "right": [76, 77, 78, 79], "36931": [76, 166], "730297": [76, 79], "182574i": 76, "365148j": 76, "547723k": 76, "23607": [77, 180], "447214": 77, "894427": 77, "74166": [78, 194], "267261": 78, "534522": 78, "801784": 78, "47723": [79, 212], "182574": 79, "365148": 79, "547723": 79, "125000i": [83, 169], "250000j": [83, 169], "375000k": [83, 169], "equal": [87, 88, 89, 90, 91, 92, 93], "inequ": [94, 95, 96, 97, 98, 99, 100], "neq": [94, 95, 96, 97, 98, 99, 100], "99f": 103, "2f": 103, "750000": [103, 124, 130], "010000": 103, "800000": 103, "000000i": [104, 163, 167], "250000k": [104, 111, 118, 131], "128": [109, 110], "256": [109, 110], "44": [109, 110], "78": [109, 110], "144": [109, 110], "274": [109, 110], "512": 110, "1024": 110, "2048": 110, "4096": 110, "8192": 110, "16384": 110, "32768": 110, "532": 110, "1046": 110, "2072": 110, "4122": 110, "8220": 110, "16414": 110, "32800": 110, "500000i": [111, 147, 172], "19": 114, "21": [116, 117, 125, 128], "27": [116, 117, 125, 128], "33": [117, 128], "36": [117, 128, 130], "39": [117, 128], "42": [117, 128], "45": [117, 128], "48": [117, 128], "750000i": [118, 131], "875000": 124, "250000": 127, "187500": [127, 132, 173], "812500": 130, "562500": 130, "82f": [132, 170, 171, 173], "24f": [132, 170, 171, 173], "65f": [132, 170, 171, 173], "465000i": [132, 173], "692500j": [132, 173], "800000k": [132, 173], "incid": [136, 137, 138, 139, 140, 141, 175, 187, 201], "normal": [136, 137, 138, 139, 140, 141, 146, 155, 162, 166, 175, 180, 187, 194, 201, 212], "should": [136, 137, 138, 139, 140, 141, 174, 175, 187, 201], "ratio": [139, 140, 141, 175, 187, 201], "indic": [139, 140, 141, 175, 187, 201], "case": [139, 140, 141], "text": [139, 140, 141], "sqrt": [139, 140, 141, 166, 180, 194, 212], "otherwis": [139, 140, 141], "322876": [139, 140, 141], "co": [142, 143, 147], "sin": [142, 143, 147], "pi": [142, 143], "14159265358979323846f": [142, 143], "rotationangl": [142, 143], "90": [142, 143], "convers": [146, 147, 155], "q": [146, 147, 151, 155, 163, 164, 165, 167, 168, 169, 172], "euler": [147, 155, 162, 174, 187], "v": [147, 152, 153, 154, 155, 176, 177, 178, 179, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218], "570796f": 147, "000000f": 147, "500000k": [147, 172], "repres": [155, 174, 187], "atan2": 155, "asin": 155, "570796": 155, "translationvector": [156, 157], "_a": 162, "_b": 162, "_c": 162, "_d": 162, "valu": [162, 168, 175, 182, 187, 196, 201, 214], "conjug": 162, "to_quat": 162, "vec": [162, 175, 187, 201], "0i": 163, "0j": 163, "0k": 163, "000000j": [163, 167, 172], "000000k": [163, 167], "_bi": 164, "_cj": 164, "_dk": 164, "75": [165, 168], "570000i": 170, "260000j": 170, "100000k": 170, "070000i": 171, "740000j": 171, "400000k": 171, "object": 174, "multipl": 174, "point": 174, "etc": 174, "accordingli": 174, "_x": [175, 187, 201], "_y": [175, 187, 201], "reflect": [175, 187, 201], "refract": [175, 187, 201], "eta": [175, 187, 201], "ior": [175, 187, 201], "_xyz": [187, 201], "_z": [187, 201], "cross": 187, "to_vec3": 187, "_xyzw": 201, "_w": 201, "_yzw": 201, "ec4": 216}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"get": 0, "start": 0, "nml": [0, 1, 2, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 169, 170, 171, 172, 173, 183, 184, 185, 186, 191, 192, 197, 198, 199, 200, 215, 216, 217, 218], "add": 0, "cmake": 0, "project": 0, "us": 0, "nutshel": 1, "mathemat": 1, "librari": 1, "tabl": 1, "content": 1, "indic": 1, "matrix": 3, "mat2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 73, 80, 87, 94, 101, 108, 115, 122, 123, 124, 148, 158], "class": [4, 20, 40, 162, 175, 187, 201], "variabl": [4, 20, 40, 162, 175, 187, 201], "function": [4, 20, 40, 162, 175, 187, 201], "constructor": [4, 20, 40, 162, 175, 187, 201], "oper": [4, 13, 14, 15, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 66, 67, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 162, 167, 168, 169, 170, 171, 172, 173, 175, 181, 182, 183, 184, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 213, 214, 215, 216, 217, 218], "namespac": [4, 20, 40, 162, 175, 187, 201], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "float": [6, 7, 8, 9, 11, 12, 15, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 63, 66, 70, 71, 72, 80, 81, 82, 83, 84, 85, 86, 115, 116, 117, 118, 119, 120, 121, 122, 125, 128, 131, 133, 134, 135, 139, 140, 141, 142, 143, 164, 165, 166, 167, 168, 169, 172, 177, 178, 179, 180, 181, 182, 183, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218], "_xxxyyxyi": 6, "_xx": [7, 8, 23, 24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 54], "_xy": [7, 8, 23, 24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 54, 177, 192, 208, 209], "_yx": [7, 9, 23, 24, 28, 43, 44, 45, 46, 51, 52, 53, 54], "_yi": [7, 9, 23, 24, 27, 28, 43, 44, 45, 46, 51, 52, 53, 54], "nlm": [8, 9, 10, 19, 39, 67, 205, 206, 207, 208, 209, 210], "vec2": [8, 9, 10, 70, 77, 84, 91, 98, 105, 112, 119, 124, 133, 136, 139, 144, 152, 156, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 205, 206, 208, 209], "_yxyi": [8, 10], "_xxxy": [9, 10], "data": [11, 31, 59, 165, 179, 193, 211], "det": [12, 32, 60], "const": [12, 14, 15, 16, 17, 18, 19, 32, 34, 35, 36, 37, 38, 39, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 173, 182, 183, 184, 185, 186, 196, 197, 198, 199, 200, 214, 215, 216, 217, 218], "size_t": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "index": [13, 14, 33, 34, 61, 62, 167, 168, 181, 182, 195, 196, 213, 214], "other": [15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 63, 64, 65, 66, 67, 169, 170, 171, 172, 173, 183, 184, 185, 186, 197, 198, 199, 200, 215, 216, 217, 218], "mat3": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 74, 81, 88, 95, 102, 109, 116, 125, 126, 127, 142, 144, 149, 156, 159], "_xxxyxzyxyyyzzxzyzz": 22, "_xz": [23, 24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 54], "_yz": [23, 24, 27, 28, 43, 44, 45, 46, 51, 52, 53, 54, 191, 206], "_zx": [23, 25, 27, 29, 43, 44, 47, 48, 51, 52, 54, 55, 56], "_zy": [23, 25, 27, 29, 43, 44, 47, 48, 51, 52, 54, 55, 56], "_zz": [23, 25, 27, 29, 43, 44, 47, 48, 51, 52, 54, 55, 56], "vec3": [24, 25, 26, 27, 28, 29, 30, 69, 71, 78, 85, 92, 99, 106, 113, 120, 127, 134, 137, 140, 143, 145, 147, 153, 155, 157, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 207, 210], "_zxzyzz": [24, 26, 28, 30], "_yxyyyz": [25, 26, 29, 30], "_xxxyxz": [27, 28, 29, 30], "mat4": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 82, 89, 96, 103, 110, 117, 128, 129, 130, 143, 145, 146, 150, 157, 160], "_xxxyxzxwyxyyyzywzxzyzzzwwxwywzww": 42, "_xw": [43, 44, 45, 46, 47, 48, 49, 50, 54], "_yw": [43, 44, 45, 46, 51, 52, 53, 54], "_zw": [43, 44, 47, 48, 51, 52, 54, 55, 56, 205, 209], "_wx": [43, 45, 47, 49, 51, 53, 54, 55, 57], "_wy": [43, 45, 47, 49, 51, 53, 54, 55, 57], "_wz": [43, 45, 47, 49, 51, 53, 54, 55, 57], "_ww": [43, 45, 47, 49, 51, 53, 54, 55, 57], "vec4": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 72, 79, 86, 93, 100, 107, 114, 121, 130, 135, 138, 141, 154, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "_wxwywzww": [44, 46, 48, 50, 52, 56, 58], "_zxzyzzzw": [45, 46, 49, 50, 53, 57, 58], "_yxyyyzyw": [47, 48, 49, 50, 55, 56, 57, 58], "_xxxyxzxw": [51, 52, 53, 55, 56, 57, 58], "quat": [68, 76, 83, 90, 97, 104, 111, 118, 131, 132, 146, 147, 151, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "conjug": 68, "qua": [68, 76, 146, 155], "cross": 69, "b": [69, 70, 71, 72], "dot": [70, 71, 72], "invers": [73, 74, 75], "mat": [73, 74, 75, 158, 159, 160], "normal": [76, 77, 78, 79], "vec": [77, 78, 79, 147, 148, 149, 150, 151, 152, 153, 154], "lh": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "rh": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "bool": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "reflect": [136, 137, 138], "i": [136, 137, 138, 139, 140, 141], "n": [136, 137, 138, 139, 140, 141], "refract": [139, 140, 141], "ior": [139, 140, 141], "rotat": [142, 143], "angl": [142, 143], "axi": 143, "scale": [144, 145], "to_mat4": 146, "to_quat": 147, "std": [148, 149, 150, 151, 152, 153, 154], "string": [148, 149, 150, 151, 152, 153, 154], "to_str": [148, 149, 150, 151, 152, 153, 154], "to_vec3": 155, "translat": [156, 157], "transpos": [158, 159, 160], "quaternion": 161, "_a": 164, "_b": 164, "_c": 164, "_d": 164, "length": [166, 180, 194, 212], "vector": 174, "_x": [178, 190, 191, 204, 205, 206, 207], "_y": [178, 190, 204, 205], "_xyz": [189, 210], "_z": [190, 192, 204, 208], "_xyzw": 203, "_w": [204, 206, 208, 210], "_yzw": 207}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Getting started": [[0, "getting-started"]], "Get nml": [[0, "get-nml"]], "Add nml to a CMake project": [[0, "add-nml-to-a-cmake-project"]], "Use nml": [[0, "use-nml"]], "nml - Nutshell Mathematics Library": [[1, "nml-nutshell-mathematics-library"]], "Table of Contents": [[1, null]], "Indices and tables": [[1, "indices-and-tables"]], "nml": [[2, "nml"]], "Matrix": [[3, "matrix"]], "mat2": [[4, "mat2"]], "Class variables": [[4, "class-variables"], [20, "class-variables"], [40, "class-variables"], [162, "class-variables"], [175, "class-variables"], [187, "class-variables"], [201, "class-variables"]], "Class functions": [[4, "class-functions"], [20, "class-functions"], [40, "class-functions"], [162, "class-functions"], [175, "class-functions"], [187, "class-functions"], [201, "class-functions"]], "Constructors": [[4, "constructors"], [20, "constructors"], [40, "constructors"], [162, "constructors"], [175, "constructors"], [187, "constructors"], [201, "constructors"]], "Operators": [[4, "operators"], [4, "id1"], [20, "operators"], [20, "id1"], [40, "operators"], [40, "id1"], [162, "operators"], [162, "id1"], [175, "operators"], [175, "id1"], [187, "operators"], [187, "id1"], [201, "operators"], [201, "id1"]], "Functions": [[4, "functions"], [4, "id2"], [20, "functions"], [20, "id2"], [40, "functions"], [40, "id2"], [162, "functions"], [162, "id2"], [175, "functions"], [175, "id2"], [187, "functions"], [187, "id2"], [201, "functions"], [201, "id2"]], "Namespace functions": [[4, "namespace-functions"], [20, "namespace-functions"], [40, "namespace-functions"], [162, "namespace-functions"], [175, "namespace-functions"], [187, "namespace-functions"], [201, "namespace-functions"]], "mat2: mat2()": [[5, "mat2-mat2"]], "Example": [[5, "example"], [6, "example"], [7, "example"], [8, "example"], [9, "example"], [10, "example"], [11, "example"], [12, "example"], [13, "example"], [14, "example"], [15, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [21, "example"], [22, "example"], [23, "example"], [24, "example"], [25, "example"], [26, "example"], [27, "example"], [28, "example"], [29, "example"], [30, "example"], [31, "example"], [32, "example"], [33, "example"], [34, "example"], [35, "example"], [36, "example"], [37, "example"], [38, "example"], [39, "example"], [41, "example"], [42, "example"], [43, "example"], [44, "example"], [45, "example"], [46, "example"], [47, "example"], [48, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [93, "example"], [94, "example"], [95, "example"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [105, "example"], [106, "example"], [107, "example"], [108, "example"], [109, "example"], [110, "example"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [120, "example"], [121, "example"], [122, "example"], [123, "example"], [124, "example"], [125, "example"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [163, "example"], [164, "example"], [165, "example"], [166, "example"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [193, "example"], [194, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"], [199, "example"], [200, "example"], [202, "example"], [203, "example"], [204, "example"], [205, "example"], [206, "example"], [207, "example"], [208, "example"], [209, "example"], [210, "example"], [211, "example"], [212, "example"], [213, "example"], [214, "example"], [215, "example"], [216, "example"], [217, "example"], [218, "example"]], "mat2: mat2(float _xxxyyxyy)": [[6, "mat2-mat2-float-xxxyyxyy"]], "mat2: mat2(float _xx, float _xy, float _yx, float _yy)": [[7, "mat2-mat2-float-xx-float-xy-float-yx-float-yy"]], "mat2: mat2(float _xx, float _xy, nlm::vec2 _yxyy)": [[8, "mat2-mat2-float-xx-float-xy-nlm-vec2-yxyy"]], "mat2: mat2(nlm::vec2 _xxxy, float _yx, float _yy)": [[9, "mat2-mat2-nlm-vec2-xxxy-float-yx-float-yy"]], "mat2: mat2(nlm::vec2 _xxxy, nlm::vec2 _yxyy)": [[10, "mat2-mat2-nlm-vec2-xxxy-nlm-vec2-yxyy"]], "mat2: float* data()": [[11, "mat2-float-data"]], "mat2: float det() const": [[12, "mat2-float-det-const"]], "mat2: nml::mat2& operator[](size_t index)": [[13, "mat2-nml-mat2-operator-size-t-index"]], "mat2: const nml::mat2& operator[](size_t index) const": [[14, "mat2-const-nml-mat2-operator-size-t-index-const"]], "mat2: nml::mat2& operator/=(const float other)": [[15, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator-=(const nml::mat2& other)": [[16, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator+=(const nml::mat2& other)": [[17, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator*=(const float other)": [[18, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator*=(const nlm::mat2& other)": [[19, "mat2-nml-mat2-operator-const-nlm-mat2-other"]], "mat3": [[20, "mat3"]], "mat3: mat3()": [[21, "mat3-mat3"]], "mat3: mat3(float _xxxyxzyxyyyzzxzyzz)": [[22, "mat3-mat3-float-xxxyxzyxyyyzzxzyzz"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)": [[23, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)": [[24, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-nml-vec3-zxzyzz"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)": [[25, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-yxyyyz-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)": [[26, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-yxyyyz-nml-vec3-zxzyzz"]], "mat3: mat3(nml::vec3 _xxxyxz, float _yy, float _yz, float _zx, float _zy, float _zz)": [[27, "mat3-mat3-nml-vec3-xxxyxz-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _xxxyxz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)": [[28, "mat3-mat3-nml-vec3-xxxyxz-float-yx-float-yy-float-yz-nml-vec3-zxzyzz"]], "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)": [[29, "mat3-mat3-nml-vec3-xxxyxz-nml-vec3-yxyyyz-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)": [[30, "mat3-mat3-nml-vec3-xxxyxz-nml-vec3-yxyyyz-nml-vec3-zxzyzz"]], "mat3: float* data()": [[31, "mat3-float-data"]], "mat3: float det() const": [[32, "mat3-float-det-const"]], "mat3: nml::mat3& operator[](size_t index)": [[33, "mat3-nml-mat3-operator-size-t-index"]], "mat3: const nml::mat3& operator[](size_t index) const": [[34, "mat3-const-nml-mat3-operator-size-t-index-const"]], "mat3: nml::mat3& operator/=(const float other)": [[35, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator-=(const nml::mat3& other)": [[36, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator+=(const nml::mat3& other)": [[37, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator*=(const float other)": [[38, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator*=(const nlm::mat3& other)": [[39, "mat3-nml-mat3-operator-const-nlm-mat3-other"]], "mat4": [[40, "mat4"]], "mat4: mat4()": [[41, "mat4-mat4"]], "mat4: mat4(float _xxxyxzxwyxyyyzywzxzyzzzwwxwywzww)": [[42, "mat4-mat4-float-xxxyxzxwyxyyyzywzxzyzzzwwxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[43, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"], [54, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[44, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[45, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)": [[46, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-zxzyzzzw-nml-vec4-wxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[47, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[48, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[49, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)": [[50, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-nml-vec4-wxwywzww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[51, "mat4-mat4-nml-vec4-xxxyxzxw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[52, "mat4-mat4-nml-vec4-xxxyxzxw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[53, "mat4-mat4-nml-vec4-xxxyxzxw-float-yx-float-yy-float-yz-float-yw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[55, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[56, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[57, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)": [[58, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-nml-vec4-wxwywzww"]], "mat4: float* data()": [[59, "mat4-float-data"]], "mat4: float det() const": [[60, "mat4-float-det-const"]], "mat4: nml::mat4& operator[](size_t index)": [[61, "mat4-nml-mat4-operator-size-t-index"]], "mat4: const nml::mat4& operator[](size_t index) const": [[62, "mat4-const-nml-mat4-operator-size-t-index-const"]], "mat4: nml::mat4& operator/=(const float other)": [[63, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator-=(const nml::mat4& other)": [[64, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator+=(const nml::mat4& other)": [[65, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator*=(const float other)": [[66, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator*=(const nlm::mat4& other)": [[67, "mat4-nml-mat4-operator-const-nlm-mat4-other"]], "nml::quat nml::conjugate(const nml::quat& qua)": [[68, "nml-quat-nml-conjugate-const-nml-quat-qua"]], "nml::vec3 nml::cross(const nml::vec3& a, const nml::vec3& b)": [[69, "nml-vec3-nml-cross-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::vec2& a, const nml::vec2& b)": [[70, "float-nml-dot-const-nml-vec2-a-const-nml-vec2-b"]], "float nml::dot(const nml::vec3& a, const nml::vec3& b)": [[71, "float-nml-dot-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::vec4& a, const nml::vec4& b)": [[72, "float-nml-dot-const-nml-vec4-a-const-nml-vec4-b"]], "nml::mat2 inverse(const nml::mat2& mat)": [[73, "nml-mat2-inverse-const-nml-mat2-mat"]], "nml::mat3 inverse(const nml::mat3& mat)": [[74, "nml-mat3-inverse-const-nml-mat3-mat"]], "nml::mat4 inverse(const nml::mat4& mat)": [[75, "nml-mat4-inverse-const-nml-mat4-mat"]], "nml::quat nml::normalize(const nml::quat& qua)": [[76, "nml-quat-nml-normalize-const-nml-quat-qua"]], "nml::vec2 nml::normalize(const nml::vec2& vec)": [[77, "nml-vec2-nml-normalize-const-nml-vec2-vec"]], "nml::vec3 nml::normalize(const nml::vec3& vec)": [[78, "nml-vec3-nml-normalize-const-nml-vec3-vec"]], "nml::vec4 nml::normalize(const nml::vec4& vec)": [[79, "nml-vec4-nml-normalize-const-nml-vec4-vec"]], "nml::mat2 operator/(nml::mat2 lhs, const float rhs)": [[80, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat3 operator/(nml::mat3 lhs, const float rhs)": [[81, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat4 operator/(nml::mat4 lhs, const float rhs)": [[82, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::quat operator/(nml::quat lhs, const float rhs)": [[83, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::vec2 operator/(nml::vec2 lhs, const float rhs)": [[84, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator/(nml::vec3 lhs, const float rhs)": [[85, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator/(nml::vec4 lhs, const float rhs)": [[86, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "bool operator==(const nml::mat2& lhs, const nml::mat2& rhs)": [[87, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator==(const nml::mat3& lhs, const nml::mat3& rhs)": [[88, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator==(const nml::mat4& lhs, const nml::mat4& rhs)": [[89, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator==(const nml::quat& lhs, const nml::quat& rhs)": [[90, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator==(const nml::vec2& lhs, const nml::vec2& rhs)": [[91, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator==(const nml::vec3& lhs, const nml::vec3& rhs)": [[92, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator==(const nml::vec4& lhs, const nml::vec4& rhs)": [[93, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "bool operator!=(const nml::mat2& lhs, const nml::mat2& rhs)": [[94, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator!=(const nml::mat3& lhs, const nml::mat3& rhs)": [[95, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator!=(const nml::mat4& lhs, const nml::mat4& rhs)": [[96, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator!=(const nml::quat& lhs, const nml::quat& rhs)": [[97, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator!=(const nml::vec2& lhs, const nml::vec2& rhs)": [[98, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator!=(const nml::vec3& lhs, const nml::vec3& rhs)": [[99, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator!=(const nml::vec4& lhs, const nml::vec4& rhs)": [[100, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2& rhs)": [[101, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3& rhs)": [[102, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4& rhs)": [[103, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator-(nml::quat lhs, const nml::quat& rhs)": [[104, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2& rhs)": [[105, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3& rhs)": [[106, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4& rhs)": [[107, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2& rhs)": [[108, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3& rhs)": [[109, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4& rhs)": [[110, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator+(nml::quat lhs, const nml::quat& rhs)": [[111, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2& rhs)": [[112, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3& rhs)": [[113, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4& rhs)": [[114, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(float lhs, const nml::mat2& rhs)": [[115, "nml-mat2-operator-float-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator*(float lhs, const nml::mat3& rhs)": [[116, "nml-mat3-operator-float-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator*(float lhs, const nml::mat4& rhs)": [[117, "nml-mat4-operator-float-lhs-const-nml-mat4-rhs"]], "nml::quat operator*(float lhs, const nml::quat& rhs)": [[118, "nml-quat-operator-float-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(float lhs, const nml::vec2& rhs)": [[119, "nml-vec2-operator-float-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator*(float lhs, const nml::vec3& rhs)": [[120, "nml-vec3-operator-float-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator*(float lhs, const nml::vec4& rhs)": [[121, "nml-vec4-operator-float-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const float rhs)": [[122, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2& rhs)": [[123, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2& rhs)": [[124, "nml-vec2-operator-nml-mat2-lhs-const-nml-vec2-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const float rhs)": [[125, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3& rhs)": [[126, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3& rhs)": [[127, "nml-vec3-operator-nml-mat3-lhs-const-nml-vec3-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const float rhs)": [[128, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4& rhs)": [[129, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4& rhs)": [[130, "nml-vec4-operator-nml-mat4-lhs-const-nml-vec4-rhs"]], "nml::quat operator*(nml::quat lhs, const float rhs)": [[131, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::quat operator*(nml::quat lhs, const nml::quat& rhs)": [[132, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(nml::vec2 lhs, const float rhs)": [[133, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator*(nml::vec3 lhs, const float rhs)": [[134, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator*(nml::vec4 lhs, const float rhs)": [[135, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "nml::vec2 nml::reflect(const nml::vec2& i, const nml::vec2& n)": [[136, "nml-vec2-nml-reflect-const-nml-vec2-i-const-nml-vec2-n"]], "nml::vec3 nml::reflect(const nml::vec3& i, const nml::vec3& n)": [[137, "nml-vec3-nml-reflect-const-nml-vec3-i-const-nml-vec3-n"]], "nml::vec4 nml::reflect(const nml::vec4& i, const nml::vec4& n)": [[138, "nml-vec4-nml-reflect-const-nml-vec4-i-const-nml-vec4-n"]], "nml::vec2 nml::refract(const nml::vec2& i, const nml::vec2& n, float ior)": [[139, "nml-vec2-nml-refract-const-nml-vec2-i-const-nml-vec2-n-float-ior"]], "nml::vec3 nml::refract(const nml::vec3& i, const nml::vec3& n, float ior)": [[140, "nml-vec3-nml-refract-const-nml-vec3-i-const-nml-vec3-n-float-ior"]], "nml::vec4 nml::refract(const nml::vec4& i, const nml::vec4& n, float ior)": [[141, "nml-vec4-nml-refract-const-nml-vec4-i-const-nml-vec4-n-float-ior"]], "nml::mat3 rotate(const float angle)": [[142, "nml-mat3-rotate-const-float-angle"]], "nml::mat4 rotate(const float angle, const nml::vec3& axis)": [[143, "nml-mat4-rotate-const-float-angle-const-nml-vec3-axis"]], "nml::mat3 scale(const nml::vec2& scaling)": [[144, "nml-mat3-scale-const-nml-vec2-scaling"]], "nml::mat4 scale(const nml::vec3& scaling)": [[145, "nml-mat4-scale-const-nml-vec3-scaling"]], "nml::mat4 nml::to_mat4(const nml::quat& qua)": [[146, "nml-mat4-nml-to-mat4-const-nml-quat-qua"]], "nml::quat nml::to_quat(const nml::vec3& vec)": [[147, "nml-quat-nml-to-quat-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::mat2& vec)": [[148, "std-string-nml-to-string-const-nml-mat2-vec"]], "std::string nml::to_string(const nml::mat3& vec)": [[149, "std-string-nml-to-string-const-nml-mat3-vec"]], "std::string nml::to_string(const nml::mat4& vec)": [[150, "std-string-nml-to-string-const-nml-mat4-vec"]], "std::string nml::to_string(const nml::quat& vec)": [[151, "std-string-nml-to-string-const-nml-quat-vec"]], "std::string nml::to_string(const nml::vec2& vec)": [[152, "std-string-nml-to-string-const-nml-vec2-vec"]], "std::string nml::to_string(const nml::vec3& vec)": [[153, "std-string-nml-to-string-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::vec4& vec)": [[154, "std-string-nml-to-string-const-nml-vec4-vec"]], "nml::vec3 nml::to_vec3(const nml::quat& qua)": [[155, "nml-vec3-nml-to-vec3-const-nml-quat-qua"]], "nml::mat3 translate(const nml::vec2& translation)": [[156, "nml-mat3-translate-const-nml-vec2-translation"]], "nml::mat4 translate(const nml::vec3& translation)": [[157, "nml-mat4-translate-const-nml-vec3-translation"]], "nml::mat2 transpose(const nml::mat2& mat)": [[158, "nml-mat2-transpose-const-nml-mat2-mat"]], "nml::mat3 transpose(const nml::mat3& mat)": [[159, "nml-mat3-transpose-const-nml-mat3-mat"]], "nml::mat4 transpose(const nml::mat4& mat)": [[160, "nml-mat4-transpose-const-nml-mat4-mat"]], "Quaternion": [[161, "quaternion"]], "quat": [[162, "quat"]], "quat: quat()": [[163, "quat-quat"]], "quat: quat(float _a, float _b, float _c, float _d)": [[164, "quat-quat-float-a-float-b-float-c-float-d"]], "quat: float* data()": [[165, "quat-float-data"]], "quat: float length()": [[166, "quat-float-length"]], "quat: float& operator[](size_t index)": [[167, "quat-float-operator-size-t-index"]], "quat: const float operator[](size_t index) const": [[168, "quat-const-float-operator-size-t-index-const"]], "quat: nml::quat& operator/=(const float other)": [[169, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator-=(const nml::quat& other)": [[170, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator+=(const nml::quat& other)": [[171, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator*=(const float other)": [[172, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator*=(const nml::quat& other)": [[173, "quat-nml-quat-operator-const-nml-quat-other"]], "Vector": [[174, "vector"]], "vec2": [[175, "vec2"]], "vec2: vec2()": [[176, "vec2-vec2"]], "vec2: vec2(float _xy)": [[177, "vec2-vec2-float-xy"]], "vec2: vec2(float _x, float _y)": [[178, "vec2-vec2-float-x-float-y"]], "vec2: float* data()": [[179, "vec2-float-data"]], "vec2: float length()": [[180, "vec2-float-length"]], "vec2: float& operator[](size_t index)": [[181, "vec2-float-operator-size-t-index"]], "vec2: const float operator[](size_t index) const": [[182, "vec2-const-float-operator-size-t-index-const"]], "vec2: nml::vec2& operator/=(const float other)": [[183, "vec2-nml-vec2-operator-const-float-other"]], "vec2: nml::vec2& operator-=(const nml::vec2& other)": [[184, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator+=(const nml::vec2& other)": [[185, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator*=(const float other)": [[186, "vec2-nml-vec2-operator-const-float-other"]], "vec3": [[187, "vec3"]], "vec3: vec3()": [[188, "vec3-vec3"]], "vec3: vec3(float _xyz)": [[189, "vec3-vec3-float-xyz"]], "vec3: vec3(float _x, float _y, float _z)": [[190, "vec3-vec3-float-x-float-y-float-z"]], "vec3: vec3(float _x, nml::vec2 _yz)": [[191, "vec3-vec3-float-x-nml-vec2-yz"]], "vec3: vec3(nml::vec2 _xy, float _z)": [[192, "vec3-vec3-nml-vec2-xy-float-z"]], "vec3: float* data()": [[193, "vec3-float-data"]], "vec3: float length()": [[194, "vec3-float-length"]], "vec3: float& operator[](size_t index)": [[195, "vec3-float-operator-size-t-index"]], "vec3: const float operator[](size_t index) const": [[196, "vec3-const-float-operator-size-t-index-const"]], "vec3: nml::vec3& operator/=(const float other)": [[197, "vec3-nml-vec3-operator-const-float-other"]], "vec3: nml::vec3& operator-=(const nml::vec3& other)": [[198, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator+=(const nml::vec3& other)": [[199, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator*=(const float other)": [[200, "vec3-nml-vec3-operator-const-float-other"]], "vec4": [[201, "vec4"]], "vec4: vec4()": [[202, "vec4-vec4"]], "vec4: vec4(float _xyzw)": [[203, "vec4-vec4-float-xyzw"]], "vec4: vec4(float _x, float _y, float _z, float _w)": [[204, "vec4-vec4-float-x-float-y-float-z-float-w"]], "vec4: vec4(float _x, float _y, nlm::vec2 _zw)": [[205, "vec4-vec4-float-x-float-y-nlm-vec2-zw"]], "vec4: vec4(float _x, nlm::vec2 _yz, float _w)": [[206, "vec4-vec4-float-x-nlm-vec2-yz-float-w"]], "vec4: vec4(float _x, nlm::vec3 _yzw)": [[207, "vec4-vec4-float-x-nlm-vec3-yzw"]], "vec4: vec4(nlm::vec2 _xy, float _z, float _w)": [[208, "vec4-vec4-nlm-vec2-xy-float-z-float-w"]], "vec4: vec4(nlm::vec2 _xy, nlm::vec2 _zw)": [[209, "vec4-vec4-nlm-vec2-xy-nlm-vec2-zw"]], "vec4: vec4(nlm::vec3 _xyz, float _w)": [[210, "vec4-vec4-nlm-vec3-xyz-float-w"]], "vec4: float* data()": [[211, "vec4-float-data"]], "vec4: float length()": [[212, "vec4-float-length"]], "vec4: float& operator[](size_t index)": [[213, "vec4-float-operator-size-t-index"]], "vec4: const float operator[](size_t index) const": [[214, "vec4-const-float-operator-size-t-index-const"]], "vec4: nml::vec4& operator/=(const float other)": [[215, "vec4-nml-vec4-operator-const-float-other"]], "vec4: nml::vec4& operator-=(const nml::vec4& other)": [[216, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator+=(const nml::vec4& other)": [[217, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator*=(const float other)": [[218, "vec4-nml-vec4-operator-const-float-other"]]}, "indexentries": {}})