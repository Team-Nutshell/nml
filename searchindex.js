Search.setIndex({"docnames": ["getting_started/index", "index", "nml/index", "nml/matrix/index", "nml/matrix/mat2", "nml/matrix/mat2/constructor", "nml/matrix/mat2/constructor_float", "nml/matrix/mat2/constructor_float_float_float_float", "nml/matrix/mat2/constructor_float_float_vec2", "nml/matrix/mat2/constructor_vec2_float_float", "nml/matrix/mat2/constructor_vec2_vec2", "nml/matrix/mat2/data", "nml/matrix/mat2/det", "nml/matrix/mat2/operator_brackets_ref", "nml/matrix/mat2/operator_brackets_value", "nml/matrix/mat2/operator_divide_equal_float", "nml/matrix/mat2/operator_minus_equal_mat2", "nml/matrix/mat2/operator_plus_equal_mat2", "nml/matrix/mat2/operator_times_equal_float", "nml/matrix/mat2/operator_times_equal_mat2", "nml/matrix/mat3", "nml/matrix/mat3/constructor", "nml/matrix/mat3/constructor_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float", "nml/matrix/mat3/constructor_vec3_vec3_vec3", "nml/matrix/mat3/data", "nml/matrix/mat3/det", "nml/matrix/mat3/operator_brackets_ref", "nml/matrix/mat3/operator_brackets_value", "nml/matrix/mat3/operator_divide_equal_float", "nml/matrix/mat3/operator_minus_equal_mat3", "nml/matrix/mat3/operator_plus_equal_mat3", "nml/matrix/mat3/operator_times_equal_float", "nml/matrix/mat3/operator_times_equal_mat3", "nml/matrix/mat4", "nml/matrix/mat4/constructor", "nml/matrix/mat4/constructor_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4", "nml/matrix/mat4/data", "nml/matrix/mat4/det", "nml/matrix/mat4/operator_brackets_ref", "nml/matrix/mat4/operator_brackets_value", "nml/matrix/mat4/operator_divide_equal_float", "nml/matrix/mat4/operator_minus_equal_mat4", "nml/matrix/mat4/operator_plus_equal_mat4", "nml/matrix/mat4/operator_times_equal_float", "nml/matrix/mat4/operator_times_equal_mat4", "nml/namespace/nml_conjugate_quat", "nml/namespace/nml_cross_vec3_vec3", "nml/namespace/nml_dot_vec2_vec2", "nml/namespace/nml_dot_vec3_vec3", "nml/namespace/nml_dot_vec4_vec4", "nml/namespace/nml_inverse_mat2", "nml/namespace/nml_inverse_mat3", "nml/namespace/nml_inverse_mat4", "nml/namespace/nml_lookatlh_vec3_vec3_vec3", "nml/namespace/nml_lookatrh_vec3_vec3_vec3", "nml/namespace/nml_normalize_quat", "nml/namespace/nml_normalize_vec2", "nml/namespace/nml_normalize_vec3", "nml/namespace/nml_normalize_vec4", "nml/namespace/nml_operator_divide_mat2_float", "nml/namespace/nml_operator_divide_mat3_float", "nml/namespace/nml_operator_divide_mat4_float", "nml/namespace/nml_operator_divide_quat_float", "nml/namespace/nml_operator_divide_vec2_float", "nml/namespace/nml_operator_divide_vec3_float", "nml/namespace/nml_operator_divide_vec4_float", "nml/namespace/nml_operator_is_equal_mat2_mat2", "nml/namespace/nml_operator_is_equal_mat3_mat3", "nml/namespace/nml_operator_is_equal_mat4_mat4", "nml/namespace/nml_operator_is_equal_quat_quat", "nml/namespace/nml_operator_is_equal_vec2_vec2", "nml/namespace/nml_operator_is_equal_vec3_vec3", "nml/namespace/nml_operator_is_equal_vec4_vec4", "nml/namespace/nml_operator_is_not_equal_mat2_mat2", "nml/namespace/nml_operator_is_not_equal_mat3_mat3", "nml/namespace/nml_operator_is_not_equal_mat4_mat4", "nml/namespace/nml_operator_is_not_equal_quat_quat", "nml/namespace/nml_operator_is_not_equal_vec2_vec2", "nml/namespace/nml_operator_is_not_equal_vec3_vec3", "nml/namespace/nml_operator_is_not_equal_vec4_vec4", "nml/namespace/nml_operator_minus_mat2_mat2", "nml/namespace/nml_operator_minus_mat3_mat3", "nml/namespace/nml_operator_minus_mat4_mat4", "nml/namespace/nml_operator_minus_quat_quat", "nml/namespace/nml_operator_minus_vec2_vec2", "nml/namespace/nml_operator_minus_vec3_vec3", "nml/namespace/nml_operator_minus_vec4_vec4", "nml/namespace/nml_operator_plus_mat2_mat2", "nml/namespace/nml_operator_plus_mat3_mat3", "nml/namespace/nml_operator_plus_mat4_mat4", "nml/namespace/nml_operator_plus_quat_quat", "nml/namespace/nml_operator_plus_vec2_vec2", "nml/namespace/nml_operator_plus_vec3_vec3", "nml/namespace/nml_operator_plus_vec4_vec4", "nml/namespace/nml_operator_times_float_mat2", "nml/namespace/nml_operator_times_float_mat3", "nml/namespace/nml_operator_times_float_mat4", "nml/namespace/nml_operator_times_float_quat", "nml/namespace/nml_operator_times_float_vec2", "nml/namespace/nml_operator_times_float_vec3", "nml/namespace/nml_operator_times_float_vec4", "nml/namespace/nml_operator_times_mat2_float", "nml/namespace/nml_operator_times_mat2_mat2", "nml/namespace/nml_operator_times_mat2_vec2", "nml/namespace/nml_operator_times_mat3_float", "nml/namespace/nml_operator_times_mat3_mat3", "nml/namespace/nml_operator_times_mat3_vec3", "nml/namespace/nml_operator_times_mat4_float", "nml/namespace/nml_operator_times_mat4_mat4", "nml/namespace/nml_operator_times_mat4_vec4", "nml/namespace/nml_operator_times_quat_float", "nml/namespace/nml_operator_times_quat_quat", "nml/namespace/nml_operator_times_vec2_float", "nml/namespace/nml_operator_times_vec3_float", "nml/namespace/nml_operator_times_vec4_float", "nml/namespace/nml_ortholh_float_float_float_float_float_float", "nml/namespace/nml_orthorh_float_float_float_float_float_float", "nml/namespace/nml_perspectivelh_float_float_float_float", "nml/namespace/nml_perspectiverh_float_float_float_float", "nml/namespace/nml_reflect_vec2_vec2", "nml/namespace/nml_reflect_vec3_vec3", "nml/namespace/nml_reflect_vec4_vec4", "nml/namespace/nml_refract_vec2_vec2_float", "nml/namespace/nml_refract_vec3_vec3_float", "nml/namespace/nml_refract_vec4_vec4_float", "nml/namespace/nml_rotate_float", "nml/namespace/nml_rotate_float_vec3", "nml/namespace/nml_scale_vec2", "nml/namespace/nml_scale_vec3", "nml/namespace/nml_to_mat4_quat", "nml/namespace/nml_to_quat_vec3", "nml/namespace/nml_to_string_mat2", "nml/namespace/nml_to_string_mat3", "nml/namespace/nml_to_string_mat4", "nml/namespace/nml_to_string_quat", "nml/namespace/nml_to_string_vec2", "nml/namespace/nml_to_string_vec3", "nml/namespace/nml_to_string_vec4", "nml/namespace/nml_to_vec3_quat", "nml/namespace/nml_translate_vec2", "nml/namespace/nml_translate_vec3", "nml/namespace/nml_transpose_mat2", "nml/namespace/nml_transpose_mat3", "nml/namespace/nml_transpose_mat4", "nml/quaternion/index", "nml/quaternion/quat", "nml/quaternion/quat/constructor", "nml/quaternion/quat/constructor_float_float_float_float", "nml/quaternion/quat/data", "nml/quaternion/quat/length", "nml/quaternion/quat/operator_brackets_ref", "nml/quaternion/quat/operator_brackets_value", "nml/quaternion/quat/operator_divide_equal_float", "nml/quaternion/quat/operator_minus_equal_quat", "nml/quaternion/quat/operator_plus_equal_quat", "nml/quaternion/quat/operator_times_equal_float", "nml/quaternion/quat/operator_times_equal_quat", "nml/vector/index", "nml/vector/vec2", "nml/vector/vec2/constructor", "nml/vector/vec2/constructor_float", "nml/vector/vec2/constructor_float_float", "nml/vector/vec2/data", "nml/vector/vec2/length", "nml/vector/vec2/operator_brackets_ref", "nml/vector/vec2/operator_brackets_value", "nml/vector/vec2/operator_divide_equal_float", "nml/vector/vec2/operator_minus_equal_vec2", "nml/vector/vec2/operator_plus_equal_vec2", "nml/vector/vec2/operator_times_equal_float", "nml/vector/vec3", "nml/vector/vec3/constructor", "nml/vector/vec3/constructor_float", "nml/vector/vec3/constructor_float_float_float", "nml/vector/vec3/constructor_float_vec2", "nml/vector/vec3/constructor_vec2_float", "nml/vector/vec3/data", "nml/vector/vec3/length", "nml/vector/vec3/operator_brackets_ref", "nml/vector/vec3/operator_brackets_value", "nml/vector/vec3/operator_divide_equal_float", "nml/vector/vec3/operator_minus_equal_vec3", "nml/vector/vec3/operator_plus_equal_vec3", "nml/vector/vec3/operator_times_equal_float", "nml/vector/vec4", "nml/vector/vec4/constructor", "nml/vector/vec4/constructor_float", "nml/vector/vec4/constructor_float_float_float_float", "nml/vector/vec4/constructor_float_float_vec2", "nml/vector/vec4/constructor_float_vec2_float", "nml/vector/vec4/constructor_float_vec3", "nml/vector/vec4/constructor_vec2_float_float", "nml/vector/vec4/constructor_vec2_vec2", "nml/vector/vec4/constructor_vec3_float", "nml/vector/vec4/data", "nml/vector/vec4/length", "nml/vector/vec4/operator_brackets_ref", "nml/vector/vec4/operator_brackets_value", "nml/vector/vec4/operator_divide_equal_float", "nml/vector/vec4/operator_minus_equal_vec4", "nml/vector/vec4/operator_plus_equal_vec4", "nml/vector/vec4/operator_times_equal_float"], "filenames": ["getting_started/index.rst", "index.rst", "nml/index.rst", "nml/matrix/index.rst", "nml/matrix/mat2.rst", "nml/matrix/mat2/constructor.rst", "nml/matrix/mat2/constructor_float.rst", "nml/matrix/mat2/constructor_float_float_float_float.rst", "nml/matrix/mat2/constructor_float_float_vec2.rst", "nml/matrix/mat2/constructor_vec2_float_float.rst", "nml/matrix/mat2/constructor_vec2_vec2.rst", "nml/matrix/mat2/data.rst", "nml/matrix/mat2/det.rst", "nml/matrix/mat2/operator_brackets_ref.rst", "nml/matrix/mat2/operator_brackets_value.rst", "nml/matrix/mat2/operator_divide_equal_float.rst", "nml/matrix/mat2/operator_minus_equal_mat2.rst", "nml/matrix/mat2/operator_plus_equal_mat2.rst", "nml/matrix/mat2/operator_times_equal_float.rst", "nml/matrix/mat2/operator_times_equal_mat2.rst", "nml/matrix/mat3.rst", "nml/matrix/mat3/constructor.rst", "nml/matrix/mat3/constructor_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_float_float_float_vec3_vec3.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_float_float_float_vec3.rst", "nml/matrix/mat3/constructor_vec3_vec3_float_float_float.rst", "nml/matrix/mat3/constructor_vec3_vec3_vec3.rst", "nml/matrix/mat3/data.rst", "nml/matrix/mat3/det.rst", "nml/matrix/mat3/operator_brackets_ref.rst", "nml/matrix/mat3/operator_brackets_value.rst", "nml/matrix/mat3/operator_divide_equal_float.rst", "nml/matrix/mat3/operator_minus_equal_mat3.rst", "nml/matrix/mat3/operator_plus_equal_mat3.rst", "nml/matrix/mat3/operator_times_equal_float.rst", "nml/matrix/mat3/operator_times_equal_mat3.rst", "nml/matrix/mat4.rst", "nml/matrix/mat4/constructor.rst", "nml/matrix/mat4/constructor_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_float_float_float_float_vec4_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_float_float_float_float_vec4_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_float_float_float_float_vec4.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_float_float_float_float.rst", "nml/matrix/mat4/constructor_vec4_vec4_vec4_vec4.rst", "nml/matrix/mat4/data.rst", "nml/matrix/mat4/det.rst", "nml/matrix/mat4/operator_brackets_ref.rst", "nml/matrix/mat4/operator_brackets_value.rst", "nml/matrix/mat4/operator_divide_equal_float.rst", "nml/matrix/mat4/operator_minus_equal_mat4.rst", "nml/matrix/mat4/operator_plus_equal_mat4.rst", "nml/matrix/mat4/operator_times_equal_float.rst", "nml/matrix/mat4/operator_times_equal_mat4.rst", "nml/namespace/nml_conjugate_quat.rst", "nml/namespace/nml_cross_vec3_vec3.rst", "nml/namespace/nml_dot_vec2_vec2.rst", "nml/namespace/nml_dot_vec3_vec3.rst", "nml/namespace/nml_dot_vec4_vec4.rst", "nml/namespace/nml_inverse_mat2.rst", "nml/namespace/nml_inverse_mat3.rst", "nml/namespace/nml_inverse_mat4.rst", "nml/namespace/nml_lookatlh_vec3_vec3_vec3.rst", "nml/namespace/nml_lookatrh_vec3_vec3_vec3.rst", "nml/namespace/nml_normalize_quat.rst", "nml/namespace/nml_normalize_vec2.rst", "nml/namespace/nml_normalize_vec3.rst", "nml/namespace/nml_normalize_vec4.rst", "nml/namespace/nml_operator_divide_mat2_float.rst", "nml/namespace/nml_operator_divide_mat3_float.rst", "nml/namespace/nml_operator_divide_mat4_float.rst", "nml/namespace/nml_operator_divide_quat_float.rst", "nml/namespace/nml_operator_divide_vec2_float.rst", "nml/namespace/nml_operator_divide_vec3_float.rst", "nml/namespace/nml_operator_divide_vec4_float.rst", "nml/namespace/nml_operator_is_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_equal_quat_quat.rst", "nml/namespace/nml_operator_is_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_equal_vec4_vec4.rst", "nml/namespace/nml_operator_is_not_equal_mat2_mat2.rst", "nml/namespace/nml_operator_is_not_equal_mat3_mat3.rst", "nml/namespace/nml_operator_is_not_equal_mat4_mat4.rst", "nml/namespace/nml_operator_is_not_equal_quat_quat.rst", "nml/namespace/nml_operator_is_not_equal_vec2_vec2.rst", "nml/namespace/nml_operator_is_not_equal_vec3_vec3.rst", "nml/namespace/nml_operator_is_not_equal_vec4_vec4.rst", "nml/namespace/nml_operator_minus_mat2_mat2.rst", "nml/namespace/nml_operator_minus_mat3_mat3.rst", "nml/namespace/nml_operator_minus_mat4_mat4.rst", "nml/namespace/nml_operator_minus_quat_quat.rst", "nml/namespace/nml_operator_minus_vec2_vec2.rst", "nml/namespace/nml_operator_minus_vec3_vec3.rst", "nml/namespace/nml_operator_minus_vec4_vec4.rst", "nml/namespace/nml_operator_plus_mat2_mat2.rst", "nml/namespace/nml_operator_plus_mat3_mat3.rst", "nml/namespace/nml_operator_plus_mat4_mat4.rst", "nml/namespace/nml_operator_plus_quat_quat.rst", "nml/namespace/nml_operator_plus_vec2_vec2.rst", "nml/namespace/nml_operator_plus_vec3_vec3.rst", "nml/namespace/nml_operator_plus_vec4_vec4.rst", "nml/namespace/nml_operator_times_float_mat2.rst", "nml/namespace/nml_operator_times_float_mat3.rst", "nml/namespace/nml_operator_times_float_mat4.rst", "nml/namespace/nml_operator_times_float_quat.rst", "nml/namespace/nml_operator_times_float_vec2.rst", "nml/namespace/nml_operator_times_float_vec3.rst", "nml/namespace/nml_operator_times_float_vec4.rst", "nml/namespace/nml_operator_times_mat2_float.rst", "nml/namespace/nml_operator_times_mat2_mat2.rst", "nml/namespace/nml_operator_times_mat2_vec2.rst", "nml/namespace/nml_operator_times_mat3_float.rst", "nml/namespace/nml_operator_times_mat3_mat3.rst", "nml/namespace/nml_operator_times_mat3_vec3.rst", "nml/namespace/nml_operator_times_mat4_float.rst", "nml/namespace/nml_operator_times_mat4_mat4.rst", "nml/namespace/nml_operator_times_mat4_vec4.rst", "nml/namespace/nml_operator_times_quat_float.rst", "nml/namespace/nml_operator_times_quat_quat.rst", "nml/namespace/nml_operator_times_vec2_float.rst", "nml/namespace/nml_operator_times_vec3_float.rst", "nml/namespace/nml_operator_times_vec4_float.rst", "nml/namespace/nml_ortholh_float_float_float_float_float_float.rst", "nml/namespace/nml_orthorh_float_float_float_float_float_float.rst", "nml/namespace/nml_perspectivelh_float_float_float_float.rst", "nml/namespace/nml_perspectiverh_float_float_float_float.rst", "nml/namespace/nml_reflect_vec2_vec2.rst", "nml/namespace/nml_reflect_vec3_vec3.rst", "nml/namespace/nml_reflect_vec4_vec4.rst", "nml/namespace/nml_refract_vec2_vec2_float.rst", "nml/namespace/nml_refract_vec3_vec3_float.rst", "nml/namespace/nml_refract_vec4_vec4_float.rst", "nml/namespace/nml_rotate_float.rst", "nml/namespace/nml_rotate_float_vec3.rst", "nml/namespace/nml_scale_vec2.rst", "nml/namespace/nml_scale_vec3.rst", "nml/namespace/nml_to_mat4_quat.rst", "nml/namespace/nml_to_quat_vec3.rst", "nml/namespace/nml_to_string_mat2.rst", "nml/namespace/nml_to_string_mat3.rst", "nml/namespace/nml_to_string_mat4.rst", "nml/namespace/nml_to_string_quat.rst", "nml/namespace/nml_to_string_vec2.rst", "nml/namespace/nml_to_string_vec3.rst", "nml/namespace/nml_to_string_vec4.rst", "nml/namespace/nml_to_vec3_quat.rst", "nml/namespace/nml_translate_vec2.rst", "nml/namespace/nml_translate_vec3.rst", "nml/namespace/nml_transpose_mat2.rst", "nml/namespace/nml_transpose_mat3.rst", "nml/namespace/nml_transpose_mat4.rst", "nml/quaternion/index.rst", "nml/quaternion/quat.rst", "nml/quaternion/quat/constructor.rst", "nml/quaternion/quat/constructor_float_float_float_float.rst", "nml/quaternion/quat/data.rst", "nml/quaternion/quat/length.rst", "nml/quaternion/quat/operator_brackets_ref.rst", "nml/quaternion/quat/operator_brackets_value.rst", "nml/quaternion/quat/operator_divide_equal_float.rst", "nml/quaternion/quat/operator_minus_equal_quat.rst", "nml/quaternion/quat/operator_plus_equal_quat.rst", "nml/quaternion/quat/operator_times_equal_float.rst", "nml/quaternion/quat/operator_times_equal_quat.rst", "nml/vector/index.rst", "nml/vector/vec2.rst", "nml/vector/vec2/constructor.rst", "nml/vector/vec2/constructor_float.rst", "nml/vector/vec2/constructor_float_float.rst", "nml/vector/vec2/data.rst", "nml/vector/vec2/length.rst", "nml/vector/vec2/operator_brackets_ref.rst", "nml/vector/vec2/operator_brackets_value.rst", "nml/vector/vec2/operator_divide_equal_float.rst", "nml/vector/vec2/operator_minus_equal_vec2.rst", "nml/vector/vec2/operator_plus_equal_vec2.rst", "nml/vector/vec2/operator_times_equal_float.rst", "nml/vector/vec3.rst", "nml/vector/vec3/constructor.rst", "nml/vector/vec3/constructor_float.rst", "nml/vector/vec3/constructor_float_float_float.rst", "nml/vector/vec3/constructor_float_vec2.rst", "nml/vector/vec3/constructor_vec2_float.rst", "nml/vector/vec3/data.rst", "nml/vector/vec3/length.rst", "nml/vector/vec3/operator_brackets_ref.rst", "nml/vector/vec3/operator_brackets_value.rst", "nml/vector/vec3/operator_divide_equal_float.rst", "nml/vector/vec3/operator_minus_equal_vec3.rst", "nml/vector/vec3/operator_plus_equal_vec3.rst", "nml/vector/vec3/operator_times_equal_float.rst", "nml/vector/vec4.rst", "nml/vector/vec4/constructor.rst", "nml/vector/vec4/constructor_float.rst", "nml/vector/vec4/constructor_float_float_float_float.rst", "nml/vector/vec4/constructor_float_float_vec2.rst", "nml/vector/vec4/constructor_float_vec2_float.rst", "nml/vector/vec4/constructor_float_vec3.rst", "nml/vector/vec4/constructor_vec2_float_float.rst", "nml/vector/vec4/constructor_vec2_vec2.rst", "nml/vector/vec4/constructor_vec3_float.rst", "nml/vector/vec4/data.rst", "nml/vector/vec4/length.rst", "nml/vector/vec4/operator_brackets_ref.rst", "nml/vector/vec4/operator_brackets_value.rst", "nml/vector/vec4/operator_divide_equal_float.rst", "nml/vector/vec4/operator_minus_equal_vec4.rst", "nml/vector/vec4/operator_plus_equal_vec4.rst", "nml/vector/vec4/operator_times_equal_float.rst"], "titles": ["Getting started", "nml - Nutshell Mathematics Library", "nml", "Matrix", "mat2", "mat2: mat2()", "mat2: mat2(float _xxxyyxyy)", "mat2: mat2(float _xx, float _xy, float _yx, float _yy)", "mat2: mat2(float _xx, float _xy, nlm::vec2 _yxyy)", "mat2: mat2(nlm::vec2 _xxxy, float _yx, float _yy)", "mat2: mat2(nlm::vec2 _xxxy, nlm::vec2 _yxyy)", "mat2: float* data()", "mat2: float det() const", "mat2: nml::mat2&amp; operator[](size_t index)", "mat2: const nml::mat2&amp; operator[](size_t index) const", "mat2: nml::mat2&amp; operator/=(const float other)", "mat2: nml::mat2&amp; operator-=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator+=(const nml::mat2&amp; other)", "mat2: nml::mat2&amp; operator*=(const float other)", "mat2: nml::mat2&amp; operator*=(const nlm::mat2&amp; other)", "mat3", "mat3: mat3()", "mat3: mat3(float _xxxyxzyxyyyzzxzyzz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)", "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)", "mat3: mat3(nml::vec3 _xxxyxz, float _yy, float _yz, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _xxxyxz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)", "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)", "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)", "mat3: float* data()", "mat3: float det() const", "mat3: nml::mat3&amp; operator[](size_t index)", "mat3: const nml::mat3&amp; operator[](size_t index) const", "mat3: nml::mat3&amp; operator/=(const float other)", "mat3: nml::mat3&amp; operator-=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator+=(const nml::mat3&amp; other)", "mat3: nml::mat3&amp; operator*=(const float other)", "mat3: nml::mat3&amp; operator*=(const nlm::mat3&amp; other)", "mat4", "mat4: mat4()", "mat4: mat4(float _xxxyxzxwyxyyyzywzxzyzzzwwxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)", "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)", "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)", "mat4: float* data()", "mat4: float det() const", "mat4: nml::mat4&amp; operator[](size_t index)", "mat4: const nml::mat4&amp; operator[](size_t index) const", "mat4: nml::mat4&amp; operator/=(const float other)", "mat4: nml::mat4&amp; operator-=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator+=(const nml::mat4&amp; other)", "mat4: nml::mat4&amp; operator*=(const float other)", "mat4: nml::mat4&amp; operator*=(const nlm::mat4&amp; other)", "nml::quat nml::conjugate(const nml::quat&amp; qua)", "nml::vec3 nml::cross(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec2&amp; a, const nml::vec2&amp; b)", "float nml::dot(const nml::vec3&amp; a, const nml::vec3&amp; b)", "float nml::dot(const nml::vec4&amp; a, const nml::vec4&amp; b)", "nml::mat2 inverse(const nml::mat2&amp; mat)", "nml::mat3 inverse(const nml::mat3&amp; mat)", "nml::mat4 inverse(const nml::mat4&amp; mat)", "nml::mat4 lookAtLH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::mat4 lookAtRH(const nml::vec3&amp; from, const nml::vec3&amp; to, const nml::vec3&amp; up)", "nml::quat nml::normalize(const nml::quat&amp; qua)", "nml::vec2 nml::normalize(const nml::vec2&amp; vec)", "nml::vec3 nml::normalize(const nml::vec3&amp; vec)", "nml::vec4 nml::normalize(const nml::vec4&amp; vec)", "nml::mat2 operator/(nml::mat2 lhs, const float rhs)", "nml::mat3 operator/(nml::mat3 lhs, const float rhs)", "nml::mat4 operator/(nml::mat4 lhs, const float rhs)", "nml::quat operator/(nml::quat lhs, const float rhs)", "nml::vec2 operator/(nml::vec2 lhs, const float rhs)", "nml::vec3 operator/(nml::vec3 lhs, const float rhs)", "nml::vec4 operator/(nml::vec4 lhs, const float rhs)", "bool operator==(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator==(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator==(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator==(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator==(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator==(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator==(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "bool operator!=(const nml::mat2&amp; lhs, const nml::mat2&amp; rhs)", "bool operator!=(const nml::mat3&amp; lhs, const nml::mat3&amp; rhs)", "bool operator!=(const nml::mat4&amp; lhs, const nml::mat4&amp; rhs)", "bool operator!=(const nml::quat&amp; lhs, const nml::quat&amp; rhs)", "bool operator!=(const nml::vec2&amp; lhs, const nml::vec2&amp; rhs)", "bool operator!=(const nml::vec3&amp; lhs, const nml::vec3&amp; rhs)", "bool operator!=(const nml::vec4&amp; lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator-(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::quat operator+(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(float lhs, const nml::mat2&amp; rhs)", "nml::mat3 operator*(float lhs, const nml::mat3&amp; rhs)", "nml::mat4 operator*(float lhs, const nml::mat4&amp; rhs)", "nml::quat operator*(float lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(float lhs, const nml::vec2&amp; rhs)", "nml::vec3 operator*(float lhs, const nml::vec3&amp; rhs)", "nml::vec4 operator*(float lhs, const nml::vec4&amp; rhs)", "nml::mat2 operator*(nml::mat2 lhs, const float rhs)", "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2&amp; rhs)", "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2&amp; rhs)", "nml::mat3 operator*(nml::mat3 lhs, const float rhs)", "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3&amp; rhs)", "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3&amp; rhs)", "nml::mat4 operator*(nml::mat4 lhs, const float rhs)", "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4&amp; rhs)", "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4&amp; rhs)", "nml::quat operator*(nml::quat lhs, const float rhs)", "nml::quat operator*(nml::quat lhs, const nml::quat&amp; rhs)", "nml::vec2 operator*(nml::vec2 lhs, const float rhs)", "nml::vec3 operator*(nml::vec3 lhs, const float rhs)", "nml::vec4 operator*(nml::vec4 lhs, const float rhs)", "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)", "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)", "nml::vec2 nml::reflect(const nml::vec2&amp; i, const nml::vec2&amp; n)", "nml::vec3 nml::reflect(const nml::vec3&amp; i, const nml::vec3&amp; n)", "nml::vec4 nml::reflect(const nml::vec4&amp; i, const nml::vec4&amp; n)", "nml::vec2 nml::refract(const nml::vec2&amp; i, const nml::vec2&amp; n, float ior)", "nml::vec3 nml::refract(const nml::vec3&amp; i, const nml::vec3&amp; n, float ior)", "nml::vec4 nml::refract(const nml::vec4&amp; i, const nml::vec4&amp; n, float ior)", "nml::mat3 rotate(const float angle)", "nml::mat4 rotate(const float angle, const nml::vec3&amp; axis)", "nml::mat3 scale(const nml::vec2&amp; scaling)", "nml::mat4 scale(const nml::vec3&amp; scaling)", "nml::mat4 nml::to_mat4(const nml::quat&amp; qua)", "nml::quat nml::to_quat(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::mat2&amp; vec)", "std::string nml::to_string(const nml::mat3&amp; vec)", "std::string nml::to_string(const nml::mat4&amp; vec)", "std::string nml::to_string(const nml::quat&amp; vec)", "std::string nml::to_string(const nml::vec2&amp; vec)", "std::string nml::to_string(const nml::vec3&amp; vec)", "std::string nml::to_string(const nml::vec4&amp; vec)", "nml::vec3 nml::to_vec3(const nml::quat&amp; qua)", "nml::mat3 translate(const nml::vec2&amp; translation)", "nml::mat4 translate(const nml::vec3&amp; translation)", "nml::mat2 transpose(const nml::mat2&amp; mat)", "nml::mat3 transpose(const nml::mat3&amp; mat)", "nml::mat4 transpose(const nml::mat4&amp; mat)", "Quaternion", "quat", "quat: quat()", "quat: quat(float _a, float _b, float _c, float _d)", "quat: float* data()", "quat: float length()", "quat: float&amp; operator[](size_t index)", "quat: const float operator[](size_t index) const", "quat: nml::quat&amp; operator/=(const float other)", "quat: nml::quat&amp; operator-=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator+=(const nml::quat&amp; other)", "quat: nml::quat&amp; operator*=(const float other)", "quat: nml::quat&amp; operator*=(const nml::quat&amp; other)", "Vector", "vec2", "vec2: vec2()", "vec2: vec2(float _xy)", "vec2: vec2(float _x, float _y)", "vec2: float* data()", "vec2: float length()", "vec2: float&amp; operator[](size_t index)", "vec2: const float operator[](size_t index) const", "vec2: nml::vec2&amp; operator/=(const float other)", "vec2: nml::vec2&amp; operator-=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator+=(const nml::vec2&amp; other)", "vec2: nml::vec2&amp; operator*=(const float other)", "vec3", "vec3: vec3()", "vec3: vec3(float _xyz)", "vec3: vec3(float _x, float _y, float _z)", "vec3: vec3(float _x, nml::vec2 _yz)", "vec3: vec3(nml::vec2 _xy, float _z)", "vec3: float* data()", "vec3: float length()", "vec3: float&amp; operator[](size_t index)", "vec3: const float operator[](size_t index) const", "vec3: nml::vec3&amp; operator/=(const float other)", "vec3: nml::vec3&amp; operator-=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator+=(const nml::vec3&amp; other)", "vec3: nml::vec3&amp; operator*=(const float other)", "vec4", "vec4: vec4()", "vec4: vec4(float _xyzw)", "vec4: vec4(float _x, float _y, float _z, float _w)", "vec4: vec4(float _x, float _y, nlm::vec2 _zw)", "vec4: vec4(float _x, nlm::vec2 _yz, float _w)", "vec4: vec4(float _x, nlm::vec3 _yzw)", "vec4: vec4(nlm::vec2 _xy, float _z, float _w)", "vec4: vec4(nlm::vec2 _xy, nlm::vec2 _zw)", "vec4: vec4(nlm::vec3 _xyz, float _w)", "vec4: float* data()", "vec4: float length()", "vec4: float&amp; operator[](size_t index)", "vec4: const float operator[](size_t index) const", "vec4: nml::vec4&amp; operator/=(const float other)", "vec4: nml::vec4&amp; operator-=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator+=(const nml::vec4&amp; other)", "vec4: nml::vec4&amp; operator*=(const float other)"], "terms": {"i": [0, 1, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 157, 161, 162, 163, 164, 165, 166, 168, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 188, 189, 190, 191, 192, 193, 200, 201, 202, 203, 204, 205, 206, 207, 218, 219, 220, 221, 222, 223, 224], "avail": [0, 1], "github": [0, 1], "git": 0, "clone": 0, "http": 0, "com": 0, "team": 0, "nutshel": 0, "can": [0, 180], "built": 0, "static": 0, "librari": 0, "name": [0, 4, 20, 40, 168, 181, 193, 207], "replac": 0, "path_to_nml": 0, "path": 0, "sourc": 0, "code": 0, "directori": 0, "add_subdirectori": 0, "target_include_directori": 0, "project_nam": 0, "public": 0, "target_link_librari": 0, "In": 0, "sampl": 0, "It": 0, "possibl": 0, "includ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "entir": 0, "one": 0, "h": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "Or": 0, "onli": 0, "need": 0, "header": [0, 4, 20, 40, 168, 181, 193, 207], "vec2": [0, 1, 2, 4, 13, 14, 20, 180, 193, 207], "vec3": [0, 1, 2, 20, 33, 34, 40, 168, 180, 207], "mat4": [0, 1, 2, 3], "c": [1, 14, 34, 62, 67, 69, 70, 71, 72, 74, 75, 78, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 125, 126, 128, 129, 131, 132, 133, 134, 142, 143, 144, 145, 146, 147, 149, 152, 157, 161, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 188, 202, 220], "comput": 1, "graphic": 1, "get": 1, "start": 1, "add": [1, 4, 17, 20, 37, 40, 65, 168, 177, 181, 191, 193, 205, 207, 223], "cmake": 1, "project": [1, 40, 138, 139, 140, 141], "us": [1, 180], "vector": [1, 2, 20, 40, 142, 143, 144, 145, 146, 147, 149, 162, 163, 181, 182, 183, 184, 185, 186, 193, 194, 195, 196, 197, 198, 199, 200, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "vec4": [1, 2, 40, 54, 61, 62, 180], "matrix": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 73, 74, 75, 76, 77, 138, 139, 140, 141, 148, 149, 150, 151, 152, 162, 163], "mat2": [1, 2, 3], "mat3": [1, 2, 3], "quaternion": [1, 2, 40, 68, 152, 153, 161, 168, 169, 170, 171, 172, 193], "quat": [1, 2, 40, 167, 193], "index": [1, 4, 20, 40, 168, 181, 193, 207], "modul": 1, "search": 1, "page": 1, "class": [2, 3, 167, 180], "variabl": [2, 3, 167, 180], "function": [2, 3, 73, 74, 75, 142, 143, 144, 145, 146, 147, 149, 167, 180], "constructor": [2, 3, 167, 180], "oper": [2, 3, 167, 180], "namespac": [2, 3, 167, 180], "file": [4, 20, 40, 168, 181, 193, 207], "column": [4, 20, 40, 164, 165, 166], "major": [4, 20, 40], "2": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "row": [4, 20, 40, 164, 165, 166], "begin": [4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224], "bmatrix": [4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224], "x": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 171, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "y": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "end": [4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 161, 162, 163, 164, 165, 166, 181, 182, 183, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224], "type": [4, 20, 40, 168, 181, 193, 207], "descript": [4, 20, 40, 168, 181, 193, 207], "nml": [4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21, 22, 23, 31, 32, 40, 41, 42, 43, 54, 59, 60, 168, 169, 170, 171, 172, 173, 174, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "The": [4, 12, 15, 16, 17, 18, 19, 20, 32, 35, 36, 37, 38, 39, 40, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 163, 164, 165, 166, 168, 172, 175, 176, 177, 178, 179, 181, 186, 189, 190, 191, 192, 193, 200, 203, 204, 205, 206, 207, 218, 221, 222, 223, 224], "first": [4, 20, 40, 168, 181, 193, 207], "second": [4, 20, 40, 168, 181, 193, 207], "construct": [4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 168, 169, 170, 181, 182, 183, 184, 193, 194, 195, 196, 197, 198, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "1": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "ident": [4, 5, 20, 21, 40, 41, 89, 90, 91, 92, 93, 94, 95, 168, 169, 181, 193, 207], "float": [4, 14, 20, 34, 40, 62, 168, 181, 193, 207], "_xxxyyxyi": 4, "_xx": [4, 20, 40], "_xy": [4, 20, 40, 181, 193, 207], "_yx": [4, 20, 27, 40], "_yi": [4, 20, 40], "nlm": [4, 20, 40, 207], "_yxyi": 4, "_xxxy": 4, "const": [4, 20, 40, 168, 181, 193, 207], "other": [4, 20, 40, 168, 181, 193, 207], "current": [4, 15, 16, 17, 18, 19, 20, 35, 36, 37, 38, 39, 40, 63, 64, 65, 66, 67, 168, 175, 176, 177, 178, 179, 181, 189, 190, 191, 192, 193, 203, 204, 205, 206, 207, 221, 222, 223, 224], "substract": [4, 16, 20, 36, 40, 64, 168, 176, 181, 190, 193, 204, 207, 222], "from": [4, 16, 20, 36, 40, 64, 152, 153, 161, 168, 176, 181, 190, 193, 204, 207, 222], "multipli": [4, 18, 19, 20, 38, 39, 40, 66, 67, 168, 178, 179, 181, 192, 193, 206, 207, 224], "scalar": [4, 15, 18, 20, 35, 38, 40, 63, 66, 82, 83, 84, 85, 86, 87, 88, 117, 118, 119, 120, 121, 122, 123, 124, 127, 130, 133, 134, 135, 136, 137, 168, 175, 178, 179, 180, 181, 189, 192, 193, 203, 206, 207, 221, 224], "divid": [4, 15, 20, 35, 40, 63, 168, 175, 181, 189, 193, 203, 207, 221], "size_t": [4, 20, 40, 168, 181, 193, 207], "return": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "refer": [4, 13, 14, 20, 33, 34, 40, 61, 62, 168, 173, 181, 187, 193, 201, 207, 219], "els": [4, 13, 14, 20, 33, 34, 40, 61, 62, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 168, 173, 174, 181, 187, 188, 193, 201, 202, 207, 219, 220], "throw": [4, 13, 14, 20, 33, 34, 40, 61, 62, 168, 173, 174, 181, 187, 188, 193, 201, 202, 207, 219, 220], "an": [4, 13, 14, 20, 33, 34, 40, 61, 62, 168, 173, 174, 181, 187, 188, 193, 201, 202, 207, 219, 220], "except": [4, 13, 14, 20, 33, 34, 40, 61, 62, 168, 173, 174, 181, 187, 188, 193, 201, 202, 207, 219, 220], "det": [4, 20, 40, 73, 74, 75], "determin": [4, 12, 20, 32, 40, 60, 73, 74, 75], "data": [4, 20, 40, 168, 181, 193, 207], "pointer": [4, 11, 20, 31, 40, 59, 168, 171, 181, 185, 193, 199, 207, 217], "": [4, 11, 20, 31, 40, 59, 168, 171, 181, 185, 193, 199, 207, 217], "element": [4, 11, 20, 31, 40, 59, 168, 171, 181, 185, 193, 199, 207, 217], "transpos": [4, 20, 40], "mat": [4, 20, 40], "where": [4, 20, 40, 164, 165, 166], "ar": [4, 20, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 164, 165, 166, 168, 180, 181, 193, 207], "invers": [4, 19, 20, 39, 40, 67, 125, 128, 131], "std": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "string": [4, 20, 40, 168, 181, 193, 207], "to_str": [4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 163, 164, 165, 166, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224], "under": [4, 20, 40, 154, 155, 156, 157, 158, 159, 160, 168, 181, 193, 207], "format": [4, 20, 40, 154, 155, 156, 157, 158, 159, 160, 168, 181, 193, 207], "iostream": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "main": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "m": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 75, 76, 77, 131, 138, 139, 140, 141, 148, 149, 150, 151, 152, 154, 155, 156, 162, 163], "cout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "endl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "result": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "000000": [5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 82, 83, 84, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 173, 176, 177, 178, 182, 183, 184, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224], "0f": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "3": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 148, 149, 154, 155, 156, 159, 160, 163, 164, 165, 166, 168, 171, 173, 174, 177, 187, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "4": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 73, 74, 75, 76, 77, 81, 82, 83, 84, 88, 89, 90, 91, 95, 96, 97, 98, 101, 102, 103, 104, 105, 110, 111, 112, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 132, 137, 143, 144, 146, 147, 154, 155, 156, 160, 164, 165, 166, 168, 173, 174, 190, 191, 192, 201, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "access": [11, 31, 59, 171, 185, 199, 217], "char": [11, 31, 59, 171, 185, 199, 217], "sizeof": [11, 31, 59, 171, 185, 199, 217], "take": [11, 31, 59, 171, 185, 199, 217], "address": [11, 31, 59, 171, 185, 199, 217], "size": [11, 31, 59, 171, 185, 199, 217], "two": [11, 16, 17, 19, 20, 31, 36, 37, 39, 40, 59, 64, 65, 67, 69, 70, 71, 72, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 125, 128, 131, 168, 171, 176, 177, 181, 190, 191, 193, 199, 204, 205, 207, 217, 222, 223], "three": [11, 31, 59, 171, 217], "calcul": [12, 15, 16, 17, 18, 19, 32, 35, 36, 37, 38, 39, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 163, 164, 165, 166, 172, 175, 176, 177, 178, 179, 186, 189, 190, 191, 192, 200, 203, 204, 205, 206, 218, 221, 222, 223, 224], "thi": [12, 15, 16, 17, 18, 19, 32, 35, 36, 37, 38, 39, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 163, 164, 165, 166, 172, 175, 176, 177, 178, 179, 186, 189, 190, 191, 192, 200, 203, 204, 205, 206, 218, 221, 222, 223, 224], "wai": [12, 15, 16, 17, 18, 19, 32, 35, 36, 37, 38, 39, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 161, 162, 163, 164, 165, 166, 172, 175, 176, 177, 178, 179, 186, 189, 190, 191, 192, 200, 203, 204, 205, 206, 218, 221, 222, 223, 224], "5": [13, 16, 17, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 74, 75, 76, 77, 81, 83, 84, 90, 91, 96, 97, 98, 102, 103, 104, 105, 107, 108, 109, 115, 116, 118, 119, 127, 128, 129, 130, 132, 155, 156, 165, 166, 171, 173, 174, 204, 205, 218, 219, 222, 223], "6": [13, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 74, 75, 83, 84, 90, 91, 97, 98, 103, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 127, 128, 130, 135, 136, 137, 155, 156, 165, 166, 190, 191, 204, 205, 206, 222, 223, 224], "7": [13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 74, 75, 83, 84, 90, 91, 97, 98, 104, 105, 108, 109, 115, 116, 118, 119, 127, 128, 129, 130, 155, 156, 165, 166], "error": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "termin": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "call": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "after": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "instanc": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "out_of_rang": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "what": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "out": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "rang": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "abort": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "b": [14, 16, 17, 19, 34, 36, 37, 39, 62, 64, 65, 67, 68, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 149, 152, 157, 161, 164, 165, 166, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 188, 190, 191, 193, 200, 202, 204, 205, 207, 218, 220, 222, 223], "d": [14, 34, 62, 67, 74, 75, 78, 85, 92, 99, 106, 113, 120, 131, 133, 134, 149, 152, 157, 161, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 202, 220], "quotient": [15, 20, 35, 40, 63, 82, 83, 84, 85, 86, 87, 88, 168, 175, 181, 189, 193, 203, 207, 221], "between": [15, 16, 17, 18, 19, 20, 35, 36, 37, 38, 39, 40, 63, 64, 65, 66, 67, 69, 70, 71, 72, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 168, 175, 176, 177, 178, 179, 181, 189, 190, 191, 192, 193, 203, 204, 205, 206, 207, 221, 222, 223, 224], "frac": [15, 35, 63, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 138, 139, 140, 141, 153, 175, 189, 203, 221], "500000": [15, 35, 63, 73, 75, 82, 83, 84, 85, 86, 87, 88, 104, 105, 108, 109, 138, 139, 146, 147, 153, 175, 189, 203, 221], "differ": [16, 20, 36, 40, 64, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 168, 176, 181, 190, 193, 204, 207, 222], "8": [16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 75, 83, 84, 90, 91, 97, 98, 104, 105, 109, 110, 111, 112, 118, 119, 127, 128, 130, 155, 156, 165, 166, 204, 222, 223, 224], "10": [16, 17, 32, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 75, 84, 91, 98, 105, 110, 111, 112, 119, 128, 130, 138, 139, 140, 141, 156, 166, 222], "sum": [17, 20, 37, 40, 65, 110, 111, 112, 113, 114, 115, 116, 168, 177, 181, 191, 193, 205, 207, 223], "product": [18, 19, 20, 38, 39, 40, 66, 67, 69, 70, 71, 72, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 168, 178, 179, 181, 192, 193, 206, 207, 224], "z": [20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 77, 80, 81, 83, 84, 87, 88, 90, 91, 94, 95, 97, 98, 101, 102, 104, 105, 108, 109, 111, 112, 115, 116, 118, 119, 122, 123, 127, 128, 129, 130, 131, 132, 136, 137, 143, 144, 146, 147, 149, 151, 153, 155, 156, 159, 160, 163, 165, 166, 193, 199, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224], "third": [20, 40, 168, 193, 207], "_xxxyxzyxyyyzzxzyzz": 20, "_xz": [20, 40], "_yz": [20, 40, 193, 207], "_zx": [20, 40], "_zy": [20, 40], "_zz": [20, 40], "_zxzyzz": 20, "_yxyyyz": 20, "_xxxyxz": 20, "lh": [20, 40, 168, 181, 193, 207], "rh": [20, 40, 168, 181, 193, 207], "bool": [20, 40, 168, 181, 193, 207], "true": [20, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 168, 181, 193, 207], "fals": [20, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 168, 181, 193, 207], "translat": [20, 40], "2d": [20, 148, 150, 162], "accord": [20, 40, 148, 149, 150, 151, 162, 163], "rotat": [20, 40, 152], "angl": [20, 40, 153, 161, 168, 180, 193], "radian": [20, 40, 148, 149, 161, 168, 193], "scale": [20, 40], "factor": [20, 40, 150, 151], "9": [23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 75, 83, 84, 90, 91, 97, 98, 104, 105, 117, 118, 119, 122, 123, 124, 127, 130, 136, 137, 155, 156, 165, 166, 205, 223], "four": [31, 59], "five": [31, 59], "six": [31, 59], "seven": [31, 59], "eight": [31, 59], "small": [32, 67, 75, 89, 90, 91, 96, 97, 98, 131, 161], "12": [33, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 84, 91, 97, 98, 105, 111, 112, 115, 116, 117, 118, 119, 123, 124, 127, 130, 137, 156, 166], "25": [33, 61, 132, 171, 174], "14": [36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 84, 91, 98, 105, 111, 112, 119, 130, 156, 166, 223], "16": [36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 84, 91, 98, 105, 110, 111, 112, 119, 130, 156, 166], "18": [36, 37, 38, 64, 65, 66, 111, 112, 118, 119, 127, 130], "20": [36, 37, 61, 64, 65, 66, 112], "11": [36, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 84, 91, 98, 105, 119, 130, 156, 166], "tini": [39, 42, 128], "w": [40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 75, 81, 84, 88, 91, 95, 98, 102, 105, 109, 112, 116, 119, 123, 130, 131, 132, 137, 144, 147, 156, 160, 166, 207, 217, 218, 219, 220, 221, 222, 223, 224], "fourth": [40, 168, 207], "_xxxyxzxwyxyyyzywzxzyzzzwwxwywzww": 40, "_xw": 40, "_yw": 40, "_zw": [40, 207], "_wx": 40, "_wy": 40, "_wz": 40, "_ww": 40, "_wxwywzww": [40, 54], "_zxzyzzzw": [40, 54], "_yxyyyzyw": 40, "_xxxyxzxw": [40, 54], "3d": [40, 149, 151, 152, 163], "axi": [40, 180], "lookatlh": 40, "up": 40, "left": [40, 76, 78, 79, 80, 81, 140], "hand": [40, 76, 77, 138, 139, 140, 141], "look": [40, 76, 77], "view": [40, 76, 77], "lookatrh": 40, "right": [40, 76, 77, 78, 79, 80, 81, 141], "ortholh": 40, "bottom": 40, "top": 40, "far": 40, "orthograph": [40, 138, 139], "orthorh": 40, "perspectivelh": 40, "fovi": 40, "aspectratio": 40, "perspect": [40, 140, 141], "perspectiverh": 40, "to_mat4": 40, "qua": [40, 168, 193], "13": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 84, 91, 98, 105, 119, 130, 156, 166], "15": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 84, 91, 98, 105, 118, 119, 127, 130, 156, 166], "nine": 59, "ten": 59, "eleven": 59, "twelv": 59, "thirteen": 59, "fourteen": 59, "fifteen": 59, "scriptsiz": 60, "32": [60, 64, 65, 66, 111, 112], "64": [60, 111, 112], "480": 60, "250": 61, "e": [62, 67, 74, 75, 131, 149, 152, 174, 220], "22": [64, 65, 66, 112], "24": [64, 65, 66, 112, 118, 119, 127, 130], "26": [64, 65, 66, 111, 112], "28": [64, 65, 66, 112, 132], "30": [64, 65, 66, 112, 119, 130], "34": [64, 65], "17": [64, 65, 129, 132], "f": [67, 74, 75, 131, 149, 152], "j": [67, 75, 78, 85, 106, 113, 120, 131, 133, 134, 153, 157, 168, 175, 176, 177, 178, 179], "n": [67, 75, 131, 181, 193, 207], "g": [67, 74, 75, 131, 149, 152], "k": [67, 75, 78, 85, 106, 113, 120, 131, 133, 134, 145, 146, 147, 153, 157, 168, 175, 176, 177, 178, 179], "o": [67, 75, 131], "l": [67, 75, 131], "p": [67, 75, 131], "conj": 68, "bi": [68, 78, 85, 92, 99, 106, 113, 120, 133, 134, 168, 175, 176, 177, 178, 179], "cj": [68, 78, 85, 92, 99, 106, 113, 120, 133, 134, 168, 175, 176, 177, 178, 179], "dk": [68, 78, 85, 92, 99, 106, 113, 120, 133, 134, 168, 175, 176, 177, 178, 179], "25f": [68, 76, 77, 78, 85, 92, 99, 105, 106, 113, 120, 126, 129, 132, 133, 134, 157, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "5f": [68, 76, 77, 78, 85, 92, 99, 104, 105, 106, 108, 109, 113, 120, 126, 129, 132, 133, 134, 145, 146, 147, 157, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "75f": [68, 78, 85, 92, 99, 106, 113, 120, 133, 134, 157, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "250000i": [68, 157, 170], "500000j": [68, 106, 113, 120, 133, 153, 157, 170], "750000k": [68, 157, 170], "dot": [69, 181, 193, 207], "time": [69, 76, 77], "cdot": [70, 71, 72, 76, 77, 142, 143, 144, 145, 146, 147], "doe": [73, 74, 75, 142, 143, 144, 145, 146, 147, 149], "check": [73, 74, 75], "invert": [73, 74, 75], "null": [73, 74, 75], "inva": [73, 74, 75], "invb": [73, 74, 75], "undefin": [73, 74, 75], "behaviour": [73, 74, 75], "inf": [73, 74], "t": [74, 75, 164, 165, 166], "adj": [74, 75], "666667": 74, "333333": 74, "nan": 75, "realup": [76, 77], "forward": [76, 77], "norm": [76, 77, 78, 79, 80, 81], "707107": [76, 77], "313677": [76, 77], "633724": [76, 77], "896221": [76, 77], "443607": [76, 77], "949747": [76, 77], "061309": [76, 77], "598269": [76, 77], "same": [78, 79, 80, 81, 168, 181, 193, 207], "direct": [78, 79, 80, 81, 142, 143, 144, 145, 146, 147, 168, 181, 193, 207], "length": [78, 79, 80, 81, 168, 181, 193, 207], "36931": [78, 172], "730297": [78, 81], "182574i": 78, "365148j": 78, "547723k": 78, "23607": [79, 186], "447214": 79, "894427": 79, "74166": [80, 200], "267261": 80, "534522": 80, "801784": 80, "47723": [81, 218], "182574": 81, "365148": 81, "547723": 81, "125000i": [85, 175], "250000j": [85, 175], "375000k": [85, 175], "equal": [89, 90, 91, 92, 93, 94, 95], "inequ": [96, 97, 98, 99, 100, 101, 102], "neq": [96, 97, 98, 99, 100, 101, 102], "99f": 105, "2f": 105, "750000": [105, 126, 132], "010000": 105, "800000": 105, "000000i": [106, 169, 173], "250000k": [106, 113, 120, 133], "128": [111, 112], "256": [111, 112], "44": [111, 112], "78": [111, 112], "144": [111, 112], "274": [111, 112], "512": 112, "1024": 112, "2048": 112, "4096": 112, "8192": 112, "16384": 112, "32768": 112, "532": 112, "1046": 112, "2072": 112, "4122": 112, "8220": 112, "16414": 112, "32800": 112, "500000i": [113, 153, 178], "19": 116, "21": [118, 119, 127, 130], "27": [118, 119, 127, 130], "33": [119, 130], "36": [119, 130, 132], "39": [119, 130], "42": [119, 130], "45": [119, 130], "48": [119, 130], "750000i": [120, 133], "875000": 126, "250000": 129, "187500": [129, 134, 179], "812500": 132, "562500": 132, "82f": [134, 176, 177, 179], "24f": [134, 176, 177, 179], "65f": [134, 176, 177, 179], "465000i": [134, 179], "692500j": [134, 179], "800000k": [134, 179], "100000": [138, 139], "050000": [138, 139], "tan": [140, 141], "347270": [140, 141], "617370": [140, 141], "000500": [140, 141], "050025": [140, 141], "incid": [142, 143, 144, 145, 146, 147, 181, 193, 207], "normal": [142, 143, 144, 145, 146, 147, 149, 152, 161, 168, 172, 181, 186, 193, 200, 207, 218], "should": [142, 143, 144, 145, 146, 147, 149, 180, 181, 193, 207], "ratio": [145, 146, 147, 181, 193, 207], "indic": [145, 146, 147, 181, 193, 207], "case": [145, 146, 147], "text": [145, 146, 147], "sqrt": [145, 146, 147, 172, 186, 200, 218], "otherwis": [145, 146, 147], "322876": [145, 146, 147], "co": [148, 149, 153], "sin": [148, 149, 153], "pi": [148, 149], "14159265358979323846f": [148, 149], "rotationangl": [148, 149], "90": [148, 149], "convers": [152, 153, 161], "q": [152, 153, 157, 161, 169, 170, 171, 173, 174, 175, 178], "euler": [153, 161, 168, 180, 193], "v": [153, 158, 159, 160, 161, 182, 183, 184, 185, 187, 188, 189, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224], "570796f": 153, "000000f": 153, "500000k": [153, 178], "repres": [161, 180, 193], "atan2": 161, "asin": 161, "570796": 161, "translationvector": [162, 163], "_a": 168, "_b": 168, "_c": 168, "_d": 168, "valu": [168, 174, 181, 188, 193, 202, 207, 220], "conjug": 168, "to_quat": 168, "vec": [168, 181, 193, 207], "0i": 169, "0j": 169, "0k": 169, "000000j": [169, 173, 178], "000000k": [169, 173], "_bi": 170, "_cj": 170, "_dk": 170, "75": [171, 174], "570000i": 176, "260000j": 176, "100000k": 176, "070000i": 177, "740000j": 177, "400000k": 177, "object": 180, "multipl": 180, "point": 180, "etc": 180, "accordingli": 180, "_x": [181, 193, 207], "_y": [181, 193, 207], "reflect": [181, 193, 207], "refract": [181, 193, 207], "ior": [181, 193, 207], "_xyz": [193, 207], "_z": [193, 207], "cross": 193, "to_vec3": 193, "_xyzw": 207, "_w": 207, "_yzw": 207, "ec4": 222}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"get": 0, "start": 0, "nml": [0, 1, 2, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 176, 177, 178, 179, 189, 190, 191, 192, 197, 198, 203, 204, 205, 206, 221, 222, 223, 224], "add": 0, "cmake": 0, "project": 0, "us": 0, "nutshel": 1, "mathemat": 1, "librari": 1, "tabl": 1, "content": 1, "indic": 1, "matrix": 3, "mat2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 73, 82, 89, 96, 103, 110, 117, 124, 125, 126, 154, 164], "class": [4, 20, 40, 168, 181, 193, 207], "variabl": [4, 20, 40, 168, 181, 193, 207], "function": [4, 20, 40, 168, 181, 193, 207], "constructor": [4, 20, 40, 168, 181, 193, 207], "oper": [4, 13, 14, 15, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 66, 67, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 168, 173, 174, 175, 176, 177, 178, 179, 181, 187, 188, 189, 190, 191, 192, 193, 201, 202, 203, 204, 205, 206, 207, 219, 220, 221, 222, 223, 224], "namespac": [4, 20, 40, 168, 181, 193, 207], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "float": [6, 7, 8, 9, 11, 12, 15, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 63, 66, 70, 71, 72, 82, 83, 84, 85, 86, 87, 88, 117, 118, 119, 120, 121, 122, 123, 124, 127, 130, 133, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 149, 170, 171, 172, 173, 174, 175, 178, 183, 184, 185, 186, 187, 188, 189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 224], "_xxxyyxyi": 6, "_xx": [7, 8, 23, 24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 54], "_xy": [7, 8, 23, 24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 54, 183, 198, 214, 215], "_yx": [7, 9, 23, 24, 28, 43, 44, 45, 46, 51, 52, 53, 54], "_yi": [7, 9, 23, 24, 27, 28, 43, 44, 45, 46, 51, 52, 53, 54], "nlm": [8, 9, 10, 19, 39, 67, 211, 212, 213, 214, 215, 216], "vec2": [8, 9, 10, 70, 79, 86, 93, 100, 107, 114, 121, 126, 135, 142, 145, 150, 158, 162, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 211, 212, 214, 215], "_yxyi": [8, 10], "_xxxy": [9, 10], "data": [11, 31, 59, 171, 185, 199, 217], "det": [12, 32, 60], "const": [12, 14, 15, 16, 17, 18, 19, 32, 34, 35, 36, 37, 38, 39, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 174, 175, 176, 177, 178, 179, 188, 189, 190, 191, 192, 202, 203, 204, 205, 206, 220, 221, 222, 223, 224], "size_t": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "index": [13, 14, 33, 34, 61, 62, 173, 174, 187, 188, 201, 202, 219, 220], "other": [15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 63, 64, 65, 66, 67, 175, 176, 177, 178, 179, 189, 190, 191, 192, 203, 204, 205, 206, 221, 222, 223, 224], "mat3": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 74, 83, 90, 97, 104, 111, 118, 127, 128, 129, 148, 150, 155, 162, 165], "_xxxyxzyxyyyzzxzyzz": 22, "_xz": [23, 24, 25, 26, 43, 44, 45, 46, 47, 48, 49, 50, 54], "_yz": [23, 24, 27, 28, 43, 44, 45, 46, 51, 52, 53, 54, 197, 212], "_zx": [23, 25, 27, 29, 43, 44, 47, 48, 51, 52, 54, 55, 56], "_zy": [23, 25, 27, 29, 43, 44, 47, 48, 51, 52, 54, 55, 56], "_zz": [23, 25, 27, 29, 43, 44, 47, 48, 51, 52, 54, 55, 56], "vec3": [24, 25, 26, 27, 28, 29, 30, 69, 71, 76, 77, 80, 87, 94, 101, 108, 115, 122, 129, 136, 143, 146, 149, 151, 153, 159, 161, 163, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 213, 216], "_zxzyzz": [24, 26, 28, 30], "_yxyyyz": [25, 26, 29, 30], "_xxxyxz": [27, 28, 29, 30], "mat4": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 84, 91, 98, 105, 112, 119, 130, 131, 132, 138, 139, 140, 141, 149, 151, 152, 156, 163, 166], "_xxxyxzxwyxyyyzywzxzyzzzwwxwywzww": 42, "_xw": [43, 44, 45, 46, 47, 48, 49, 50, 54], "_yw": [43, 44, 45, 46, 51, 52, 53, 54], "_zw": [43, 44, 47, 48, 51, 52, 54, 55, 56, 211, 215], "_wx": [43, 45, 47, 49, 51, 53, 54, 55, 57], "_wy": [43, 45, 47, 49, 51, 53, 54, 55, 57], "_wz": [43, 45, 47, 49, 51, 53, 54, 55, 57], "_ww": [43, 45, 47, 49, 51, 53, 54, 55, 57], "vec4": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 72, 81, 88, 95, 102, 109, 116, 123, 132, 137, 144, 147, 160, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "_wxwywzww": [44, 46, 48, 50, 52, 56, 58], "_zxzyzzzw": [45, 46, 49, 50, 53, 57, 58], "_yxyyyzyw": [47, 48, 49, 50, 55, 56, 57, 58], "_xxxyxzxw": [51, 52, 53, 55, 56, 57, 58], "quat": [68, 78, 85, 92, 99, 106, 113, 120, 133, 134, 152, 153, 157, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "conjug": 68, "qua": [68, 78, 152, 161], "cross": 69, "b": [69, 70, 71, 72], "dot": [70, 71, 72], "invers": [73, 74, 75], "mat": [73, 74, 75, 164, 165, 166], "lookatlh": 76, "from": [76, 77], "up": [76, 77], "lookatrh": 77, "normal": [78, 79, 80, 81], "vec": [79, 80, 81, 153, 154, 155, 156, 157, 158, 159, 160], "lh": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "rh": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "bool": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "ortholh": 138, "left": [138, 139], "right": [138, 139], "bottom": [138, 139], "top": [138, 139], "far": [138, 139, 140, 141], "orthorh": 139, "perspectivelh": 140, "fovi": [140, 141], "aspectratio": [140, 141], "perspectiverh": 141, "reflect": [142, 143, 144], "i": [142, 143, 144, 145, 146, 147], "n": [142, 143, 144, 145, 146, 147], "refract": [145, 146, 147], "ior": [145, 146, 147], "rotat": [148, 149], "angl": [148, 149], "axi": 149, "scale": [150, 151], "to_mat4": 152, "to_quat": 153, "std": [154, 155, 156, 157, 158, 159, 160], "string": [154, 155, 156, 157, 158, 159, 160], "to_str": [154, 155, 156, 157, 158, 159, 160], "to_vec3": 161, "translat": [162, 163], "transpos": [164, 165, 166], "quaternion": 167, "_a": 170, "_b": 170, "_c": 170, "_d": 170, "length": [172, 186, 200, 218], "vector": 180, "_x": [184, 196, 197, 210, 211, 212, 213], "_y": [184, 196, 210, 211], "_xyz": [195, 216], "_z": [196, 198, 210, 214], "_xyzw": 209, "_w": [210, 212, 214, 216], "_yzw": 213}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Getting started": [[0, "getting-started"]], "Get nml": [[0, "get-nml"]], "Add nml to a CMake project": [[0, "add-nml-to-a-cmake-project"]], "Use nml": [[0, "use-nml"]], "nml - Nutshell Mathematics Library": [[1, "nml-nutshell-mathematics-library"]], "Table of Contents": [[1, null]], "Indices and tables": [[1, "indices-and-tables"]], "nml": [[2, "nml"]], "Matrix": [[3, "matrix"]], "mat2": [[4, "mat2"]], "Class variables": [[4, "class-variables"], [20, "class-variables"], [40, "class-variables"], [168, "class-variables"], [181, "class-variables"], [193, "class-variables"], [207, "class-variables"]], "Class functions": [[4, "class-functions"], [20, "class-functions"], [40, "class-functions"], [168, "class-functions"], [181, "class-functions"], [193, "class-functions"], [207, "class-functions"]], "Constructors": [[4, "constructors"], [20, "constructors"], [40, "constructors"], [168, "constructors"], [181, "constructors"], [193, "constructors"], [207, "constructors"]], "Operators": [[4, "operators"], [4, "id1"], [20, "operators"], [20, "id1"], [40, "operators"], [40, "id1"], [168, "operators"], [168, "id1"], [181, "operators"], [181, "id1"], [193, "operators"], [193, "id1"], [207, "operators"], [207, "id1"]], "Functions": [[4, "functions"], [4, "id2"], [20, "functions"], [20, "id2"], [40, "functions"], [40, "id2"], [168, "functions"], [168, "id2"], [181, "functions"], [181, "id2"], [193, "functions"], [193, "id2"], [207, "functions"], [207, "id2"]], "Namespace functions": [[4, "namespace-functions"], [20, "namespace-functions"], [40, "namespace-functions"], [168, "namespace-functions"], [181, "namespace-functions"], [193, "namespace-functions"], [207, "namespace-functions"]], "mat2: mat2()": [[5, "mat2-mat2"]], "Example": [[5, "example"], [6, "example"], [7, "example"], [8, "example"], [9, "example"], [10, "example"], [11, "example"], [12, "example"], [13, "example"], [14, "example"], [15, "example"], [16, "example"], [17, "example"], [18, "example"], [19, "example"], [21, "example"], [22, "example"], [23, "example"], [24, "example"], [25, "example"], [26, "example"], [27, "example"], [28, "example"], [29, "example"], [30, "example"], [31, "example"], [32, "example"], [33, "example"], [34, "example"], [35, "example"], [36, "example"], [37, "example"], [38, "example"], [39, "example"], [41, "example"], [42, "example"], [43, "example"], [44, "example"], [45, "example"], [46, "example"], [47, "example"], [48, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [93, "example"], [94, "example"], [95, "example"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [105, "example"], [106, "example"], [107, "example"], [108, "example"], [109, "example"], [110, "example"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [120, "example"], [121, "example"], [122, "example"], [123, "example"], [124, "example"], [125, "example"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [166, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [175, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [194, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"], [199, "example"], [200, "example"], [201, "example"], [202, "example"], [203, "example"], [204, "example"], [205, "example"], [206, "example"], [208, "example"], [209, "example"], [210, "example"], [211, "example"], [212, "example"], [213, "example"], [214, "example"], [215, "example"], [216, "example"], [217, "example"], [218, "example"], [219, "example"], [220, "example"], [221, "example"], [222, "example"], [223, "example"], [224, "example"]], "mat2: mat2(float _xxxyyxyy)": [[6, "mat2-mat2-float-xxxyyxyy"]], "mat2: mat2(float _xx, float _xy, float _yx, float _yy)": [[7, "mat2-mat2-float-xx-float-xy-float-yx-float-yy"]], "mat2: mat2(float _xx, float _xy, nlm::vec2 _yxyy)": [[8, "mat2-mat2-float-xx-float-xy-nlm-vec2-yxyy"]], "mat2: mat2(nlm::vec2 _xxxy, float _yx, float _yy)": [[9, "mat2-mat2-nlm-vec2-xxxy-float-yx-float-yy"]], "mat2: mat2(nlm::vec2 _xxxy, nlm::vec2 _yxyy)": [[10, "mat2-mat2-nlm-vec2-xxxy-nlm-vec2-yxyy"]], "mat2: float* data()": [[11, "mat2-float-data"]], "mat2: float det() const": [[12, "mat2-float-det-const"]], "mat2: nml::mat2& operator[](size_t index)": [[13, "mat2-nml-mat2-operator-size-t-index"]], "mat2: const nml::mat2& operator[](size_t index) const": [[14, "mat2-const-nml-mat2-operator-size-t-index-const"]], "mat2: nml::mat2& operator/=(const float other)": [[15, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator-=(const nml::mat2& other)": [[16, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator+=(const nml::mat2& other)": [[17, "mat2-nml-mat2-operator-const-nml-mat2-other"]], "mat2: nml::mat2& operator*=(const float other)": [[18, "mat2-nml-mat2-operator-const-float-other"]], "mat2: nml::mat2& operator*=(const nlm::mat2& other)": [[19, "mat2-nml-mat2-operator-const-nlm-mat2-other"]], "mat3": [[20, "mat3"]], "mat3: mat3()": [[21, "mat3-mat3"]], "mat3: mat3(float _xxxyxzyxyyyzzxzyzz)": [[22, "mat3-mat3-float-xxxyxzyxyyyzzxzyzz"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, float _zx, float _zy, float _zz)": [[23, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)": [[24, "mat3-mat3-float-xx-float-xy-float-xz-float-yx-float-yy-float-yz-nml-vec3-zxzyzz"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)": [[25, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-yxyyyz-float-zx-float-zy-float-zz"]], "mat3: mat3(float _xx, float _xy, float _xz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)": [[26, "mat3-mat3-float-xx-float-xy-float-xz-nml-vec3-yxyyyz-nml-vec3-zxzyzz"]], "mat3: mat3(nml::vec3 _xxxyxz, float _yy, float _yz, float _zx, float _zy, float _zz)": [[27, "mat3-mat3-nml-vec3-xxxyxz-float-yy-float-yz-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _xxxyxz, float _yx, float _yy, float _yz, nml::vec3 _zxzyzz)": [[28, "mat3-mat3-nml-vec3-xxxyxz-float-yx-float-yy-float-yz-nml-vec3-zxzyzz"]], "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, float _zx, float _zy, float _zz)": [[29, "mat3-mat3-nml-vec3-xxxyxz-nml-vec3-yxyyyz-float-zx-float-zy-float-zz"]], "mat3: mat3(nml::vec3 _xxxyxz, nml::vec3 _yxyyyz, nml::vec3 _zxzyzz)": [[30, "mat3-mat3-nml-vec3-xxxyxz-nml-vec3-yxyyyz-nml-vec3-zxzyzz"]], "mat3: float* data()": [[31, "mat3-float-data"]], "mat3: float det() const": [[32, "mat3-float-det-const"]], "mat3: nml::mat3& operator[](size_t index)": [[33, "mat3-nml-mat3-operator-size-t-index"]], "mat3: const nml::mat3& operator[](size_t index) const": [[34, "mat3-const-nml-mat3-operator-size-t-index-const"]], "mat3: nml::mat3& operator/=(const float other)": [[35, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator-=(const nml::mat3& other)": [[36, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator+=(const nml::mat3& other)": [[37, "mat3-nml-mat3-operator-const-nml-mat3-other"]], "mat3: nml::mat3& operator*=(const float other)": [[38, "mat3-nml-mat3-operator-const-float-other"]], "mat3: nml::mat3& operator*=(const nlm::mat3& other)": [[39, "mat3-nml-mat3-operator-const-nlm-mat3-other"]], "mat4": [[40, "mat4"]], "mat4: mat4()": [[41, "mat4-mat4"]], "mat4: mat4(float _xxxyxzxwyxyyyzywzxzyzzzwwxwywzww)": [[42, "mat4-mat4-float-xxxyxzxwyxyyyzywzxzyzzzwwxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[43, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"], [54, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[44, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[45, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)": [[46, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-float-yx-float-yy-float-yz-float-yw-nml-vec4-zxzyzzzw-nml-vec4-wxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[47, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[48, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[49, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(float _xx, float _xy, float _xz, float _xw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)": [[50, "mat4-mat4-float-xx-float-xy-float-xz-float-xw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-nml-vec4-wxwywzww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[51, "mat4-mat4-nml-vec4-xxxyxzxw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[52, "mat4-mat4-nml-vec4-xxxyxzxw-float-yx-float-yy-float-yz-float-yw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, float _yx, float _yy, float _yz, float _yw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[53, "mat4-mat4-nml-vec4-xxxyxzxw-float-yx-float-yy-float-yz-float-yw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, float _wx, float _wy, float _wz, float _ww)": [[55, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, float _zx, float _zy, float _zz, float _zw, nml::vec4 _wxwywzww)": [[56, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-float-zx-float-zy-float-zz-float-zw-nml-vec4-wxwywzww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, float _wx, float _wy, float _wz, float _ww)": [[57, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-float-wx-float-wy-float-wz-float-ww"]], "mat4: mat4(nml::vec4 _xxxyxzxw, nml::vec4 _yxyyyzyw, nml::vec4 _zxzyzzzw, nml::vec4 _wxwywzww)": [[58, "mat4-mat4-nml-vec4-xxxyxzxw-nml-vec4-yxyyyzyw-nml-vec4-zxzyzzzw-nml-vec4-wxwywzww"]], "mat4: float* data()": [[59, "mat4-float-data"]], "mat4: float det() const": [[60, "mat4-float-det-const"]], "mat4: nml::mat4& operator[](size_t index)": [[61, "mat4-nml-mat4-operator-size-t-index"]], "mat4: const nml::mat4& operator[](size_t index) const": [[62, "mat4-const-nml-mat4-operator-size-t-index-const"]], "mat4: nml::mat4& operator/=(const float other)": [[63, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator-=(const nml::mat4& other)": [[64, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator+=(const nml::mat4& other)": [[65, "mat4-nml-mat4-operator-const-nml-mat4-other"]], "mat4: nml::mat4& operator*=(const float other)": [[66, "mat4-nml-mat4-operator-const-float-other"]], "mat4: nml::mat4& operator*=(const nlm::mat4& other)": [[67, "mat4-nml-mat4-operator-const-nlm-mat4-other"]], "nml::quat nml::conjugate(const nml::quat& qua)": [[68, "nml-quat-nml-conjugate-const-nml-quat-qua"]], "nml::vec3 nml::cross(const nml::vec3& a, const nml::vec3& b)": [[69, "nml-vec3-nml-cross-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::vec2& a, const nml::vec2& b)": [[70, "float-nml-dot-const-nml-vec2-a-const-nml-vec2-b"]], "float nml::dot(const nml::vec3& a, const nml::vec3& b)": [[71, "float-nml-dot-const-nml-vec3-a-const-nml-vec3-b"]], "float nml::dot(const nml::vec4& a, const nml::vec4& b)": [[72, "float-nml-dot-const-nml-vec4-a-const-nml-vec4-b"]], "nml::mat2 inverse(const nml::mat2& mat)": [[73, "nml-mat2-inverse-const-nml-mat2-mat"]], "nml::mat3 inverse(const nml::mat3& mat)": [[74, "nml-mat3-inverse-const-nml-mat3-mat"]], "nml::mat4 inverse(const nml::mat4& mat)": [[75, "nml-mat4-inverse-const-nml-mat4-mat"]], "nml::mat4 lookAtLH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[76, "nml-mat4-lookatlh-const-nml-vec3-from-const-nml-vec3-to-const-nml-vec3-up"]], "nml::mat4 lookAtRH(const nml::vec3& from, const nml::vec3& to, const nml::vec3& up)": [[77, "nml-mat4-lookatrh-const-nml-vec3-from-const-nml-vec3-to-const-nml-vec3-up"]], "nml::quat nml::normalize(const nml::quat& qua)": [[78, "nml-quat-nml-normalize-const-nml-quat-qua"]], "nml::vec2 nml::normalize(const nml::vec2& vec)": [[79, "nml-vec2-nml-normalize-const-nml-vec2-vec"]], "nml::vec3 nml::normalize(const nml::vec3& vec)": [[80, "nml-vec3-nml-normalize-const-nml-vec3-vec"]], "nml::vec4 nml::normalize(const nml::vec4& vec)": [[81, "nml-vec4-nml-normalize-const-nml-vec4-vec"]], "nml::mat2 operator/(nml::mat2 lhs, const float rhs)": [[82, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat3 operator/(nml::mat3 lhs, const float rhs)": [[83, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat4 operator/(nml::mat4 lhs, const float rhs)": [[84, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::quat operator/(nml::quat lhs, const float rhs)": [[85, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::vec2 operator/(nml::vec2 lhs, const float rhs)": [[86, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator/(nml::vec3 lhs, const float rhs)": [[87, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator/(nml::vec4 lhs, const float rhs)": [[88, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "bool operator==(const nml::mat2& lhs, const nml::mat2& rhs)": [[89, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator==(const nml::mat3& lhs, const nml::mat3& rhs)": [[90, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator==(const nml::mat4& lhs, const nml::mat4& rhs)": [[91, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator==(const nml::quat& lhs, const nml::quat& rhs)": [[92, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator==(const nml::vec2& lhs, const nml::vec2& rhs)": [[93, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator==(const nml::vec3& lhs, const nml::vec3& rhs)": [[94, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator==(const nml::vec4& lhs, const nml::vec4& rhs)": [[95, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "bool operator!=(const nml::mat2& lhs, const nml::mat2& rhs)": [[96, "bool-operator-const-nml-mat2-lhs-const-nml-mat2-rhs"]], "bool operator!=(const nml::mat3& lhs, const nml::mat3& rhs)": [[97, "bool-operator-const-nml-mat3-lhs-const-nml-mat3-rhs"]], "bool operator!=(const nml::mat4& lhs, const nml::mat4& rhs)": [[98, "bool-operator-const-nml-mat4-lhs-const-nml-mat4-rhs"]], "bool operator!=(const nml::quat& lhs, const nml::quat& rhs)": [[99, "bool-operator-const-nml-quat-lhs-const-nml-quat-rhs"]], "bool operator!=(const nml::vec2& lhs, const nml::vec2& rhs)": [[100, "bool-operator-const-nml-vec2-lhs-const-nml-vec2-rhs"]], "bool operator!=(const nml::vec3& lhs, const nml::vec3& rhs)": [[101, "bool-operator-const-nml-vec3-lhs-const-nml-vec3-rhs"]], "bool operator!=(const nml::vec4& lhs, const nml::vec4& rhs)": [[102, "bool-operator-const-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator-(nml::mat2 lhs, const nml::mat2& rhs)": [[103, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator-(nml::mat3 lhs, const nml::mat3& rhs)": [[104, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator-(nml::mat4 lhs, const nml::mat4& rhs)": [[105, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator-(nml::quat lhs, const nml::quat& rhs)": [[106, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator-(nml::vec2 lhs, const nml::vec2& rhs)": [[107, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator-(nml::vec3 lhs, const nml::vec3& rhs)": [[108, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator-(nml::vec4 lhs, const nml::vec4& rhs)": [[109, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator+(nml::mat2 lhs, const nml::mat2& rhs)": [[110, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator+(nml::mat3 lhs, const nml::mat3& rhs)": [[111, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator+(nml::mat4 lhs, const nml::mat4& rhs)": [[112, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::quat operator+(nml::quat lhs, const nml::quat& rhs)": [[113, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator+(nml::vec2 lhs, const nml::vec2& rhs)": [[114, "nml-vec2-operator-nml-vec2-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator+(nml::vec3 lhs, const nml::vec3& rhs)": [[115, "nml-vec3-operator-nml-vec3-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator+(nml::vec4 lhs, const nml::vec4& rhs)": [[116, "nml-vec4-operator-nml-vec4-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(float lhs, const nml::mat2& rhs)": [[117, "nml-mat2-operator-float-lhs-const-nml-mat2-rhs"]], "nml::mat3 operator*(float lhs, const nml::mat3& rhs)": [[118, "nml-mat3-operator-float-lhs-const-nml-mat3-rhs"]], "nml::mat4 operator*(float lhs, const nml::mat4& rhs)": [[119, "nml-mat4-operator-float-lhs-const-nml-mat4-rhs"]], "nml::quat operator*(float lhs, const nml::quat& rhs)": [[120, "nml-quat-operator-float-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(float lhs, const nml::vec2& rhs)": [[121, "nml-vec2-operator-float-lhs-const-nml-vec2-rhs"]], "nml::vec3 operator*(float lhs, const nml::vec3& rhs)": [[122, "nml-vec3-operator-float-lhs-const-nml-vec3-rhs"]], "nml::vec4 operator*(float lhs, const nml::vec4& rhs)": [[123, "nml-vec4-operator-float-lhs-const-nml-vec4-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const float rhs)": [[124, "nml-mat2-operator-nml-mat2-lhs-const-float-rhs"]], "nml::mat2 operator*(nml::mat2 lhs, const nml::mat2& rhs)": [[125, "nml-mat2-operator-nml-mat2-lhs-const-nml-mat2-rhs"]], "nml::vec2 operator*(nml::mat2 lhs, const nml::vec2& rhs)": [[126, "nml-vec2-operator-nml-mat2-lhs-const-nml-vec2-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const float rhs)": [[127, "nml-mat3-operator-nml-mat3-lhs-const-float-rhs"]], "nml::mat3 operator*(nml::mat3 lhs, const nml::mat3& rhs)": [[128, "nml-mat3-operator-nml-mat3-lhs-const-nml-mat3-rhs"]], "nml::vec3 operator*(nml::mat3 lhs, const nml::vec3& rhs)": [[129, "nml-vec3-operator-nml-mat3-lhs-const-nml-vec3-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const float rhs)": [[130, "nml-mat4-operator-nml-mat4-lhs-const-float-rhs"]], "nml::mat4 operator*(nml::mat4 lhs, const nml::mat4& rhs)": [[131, "nml-mat4-operator-nml-mat4-lhs-const-nml-mat4-rhs"]], "nml::vec4 operator*(nml::mat4 lhs, const nml::vec4& rhs)": [[132, "nml-vec4-operator-nml-mat4-lhs-const-nml-vec4-rhs"]], "nml::quat operator*(nml::quat lhs, const float rhs)": [[133, "nml-quat-operator-nml-quat-lhs-const-float-rhs"]], "nml::quat operator*(nml::quat lhs, const nml::quat& rhs)": [[134, "nml-quat-operator-nml-quat-lhs-const-nml-quat-rhs"]], "nml::vec2 operator*(nml::vec2 lhs, const float rhs)": [[135, "nml-vec2-operator-nml-vec2-lhs-const-float-rhs"]], "nml::vec3 operator*(nml::vec3 lhs, const float rhs)": [[136, "nml-vec3-operator-nml-vec3-lhs-const-float-rhs"]], "nml::vec4 operator*(nml::vec4 lhs, const float rhs)": [[137, "nml-vec4-operator-nml-vec4-lhs-const-float-rhs"]], "nml::mat4 orthoLH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[138, "nml-mat4-ortholh-const-float-left-const-float-right-const-float-bottom-const-float-top-const-float-near-const-float-far"]], "nml::mat4 orthoRH(const float left, const float right, const float bottom, const float top, const float near, const float far)": [[139, "nml-mat4-orthorh-const-float-left-const-float-right-const-float-bottom-const-float-top-const-float-near-const-float-far"]], "nml::mat4 perspectiveLH(const float fovY, const float aspectRatio, const float near, const float far)": [[140, "nml-mat4-perspectivelh-const-float-fovy-const-float-aspectratio-const-float-near-const-float-far"]], "nml::mat4 perspectiveRH(const float fovY, const float aspectRatio, const float near, const float far)": [[141, "nml-mat4-perspectiverh-const-float-fovy-const-float-aspectratio-const-float-near-const-float-far"]], "nml::vec2 nml::reflect(const nml::vec2& i, const nml::vec2& n)": [[142, "nml-vec2-nml-reflect-const-nml-vec2-i-const-nml-vec2-n"]], "nml::vec3 nml::reflect(const nml::vec3& i, const nml::vec3& n)": [[143, "nml-vec3-nml-reflect-const-nml-vec3-i-const-nml-vec3-n"]], "nml::vec4 nml::reflect(const nml::vec4& i, const nml::vec4& n)": [[144, "nml-vec4-nml-reflect-const-nml-vec4-i-const-nml-vec4-n"]], "nml::vec2 nml::refract(const nml::vec2& i, const nml::vec2& n, float ior)": [[145, "nml-vec2-nml-refract-const-nml-vec2-i-const-nml-vec2-n-float-ior"]], "nml::vec3 nml::refract(const nml::vec3& i, const nml::vec3& n, float ior)": [[146, "nml-vec3-nml-refract-const-nml-vec3-i-const-nml-vec3-n-float-ior"]], "nml::vec4 nml::refract(const nml::vec4& i, const nml::vec4& n, float ior)": [[147, "nml-vec4-nml-refract-const-nml-vec4-i-const-nml-vec4-n-float-ior"]], "nml::mat3 rotate(const float angle)": [[148, "nml-mat3-rotate-const-float-angle"]], "nml::mat4 rotate(const float angle, const nml::vec3& axis)": [[149, "nml-mat4-rotate-const-float-angle-const-nml-vec3-axis"]], "nml::mat3 scale(const nml::vec2& scaling)": [[150, "nml-mat3-scale-const-nml-vec2-scaling"]], "nml::mat4 scale(const nml::vec3& scaling)": [[151, "nml-mat4-scale-const-nml-vec3-scaling"]], "nml::mat4 nml::to_mat4(const nml::quat& qua)": [[152, "nml-mat4-nml-to-mat4-const-nml-quat-qua"]], "nml::quat nml::to_quat(const nml::vec3& vec)": [[153, "nml-quat-nml-to-quat-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::mat2& vec)": [[154, "std-string-nml-to-string-const-nml-mat2-vec"]], "std::string nml::to_string(const nml::mat3& vec)": [[155, "std-string-nml-to-string-const-nml-mat3-vec"]], "std::string nml::to_string(const nml::mat4& vec)": [[156, "std-string-nml-to-string-const-nml-mat4-vec"]], "std::string nml::to_string(const nml::quat& vec)": [[157, "std-string-nml-to-string-const-nml-quat-vec"]], "std::string nml::to_string(const nml::vec2& vec)": [[158, "std-string-nml-to-string-const-nml-vec2-vec"]], "std::string nml::to_string(const nml::vec3& vec)": [[159, "std-string-nml-to-string-const-nml-vec3-vec"]], "std::string nml::to_string(const nml::vec4& vec)": [[160, "std-string-nml-to-string-const-nml-vec4-vec"]], "nml::vec3 nml::to_vec3(const nml::quat& qua)": [[161, "nml-vec3-nml-to-vec3-const-nml-quat-qua"]], "nml::mat3 translate(const nml::vec2& translation)": [[162, "nml-mat3-translate-const-nml-vec2-translation"]], "nml::mat4 translate(const nml::vec3& translation)": [[163, "nml-mat4-translate-const-nml-vec3-translation"]], "nml::mat2 transpose(const nml::mat2& mat)": [[164, "nml-mat2-transpose-const-nml-mat2-mat"]], "nml::mat3 transpose(const nml::mat3& mat)": [[165, "nml-mat3-transpose-const-nml-mat3-mat"]], "nml::mat4 transpose(const nml::mat4& mat)": [[166, "nml-mat4-transpose-const-nml-mat4-mat"]], "Quaternion": [[167, "quaternion"]], "quat": [[168, "quat"]], "quat: quat()": [[169, "quat-quat"]], "quat: quat(float _a, float _b, float _c, float _d)": [[170, "quat-quat-float-a-float-b-float-c-float-d"]], "quat: float* data()": [[171, "quat-float-data"]], "quat: float length()": [[172, "quat-float-length"]], "quat: float& operator[](size_t index)": [[173, "quat-float-operator-size-t-index"]], "quat: const float operator[](size_t index) const": [[174, "quat-const-float-operator-size-t-index-const"]], "quat: nml::quat& operator/=(const float other)": [[175, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator-=(const nml::quat& other)": [[176, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator+=(const nml::quat& other)": [[177, "quat-nml-quat-operator-const-nml-quat-other"]], "quat: nml::quat& operator*=(const float other)": [[178, "quat-nml-quat-operator-const-float-other"]], "quat: nml::quat& operator*=(const nml::quat& other)": [[179, "quat-nml-quat-operator-const-nml-quat-other"]], "Vector": [[180, "vector"]], "vec2": [[181, "vec2"]], "vec2: vec2()": [[182, "vec2-vec2"]], "vec2: vec2(float _xy)": [[183, "vec2-vec2-float-xy"]], "vec2: vec2(float _x, float _y)": [[184, "vec2-vec2-float-x-float-y"]], "vec2: float* data()": [[185, "vec2-float-data"]], "vec2: float length()": [[186, "vec2-float-length"]], "vec2: float& operator[](size_t index)": [[187, "vec2-float-operator-size-t-index"]], "vec2: const float operator[](size_t index) const": [[188, "vec2-const-float-operator-size-t-index-const"]], "vec2: nml::vec2& operator/=(const float other)": [[189, "vec2-nml-vec2-operator-const-float-other"]], "vec2: nml::vec2& operator-=(const nml::vec2& other)": [[190, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator+=(const nml::vec2& other)": [[191, "vec2-nml-vec2-operator-const-nml-vec2-other"]], "vec2: nml::vec2& operator*=(const float other)": [[192, "vec2-nml-vec2-operator-const-float-other"]], "vec3": [[193, "vec3"]], "vec3: vec3()": [[194, "vec3-vec3"]], "vec3: vec3(float _xyz)": [[195, "vec3-vec3-float-xyz"]], "vec3: vec3(float _x, float _y, float _z)": [[196, "vec3-vec3-float-x-float-y-float-z"]], "vec3: vec3(float _x, nml::vec2 _yz)": [[197, "vec3-vec3-float-x-nml-vec2-yz"]], "vec3: vec3(nml::vec2 _xy, float _z)": [[198, "vec3-vec3-nml-vec2-xy-float-z"]], "vec3: float* data()": [[199, "vec3-float-data"]], "vec3: float length()": [[200, "vec3-float-length"]], "vec3: float& operator[](size_t index)": [[201, "vec3-float-operator-size-t-index"]], "vec3: const float operator[](size_t index) const": [[202, "vec3-const-float-operator-size-t-index-const"]], "vec3: nml::vec3& operator/=(const float other)": [[203, "vec3-nml-vec3-operator-const-float-other"]], "vec3: nml::vec3& operator-=(const nml::vec3& other)": [[204, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator+=(const nml::vec3& other)": [[205, "vec3-nml-vec3-operator-const-nml-vec3-other"]], "vec3: nml::vec3& operator*=(const float other)": [[206, "vec3-nml-vec3-operator-const-float-other"]], "vec4": [[207, "vec4"]], "vec4: vec4()": [[208, "vec4-vec4"]], "vec4: vec4(float _xyzw)": [[209, "vec4-vec4-float-xyzw"]], "vec4: vec4(float _x, float _y, float _z, float _w)": [[210, "vec4-vec4-float-x-float-y-float-z-float-w"]], "vec4: vec4(float _x, float _y, nlm::vec2 _zw)": [[211, "vec4-vec4-float-x-float-y-nlm-vec2-zw"]], "vec4: vec4(float _x, nlm::vec2 _yz, float _w)": [[212, "vec4-vec4-float-x-nlm-vec2-yz-float-w"]], "vec4: vec4(float _x, nlm::vec3 _yzw)": [[213, "vec4-vec4-float-x-nlm-vec3-yzw"]], "vec4: vec4(nlm::vec2 _xy, float _z, float _w)": [[214, "vec4-vec4-nlm-vec2-xy-float-z-float-w"]], "vec4: vec4(nlm::vec2 _xy, nlm::vec2 _zw)": [[215, "vec4-vec4-nlm-vec2-xy-nlm-vec2-zw"]], "vec4: vec4(nlm::vec3 _xyz, float _w)": [[216, "vec4-vec4-nlm-vec3-xyz-float-w"]], "vec4: float* data()": [[217, "vec4-float-data"]], "vec4: float length()": [[218, "vec4-float-length"]], "vec4: float& operator[](size_t index)": [[219, "vec4-float-operator-size-t-index"]], "vec4: const float operator[](size_t index) const": [[220, "vec4-const-float-operator-size-t-index-const"]], "vec4: nml::vec4& operator/=(const float other)": [[221, "vec4-nml-vec4-operator-const-float-other"]], "vec4: nml::vec4& operator-=(const nml::vec4& other)": [[222, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator+=(const nml::vec4& other)": [[223, "vec4-nml-vec4-operator-const-nml-vec4-other"]], "vec4: nml::vec4& operator*=(const float other)": [[224, "vec4-nml-vec4-operator-const-float-other"]]}, "indexentries": {}})